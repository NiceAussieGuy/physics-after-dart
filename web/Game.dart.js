// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function() {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.StackTrace = {"": "Object;stack",
  toString$0: function() {
    var t1 = this.stack;
    return !(t1 == null) ? t1 : "";
  }
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  }
};

$$.Dynamic_ = {"": "Object;"};

$$.Null = {"": "Object;"};

$$.MetaInfo = {"": "Object;_tag>,_tags,_set>"};

$$.JSSyntaxRegExp = {"": "Object;_liblib0$_pattern,_isMultiLine,_isCaseSensitive",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    m = $.regExpExec(this, $.checkString(str));
    if (m == null)
      return;
    matchStart = m.index;
    t1 = $.length($.$$index(m, 0));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchStart + t1, m);
  },
  hasMatch$1: function(str) {
    return $.regExpTest(this, $.checkString(str));
  },
  allMatches$1: function(str) {
    $.checkString(str);
    return $._AllMatchesIterable$(this, str);
  },
  get$pattern: function() {
    return this._liblib0$_pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  $isJSSyntaxRegExp: true
};

$$._MatchImplementation = {"": "Object;pattern>,str,start,end,_groups",
  start$0: function() {
    return this.start.call$0();
  },
  $index: function(index) {
    var t1 = this._groups;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout2(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout2: function(state0, index, t1) {
    return $.$$index(t1, index);
  }
};

$$._AllMatchesIterable = {"": "Iterable;_re,_str",
  get$iterator: function() {
    return $._AllMatchesIterator$(this._re, this._str);
  }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    this._liblib0$_current = this._re.firstMatch$1(this._str);
    return !(this._liblib0$_current == null);
  }
};

$$.StringMatch = {"": "Object;start,str,pattern>",
  $index: function(g) {
    return this.group$1(g);
  },
  group$1: function(group_) {
    if ($.$$eq(group_, 0) !== true)
      throw $.$$throw($.RangeError$value(group_));
    return this.pattern;
  },
  start$0: function() {
    return this.start.call$0();
  }
};

$$.JsStringBuffer = {"": "Object;_contents",
  get$length: function() {
    return this._contents.length;
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(obj) {
    var t1, t2;
    if (typeof obj !== "string")
      return this.add$1$bailout(1, obj);
    t1 = this._contents;
    t2 = obj;
    this._contents = t1 + t2;
  },
  add$1$bailout: function(state0, obj) {
    var t1, t2;
    t1 = this._contents;
    t2 = typeof obj === "string" ? obj : $.S(obj);
    this._contents = t1 + t2;
  },
  clear$0: function() {
    this._contents = "";
  },
  toString$0: function() {
    return this._contents;
  }
};

$$.Collection = {"": "Iterable;",
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  removeMatching$1: function(test) {
    $.IterableMixinWorkaround_removeMatching(this, test);
  },
  clear$0: function() {
    $.IterableMixinWorkaround_removeMatching(this, new $.Collection_clear_anon());
  },
  $isCollection: function() {
    return true;
  }
};

$$.NullThrownError = {"": "Object;",
  toString$0: function() {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (!(t1 == null))
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function() {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function() {
    var t1, t2, t3, t4, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.JsStringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout(1, t1, t2);
    for (; $.$$lt(t1.i_1, t2.length) === true; t1.i_1 = $.$$add(t1.i_1, 1)) {
      if ($.$$gt(t1.i_1, 0) === true)
        $.add(t1.sb_0, ", ");
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      $.add(t3, $.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    if (!(t2 == null))
      $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout(2, t1, t2);
    actualParameters = $.toString(t1.sb_0);
    t1.sb_0 = $.JsStringBuffer$("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0)
        $.add(t1.sb_0, ", ");
      t3 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      $.add(t3, t2[i]);
    }
    formalParameters = $.toString(t1.sb_0);
    t2 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t2) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t2) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t2) + "(" + $.S(formalParameters) + ")";
  },
  toString$0$bailout: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.JsStringBuffer$("");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (!(t2 == null))
          for (t3 = $.getInterceptor$JSStringJSArray(t2); $.$$lt(t1.i_1, t3.get$length(t2)) === true; t1.i_1 = $.$$add(t1.i_1, 1)) {
            if ($.$$gt(t1.i_1, 0) === true)
              $.add(t1.sb_0, ", ");
            $.add(t1.sb_0, $.Error_safeToString(t3.$index(t2, t1.i_1)));
          }
        t2 = this._namedArguments;
        if (!(t2 == null))
          $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
        t2 = this._existingArgumentNames;
      case 2:
        var t3, actualParameters, i, formalParameters;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
        else {
          actualParameters = $.toString(t1.sb_0);
          t1.sb_0 = $.JsStringBuffer$("");
          for (t3 = $.getInterceptor$JSStringJSArray(t2), i = 0; $.CONSTANT2.$lt(i, t3.get$length(t2)); ++i) {
            if (i > 0)
              $.add(t1.sb_0, ", ");
            $.add(t1.sb_0, t3.$index(t2, i));
          }
          formalParameters = $.toString(t1.sb_0);
          t2 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t2) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t2) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t2) + "(" + $.S(formalParameters) + ")";
        }
    }
  }
};

$$.UnsupportedError = {"": "Object;message>",
  toString$0: function() {
    return "Unsupported operation: " + $.S(this.get$message());
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function() {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function() {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function() {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function() {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.FormatException = {"": "Object;message",
  toString$0: function() {
    return "FormatException: " + $.S(this.message);
  },
  $isException: true
};

$$.IllegalJSRegExpException = {"": "Object;_pattern,_errmsg",
  toString$0: function() {
    return "IllegalJSRegExpException: '" + $.S(this._pattern) + "' '" + this._errmsg + "'";
  },
  $isException: true
};

$$.ExpectException = {"": "Object;message",
  toString$0: function() {
    return this.message;
  },
  $isException: true
};

$$.Iterable = {"": "Object;",
  contains$1: function(element) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      if ($.$$eq(t1.get$current(), element) === true)
        return true;
    return false;
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$length: function() {
    var it, count;
    it = $.iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function() {
    return $.iterator(this).moveNext$0() !== true;
  }
};

$$.Iterator = {"": "Object;"};

$$.Object = {"": ";",
  $eq: function(other) {
    if (other == null)
      return false;
    return this === other;
  },
  get$hashCode: function() {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function() {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  }
};

$$._StopwatchImpl = {"": "Object;_start,_stop",
  start$0: function() {
    if (this._start == null)
      this._start = $.Primitives_numMicroseconds();
    else {
      if (this._stop == null)
        return;
      this._start = $.$$sub($.Primitives_numMicroseconds(), $.$$sub(this._stop, this._start));
      this._stop = null;
    }
  },
  reset$0: function() {
    if (this._start == null)
      return;
    this._start = $.Primitives_numMicroseconds();
    if (!(this._stop == null))
      this._stop = this._start;
  },
  get$elapsedTicks: function() {
    var t1, t2;
    t1 = this._start;
    if (t1 == null)
      return 0;
    t2 = this._stop;
    return t2 == null ? $.$$sub($._StopwatchImpl__now(), this._start) : $.$$sub(t2, t1);
  },
  get$elapsedMicroseconds: function() {
    return $.$$tdiv($.$$mul(this.get$elapsedTicks(), 1000000), this.get$frequency());
  },
  get$frequency: function() {
    return $._StopwatchImpl__frequency();
  }
};

$$.ObjectInterceptor = {"": "Object;",
  $and: function(receiver, a0) {
    return receiver.$and(a0);
  },
  $mul: function(receiver, a0) {
    return receiver.$mul(a0);
  },
  $add: function(receiver, a0) {
    return receiver.$add(a0);
  },
  $sub: function(receiver, a0) {
    return receiver.$sub(a0);
  },
  $div: function(receiver, a0) {
    return receiver.$div(a0);
  },
  $lt: function(receiver, a0) {
    return receiver.$lt(a0);
  },
  $shl: function(receiver, a0) {
    return receiver.$shl(a0);
  },
  $le: function(receiver, a0) {
    return receiver.$le(a0);
  },
  $eq: function(receiver, a0) {
    return receiver.$eq(a0);
  },
  $gt: function(receiver, a0) {
    return receiver.$gt(a0);
  },
  $ge: function(receiver, a0) {
    return receiver.$ge(a0);
  },
  $shr: function(receiver, a0) {
    return receiver.$shr(a0);
  },
  abs$0: function(receiver) {
    return receiver.abs$0();
  },
  add$1: function(receiver, a0) {
    return receiver.add$1(a0);
  },
  addLast$1: function(receiver, a0) {
    return receiver.addLast$1(a0);
  },
  allMatches$1: function(receiver, a0) {
    return receiver.allMatches$1(a0);
  },
  ceil$0: function(receiver) {
    return receiver.ceil$0();
  },
  charCodeAt$1: function(receiver, a0) {
    return receiver.charCodeAt$1(a0);
  },
  clear$0: function(receiver) {
    return receiver.clear$0();
  },
  codeUnitAt$1: function(receiver, a0) {
    return receiver.codeUnitAt$1(a0);
  },
  compareTo$1: function(receiver, a0) {
    return receiver.compareTo$1(a0);
  },
  get$contains: function(receiver) {
    return receiver.get$contains();
  },
  contains$1: function(receiver, a0) {
    return receiver.contains$1(a0);
  },
  contains$2: function(receiver, a0, a1) {
    return receiver.contains$2(a0, a1);
  },
  endsWith$1: function(receiver, a0) {
    return receiver.endsWith$1(a0);
  },
  floor$0: function(receiver) {
    return receiver.floor$0();
  },
  forEach$1: function(receiver, a0) {
    return receiver.forEach$1(a0);
  },
  getRange$2: function(receiver, a0, a1) {
    return receiver.getRange$2(a0, a1);
  },
  get$hashCode: function(receiver) {
    return receiver.get$hashCode();
  },
  indexOf$1: function(receiver, a0) {
    return receiver.indexOf$1(a0);
  },
  indexOf$2: function(receiver, a0, a1) {
    return receiver.indexOf$2(a0, a1);
  },
  get$isEmpty: function(receiver) {
    return receiver.get$isEmpty();
  },
  get$isNaN: function(receiver) {
    return receiver.get$isNaN();
  },
  get$isNegative: function(receiver) {
    return receiver.get$isNegative();
  },
  get$iterator: function(receiver) {
    return receiver.get$iterator();
  },
  get$length: function(receiver) {
    return receiver.get$length();
  },
  set$length: function(receiver, value) {
    return receiver.set$length(value);
  },
  remove$1: function(receiver, a0) {
    return receiver.remove$1(a0);
  },
  removeLast$0: function(receiver) {
    return receiver.removeLast$0();
  },
  removeMatching$1: function(receiver, a0) {
    return receiver.removeMatching$1(a0);
  },
  removeRange$2: function(receiver, a0, a1) {
    return receiver.removeRange$2(a0, a1);
  },
  replaceAll$2: function(receiver, a0, a1) {
    return receiver.replaceAll$2(a0, a1);
  },
  setRange$3: function(receiver, a0, a1, a2) {
    return receiver.setRange$3(a0, a1, a2);
  },
  sort$1: function(receiver, a0) {
    return receiver.sort$1(a0);
  },
  substring$1: function(receiver, a0) {
    return receiver.substring$1(a0);
  },
  substring$2: function(receiver, a0, a1) {
    return receiver.substring$2(a0, a1);
  },
  toDouble$0: function(receiver) {
    return receiver.toDouble$0();
  },
  toList$0: function(receiver) {
    return receiver.toList$0();
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase$0();
  },
  toSet$0: function(receiver) {
    return receiver.toSet$0();
  },
  toString$0: function(receiver) {
    return receiver.toString$0();
  },
  truncate$0: function(receiver) {
    return receiver.truncate$0();
  },
  $index: function(receiver, a0) {
    return receiver.$index(a0);
  },
  $indexSet: function(receiver, a0, a1) {
    return receiver.$indexSet(a0, a1);
  },
  $xor: function(receiver, a0) {
    return receiver.$xor(a0);
  },
  $negate: function(receiver) {
    return receiver.$negate();
  },
  $or: function(receiver, a0) {
    return receiver.$or(a0);
  },
  $tdiv: function(receiver, a0) {
    return receiver.$tdiv(a0);
  }
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNull = {"": "Object;",
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  $eq: function(receiver, a) {
    return receiver == a;
  }
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    $.checkGrowable(receiver, "remove");
    for (i = 0; i < receiver.length; ++i)
      if ($.$$eq(receiver[i], element) === true) {
        receiver.splice(i, 1);
        return;
      }
  },
  removeAll$1: function(receiver, elements) {
    $.IterableMixinWorkaround_removeAllList(receiver, elements);
  },
  removeMatching$1: function(receiver, test) {
    $.IterableMixinWorkaround_removeMatchingList(receiver, test);
  },
  addLast$1: function(receiver, value) {
    $.checkGrowable(receiver, "addLast");
    receiver.push(value);
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  getRange$2: function(receiver, start, $length) {
    var t1, end;
    if (0 === $length)
      return [];
    $.checkNull(start);
    $.checkNull($length);
    t1 = $length < 0;
    if (t1)
      throw $.$$throw($.ArgumentError$($length));
    if (start < 0)
      throw $.$$throw($.RangeError$value(start));
    end = start + $length;
    if (end > receiver.length)
      throw $.$$throw($.RangeError$value($length));
    if (t1)
      throw $.$$throw($.ArgumentError$($length));
    return receiver.slice(start, end);
  },
  removeRange$2: function(receiver, start, $length) {
    var receiverLength, t1, t2;
    $.checkGrowable(receiver, "removeRange");
    if ($length === 0)
      return;
    $.checkNull(start);
    $.checkNull($length);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if ($length < 0)
      throw $.$$throw($.ArgumentError$($length));
    receiverLength = receiver.length;
    if (start < 0 || start >= receiverLength)
      throw $.$$throw($.RangeError$value(start));
    t1 = start + $length;
    if (t1 > receiverLength)
      throw $.$$throw($.RangeError$value(t1));
    t2 = receiverLength - $length;
    $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
    this.set$length(receiver, t2);
  },
  setRange$4: function(receiver, start, $length, from, startFrom) {
    var t1;
    $.checkMutable(receiver, "set range");
    if ($.$$eq($length, 0) === true)
      return;
    $.checkNull(start);
    $.checkNull($length);
    $.checkNull(from);
    $.checkNull(startFrom);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof $length === "number" && Math.floor($length) === $length))
      throw $.$$throw($.ArgumentError$($length));
    if (!(typeof startFrom === "number" && Math.floor(startFrom) === startFrom))
      throw $.$$throw($.ArgumentError$(startFrom));
    if ($length < 0)
      throw $.$$throw($.ArgumentError$($length));
    if (start < 0)
      throw $.$$throw($.RangeError$value(start));
    t1 = start + $length;
    if (t1 > receiver.length)
      throw $.$$throw($.RangeError$value(t1));
    $.Arrays_copy(from, startFrom, receiver, start, $length);
  },
  setRange$3: function($receiver, start, length, from) {
    return this.setRange$4($receiver, start, length, from, 0);
  },
  sort$1: function(receiver, compare) {
    $.checkMutable(receiver, "sort");
    $.IterableMixinWorkaround_sortList(receiver, compare);
  },
  indexOf$2: function(receiver, element, start) {
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  contains$1: function(receiver, other) {
    var t1, i;
    for (t1 = $.getInterceptor(other), i = 0; i < receiver.length; ++i)
      if (t1.$eq(other, receiver[i]) === true)
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.ToString_collectionToString(receiver);
  },
  toList$0: function(receiver) {
    return $.List_List$from(receiver);
  },
  toSet$0: function(receiver) {
    return $.HashSet_HashSet$from(receiver);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNumber = {"": "Object;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (!(typeof b === "number"))
      throw $.$$throw($.ArgumentError$(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if ($.$$eq(this.get$isNegative(receiver), bIsNegative) === true)
          return 0;
        if (this.get$isNegative(receiver) === true)
          return -1;
        return 1;
      }
      return 0;
    } else if (this.get$isNaN(receiver) === true) {
      if (this.get$isNaN(b) === true)
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  ceil$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floor$0: function(receiver) {
    return Math.floor(receiver);
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  truncate$0: function(receiver) {
    return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return (receiver << other) >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return (receiver >> other) >>> 0;
  },
  $and: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $or: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  $xor: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver ^ other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver >= other;
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSInt = {"": "JSNumber;",
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSDouble = {"": "JSNumber;",
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSString = {"": "Object;",
  charCodeAt$1: function(receiver, index) {
    return this.codeUnitAt$1(receiver, index);
  },
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    $.checkString(str);
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    t1 = $.getInterceptor$JSNumber(startIndex);
    if (t1.$lt(startIndex, 0) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$$gt(endIndex, receiver.length) === true)
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  indexOf$2: function(receiver, other, start) {
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  indexOf$1: function($receiver, other) {
    return this.indexOf$2($receiver, other, 0);
  },
  contains$2: function(receiver, other, startIndex) {
    $.checkNull(other);
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$contains: function(receiver) {
    return new $.Bound_contains_JSString(this, "contains$2", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$._HashMapImpl = {"": "Object;_keys>,_values>,_loadLimit,_numberOfEntries,_numberOfDeleted",
  _probeForAdding$1: function(key) {
    var t1, t3, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.hashCode(key);
    t3 = this._keys.length;
    if (t1 !== (t1 | 0))
      return this._probeForAdding$1$bailout(1, key, t1);
    hash = (t1 & t3 - 1) >>> 0;
    for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null) {
        if (insertionIndex < 0)
          return hash;
        return insertionIndex;
      } else if ($.$$eq(existingKey, key) === true)
        return hash;
      else if (insertionIndex < 0 && existingKey === $.CONSTANT3)
        insertionIndex = hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
      if (hash !== (hash | 0))
        return this._probeForAdding$1$bailout(2, key, 0, hash, numberOfProbes0, insertionIndex);
    }
  },
  _probeForAdding$1$bailout: function(state0, key, t1, hash, numberOfProbes0, insertionIndex) {
    switch (state0) {
      case 0:
        if (key == null)
          throw $.$$throw($.ArgumentError$(null));
        t1 = $.hashCode(key);
      case 1:
        state0 = 0;
        hash = $.$$and(t1, this._keys.length - 1);
        numberOfProbes = 1;
        insertionIndex = -1;
      case 2:
        var numberOfProbes, existingKey;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t1 = this._keys;
                if (hash !== (hash | 0))
                  throw $.iae(hash);
                if (hash < 0 || hash >= t1.length)
                  throw $.ioore(hash);
                existingKey = t1[hash];
                if (existingKey == null) {
                  if (insertionIndex < 0)
                    return hash;
                  return insertionIndex;
                } else if ($.$$eq(existingKey, key) === true)
                  return hash;
                else if (insertionIndex < 0 && existingKey === $.CONSTANT3)
                  insertionIndex = hash;
                numberOfProbes0 = numberOfProbes + 1;
                hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
              case 2:
                state0 = 0;
                numberOfProbes = numberOfProbes0;
            }
    }
  },
  _probeForLookup$1: function(key) {
    var hash, numberOfProbes, t1, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    hash = $.$$and($.hashCode(key), this._keys.length - 1);
    if (hash !== (hash | 0))
      return this._probeForLookup$1$bailout(1, key, hash);
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.$$eq(existingKey, key) === true)
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    }
  },
  _probeForLookup$1$bailout: function(state0, key, hash) {
    var numberOfProbes, t1, existingKey, numberOfProbes0;
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.$$eq(existingKey, key) === true)
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    }
  },
  _ensureCapacity$0: function() {
    var newNumberOfEntries, capacity, t1;
    newNumberOfEntries = $.$$add(this._numberOfEntries, 1);
    if ($.$$ge(newNumberOfEntries, this._loadLimit) === true) {
      this._grow$1(this._keys.length * 2);
      return;
    }
    capacity = this._keys.length;
    if (typeof newNumberOfEntries !== "number")
      throw $.iae(newNumberOfEntries);
    t1 = this._numberOfDeleted;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    if (t1 > capacity - newNumberOfEntries - t1)
      this._grow$1(this._keys.length);
  },
  _grow$1: function(newCapacity) {
    var capacity, oldKeys, oldValues, i, key, value, newIndex, t1;
    capacity = this._keys.length;
    this._loadLimit = $.$$tdiv($.$$mul(newCapacity, 3), 4);
    oldKeys = this._keys;
    oldValues = this._values;
    this._keys = $.List_List$fixedLength(newCapacity, null);
    this._values = $.List_List$fixedLength(newCapacity, null);
    for (i = 0; i < capacity; ++i) {
      if (i >= oldKeys.length)
        throw $.ioore(i);
      key = oldKeys[i];
      if (key == null || key === $.CONSTANT3)
        continue;
      if (i >= oldValues.length)
        throw $.ioore(i);
      value = oldValues[i];
      newIndex = this._probeForAdding$1(key);
      t1 = this._keys;
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = key;
      t1 = this._values;
      if (newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = value;
    }
    this._numberOfDeleted = 0;
  },
  clear$0: function() {
    var t1, $length, t2, t3, i;
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    t1 = this._keys;
    $length = t1.length;
    for (t2 = this._values, t3 = t2.length, i = 0; i < $length; ++i) {
      t1[i] = null;
      if (i >= t3)
        throw $.ioore(i);
      t2[i] = null;
    }
  },
  $indexSet: function(key, value) {
    var index, t1;
    this._ensureCapacity$0();
    index = this._probeForAdding$1(key);
    t1 = this._keys;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1 = t1[index];
    if (t1 == null || t1 === $.CONSTANT3) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.$$indexSet$bailout0(1, key, value, t1, index);
      this._numberOfEntries = t1 + 1;
    }
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = key;
    t1 = this._values;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  $$indexSet$bailout0: function(state0, key, value, t1, index) {
    switch (state0) {
      case 0:
        this._ensureCapacity$0();
        index = this._probeForAdding$1(key);
        t1 = this._keys;
        if (index !== (index | 0))
          throw $.iae(index);
        if (index < 0 || index >= t1.length)
          throw $.ioore(index);
        t1 = t1[index];
      case 1:
        if (state0 === 1 || state0 === 0 && (t1 == null || t1 === $.CONSTANT3))
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 1:
              state0 = 0;
              this._numberOfEntries = $.$$add(t1, 1);
          }
        t1 = this._keys;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = key;
        t1 = this._values;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = value;
    }
  },
  $index: function(key) {
    var index, t1;
    index = this._probeForLookup$1(key);
    if (typeof index !== "number")
      return this.$$index$bailout0(1, index);
    if (index < 0)
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout0: function(state0, index) {
    var t1;
    if ($.$$lt(index, 0) === true)
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  remove$1: function(key) {
    var index, t1, t3, value;
    index = this._probeForLookup$1(key);
    if (typeof index !== "number")
      return this.remove$1$bailout(1, index);
    if (index >= 0) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.remove$1$bailout(2, index, t1);
      this._numberOfEntries = t1 - 1;
      t3 = this._values;
      if (index !== (index | 0))
        throw $.iae(index);
      if (index < 0 || index >= t3.length)
        throw $.ioore(index);
      value = t3[index];
      t3[index] = null;
      t3 = this._keys;
      if (index >= t3.length)
        throw $.ioore(index);
      t3[index] = $.CONSTANT3;
      t3 = this._numberOfDeleted;
      if (typeof t3 !== "number")
        return this.remove$1$bailout(3, 0, 0, t3, value);
      this._numberOfDeleted = t3 + 1;
      return value;
    }
    return;
  },
  remove$1$bailout: function(state0, index, t1, t3, value) {
    switch (state0) {
      case 0:
        index = this._probeForLookup$1(key);
      case 1:
        state0 = 0;
      default:
        if (state0 === 3 || state0 === 2 || state0 === 0 && $.$$ge(index, 0) === true)
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 2:
              state0 = 0;
              this._numberOfEntries = $.$$sub(t1, 1);
              t3 = this._values;
              if (index !== (index | 0))
                throw $.iae(index);
              if (index < 0 || index >= t3.length)
                throw $.ioore(index);
              value = t3[index];
              t3[index] = null;
              t3 = this._keys;
              if (index >= t3.length)
                throw $.ioore(index);
              t3[index] = $.CONSTANT3;
              t3 = this._numberOfDeleted;
            case 3:
              state0 = 0;
              this._numberOfDeleted = $.$$add(t3, 1);
              return value;
          }
        return;
    }
  },
  get$isEmpty: function() {
    return $.$$eq(this._numberOfEntries, 0);
  },
  get$length: function() {
    return this._numberOfEntries;
  },
  forEach$1: function(f) {
    var it, t1, t2, t3;
    it = $._HashMapImplIndexIterator$(this);
    for (; it.moveNext$0() === true;) {
      t1 = this._keys;
      t2 = it.get$current();
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      t2 = t1[t2];
      t1 = this._values;
      t3 = it.get$current();
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      f.call$2(t2, t1[t3]);
    }
  },
  get$keys: function() {
    return $._HashMapImplKeyIterable$(this);
  },
  get$values: function() {
    return $._HashMapImplValueIterable$(this);
  },
  containsKey$1: function(key) {
    return $.$$eq(this._probeForLookup$1(key), -1) !== true;
  },
  toString$0: function() {
    return $.ToString_mapToString(this);
  },
  _HashMapImpl$0: function() {
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
    this._keys = $.List_List$fixedLength(8, null);
    this._values = $.List_List$fixedLength(8, null);
  },
  $isMap: function() {
    return true;
  }
};

$$._HashMapImplKeyIterable = {"": "Iterable;_map",
  get$iterator: function() {
    return $._HashMapImplKeyIterator$(this._map);
  }
};

$$._HashMapImplValueIterable = {"": "Iterable;_map",
  get$iterator: function() {
    return $._HashMapImplValueIterator$(this._map);
  }
};

$$._HashMapImplIterator = {"": "Object;",
  moveNext$0: function() {
    var t1, $length, t3, newIndex, t2, key;
    t1 = this._map;
    $length = $.length(t1.get$_keys());
    if (typeof $length !== "number")
      return this.moveNext$0$bailout(1, $length, t1);
    t3 = this._index;
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout(2, $length, t1, t3);
    newIndex = t3 + 1;
    for (t2 = t1.get$_keys(); newIndex < $length;) {
      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout(3, $length, t1, t2, newIndex, $.CONSTANT4);
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t2.length)
        throw $.ioore(newIndex);
      key = t2[newIndex];
      if (!(key == null) && !(key === $.CONSTANT3)) {
        this._current = this._computeCurrentFromIndex$3(newIndex, t2, t1.get$_values());
        this._index = newIndex;
        return true;
      }
      ++newIndex;
    }
    this._index = $length;
    this._current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, $length, t1, t3, newIndex, t2) {
    switch (state0) {
      case 0:
        t1 = this._map;
        $length = $.length(t1.get$_keys());
      case 1:
        state0 = 0;
        t3 = this._index;
      case 2:
        state0 = 0;
        newIndex = $.$$add(t3, 1);
      case 3:
        var key;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = $.getInterceptor$JSNumber(newIndex);
                if (!(t2.$lt(newIndex, $length) === true))
                  break L0;
                t3 = t1.get$_keys();
              case 3:
                state0 = 0;
                key = $.$$index(t3, newIndex);
                if (!(key == null) && !(key === $.CONSTANT3)) {
                  this._current = this._computeCurrentFromIndex$3(newIndex, t1.get$_keys(), t1.get$_values());
                  this._index = newIndex;
                  return true;
                }
                newIndex = t2.$add(newIndex, 1);
            }
        this._index = $length;
        this._current = null;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$._HashMapImplKeyIterator = {"": "_HashMapImplIterator;_map,_index,_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return $.$$index(keys, index);
  }
};

$$._HashMapImplValueIterator = {"": "_HashMapImplIterator;_map,_index,_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return $.$$index(values, index);
  }
};

$$._HashMapImplIndexIterator = {"": "_HashMapImplIterator;_map,_index,_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return index;
  }
};

$$._DeletedKeySentinel = {"": "Object;"};

$$._KeyValuePair = {"": "Object;key>,value="};

$$._LinkedHashMapImpl = {"": "Object;_list,_map",
  $indexSet: function(key, value) {
    var t1, t3;
    if (this._map.containsKey$1(key) === true) {
      t1 = this._map;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
        return this.$$indexSet$bailout(1, key, value, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key].get$element().set$value(value);
    } else {
      this._list.addLast$1($._KeyValuePair$(key, value));
      t1 = this._map;
      t3 = this._list.lastEntry$0();
      if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
        return this.$$indexSet$bailout(2, key, 0, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key] = t3;
    }
  },
  $$indexSet$bailout: function(state0, key, value, t1) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 1 || state0 === 0 && this._map.containsKey$1(key) === true)
          switch (state0) {
            case 0:
              t1 = this._map;
            case 1:
              state0 = 0;
              $.$$index(t1, key).get$element().set$value(value);
          }
        else
          switch (state0) {
            case 0:
              this._list.addLast$1($._KeyValuePair$(key, value));
              t1 = this._map;
            case 2:
              state0 = 0;
              $.$$indexSet(t1, key, this._list.lastEntry$0());
          }
    }
  },
  $index: function(key) {
    var t1, entry;
    t1 = this._map;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, key, t1);
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    entry = t1[key];
    if (entry == null)
      return;
    return entry.get$element().get$value();
  },
  $$index$bailout: function(state0, key, t1) {
    var entry = $.$$index(t1, key);
    if (entry == null)
      return;
    return entry.get$element().get$value();
  },
  remove$1: function(key) {
    var entry = $.remove(this._map, key);
    if (entry == null)
      return;
    entry.remove$0();
    return entry.get$element().get$value();
  },
  get$keys: function() {
    return $.MappedIterable$(this._list, new $._LinkedHashMapImpl_keys_anon());
  },
  get$values: function() {
    return $.MappedIterable$(this._list, new $._LinkedHashMapImpl_values_anon());
  },
  forEach$1: function(f) {
    this._list.forEach$1(new $._LinkedHashMapImpl_forEach_anon(f));
  },
  containsKey$1: function(key) {
    return this._map.containsKey$1(key);
  },
  get$length: function() {
    return $.length(this._map);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  clear$0: function() {
    $.clear(this._map);
    this._list.clear$0();
  },
  toString$0: function() {
    return $.ToString_mapToString(this);
  },
  _LinkedHashMapImpl$0: function() {
    this._map = $.HashMap_HashMap();
    this._list = $.DoubleLinkedQueue$();
  },
  $isMap: function() {
    return true;
  }
};

$$.DoubleLinkedQueueEntry = {"": "Object;_previous=,_next=,_element",
  _link$2: function(p, n) {
    this._next = n;
    this._previous = p;
    p.set$_next(this);
    n.set$_previous(this);
  },
  append$1: function(e) {
    $.DoubleLinkedQueueEntry$(e)._link$2(this, this._next);
  },
  prepend$1: function(e) {
    $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
  },
  remove$0: function() {
    var t1 = this._next;
    this._previous.set$_next(t1);
    t1 = this._previous;
    this._next.set$_previous(t1);
    this._next = null;
    this._previous = null;
    return this._element;
  },
  _asNonSentinelEntry$0: function() {
    return this;
  },
  previousEntry$0: function() {
    return this._previous._asNonSentinelEntry$0();
  },
  nextEntry$0: function() {
    return this._next._asNonSentinelEntry$0();
  },
  get$element: function() {
    return this._element;
  },
  DoubleLinkedQueueEntry$1: function(e) {
    this._element = e;
  }
};

$$._DoubleLinkedQueueEntrySentinel = {"": "DoubleLinkedQueueEntry;_previous,_next,_element",
  remove$0: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _asNonSentinelEntry$0: function() {
    return;
  },
  get$element: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _DoubleLinkedQueueEntrySentinel$0: function() {
    this._link$2(this, this);
  }
};

$$.DoubleLinkedQueue = {"": "Collection;_sentinel",
  addLast$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  addFirst$1: function(value) {
    this._sentinel.append$1(value);
  },
  add$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  removeLast$0: function() {
    return this._sentinel._previous.remove$0();
  },
  removeFirst$0: function() {
    return this._sentinel._next.remove$0();
  },
  remove$1: function(o) {
    var entry = this._sentinel.nextEntry$0();
    for (; !(entry === this._sentinel);) {
      if ($.$$eq(entry.get$element(), o) === true) {
        entry.remove$0();
        return;
      }
      entry = entry.get$_next();
    }
  },
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAllList(this, elements);
  },
  removeMatching$1: function(test) {
    var entry, next;
    entry = this._sentinel.nextEntry$0();
    for (; !(entry === this._sentinel); entry = next) {
      next = entry.get$_next();
      if (test.call$1(entry.get$element()) === true)
        entry.remove$0();
    }
  },
  lastEntry$0: function() {
    return this._sentinel.previousEntry$0();
  },
  get$isEmpty: function() {
    var t1 = this._sentinel;
    return t1._next === t1;
  },
  clear$0: function() {
    var t1 = this._sentinel;
    t1._next = t1;
    t1 = this._sentinel;
    t1._previous = t1;
  },
  get$iterator: function() {
    return $._DoubleLinkedQueueIterator$(this._sentinel);
  },
  toString$0: function() {
    return $.ToString_collectionToString(this);
  },
  DoubleLinkedQueue$0: function() {
    this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
  },
  $isCollection: function() {
    return true;
  }
};

$$._DoubleLinkedQueueIterator = {"": "Object;_sentinel,_currentEntry,_current",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._currentEntry;
    if (t1 == null)
      return false;
    this._currentEntry = t1.get$_next();
    t1 = this._currentEntry;
    t2 = this._sentinel;
    if (t1 == null ? t2 == null : t1 === t2) {
      this._currentEntry = null;
      this._current = null;
      this._sentinel = null;
      return false;
    }
    this._current = t1.get$element();
    return true;
  },
  get$current: function() {
    return this._current;
  }
};

$$.HashSet = {"": "Collection;_backingMap",
  clear$0: function() {
    this._backingMap.clear$0();
  },
  add$1: function(value) {
    this._backingMap.$indexSet(value, value);
  },
  remove$1: function(value) {
    var t1 = this._backingMap;
    if (t1.containsKey$1(value) !== true)
      return false;
    t1.remove$1(value);
    return true;
  },
  contains$1: function(value) {
    return this._backingMap.containsKey$1(value);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    this._backingMap.forEach$1(new $.HashSet_forEach_anon(f));
  },
  get$isEmpty: function() {
    return $.isEmpty(this._backingMap);
  },
  get$length: function() {
    return $.length(this._backingMap);
  },
  get$iterator: function() {
    return $._HashSetIterator$(this);
  },
  toString$0: function() {
    return $.ToString_collectionToString(this);
  },
  $isSet: true,
  $isCollection: function() {
    return true;
  }
};

$$._HashSetIterator = {"": "Object;_keysIterator",
  get$current: function() {
    var result = this._keysIterator.get$current();
    if (result === $.CONSTANT3)
      throw $.$$throw($.StateError$("Concurrent modification."));
    return result;
  },
  moveNext$0: function() {
    var t1, result, t2;
    t1 = this._keysIterator;
    do {
      result = t1.moveNext$0();
      if (result === true)
        t2 = t1.get$current() == null || t1.get$current() === $.CONSTANT3;
      else
        t2 = false;
    } while (t2);
    return result;
  }
};

$$.MappedIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function() {
    return $.MappedIterator$($.iterator(this._iterable), this._f);
  },
  get$length: function() {
    return $.length(this._iterable);
  },
  get$isEmpty: function() {
    return $.isEmpty(this._iterable);
  }
};

$$.MappedIterator = {"": "Iterator;_liblib$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib$_current = this._f$1(t1.get$current());
      return true;
    } else {
      this._liblib$_current = null;
      return false;
    }
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$.ListIterator = {"": "Object;_liblib$_list,_length,_position,_liblib$_current",
  moveNext$0: function() {
    var t1, t2, t3, nextPosition;
    t1 = this._liblib$_list;
    t2 = t1.length;
    t3 = this._length;
    if (t2 !== t3)
      throw $.$$throw($.ConcurrentModificationError$(t1));
    t2 = this._position;
    if (t2 !== (t2 | 0))
      return this.moveNext$0$bailout0(1, t2, t1, t3);
    nextPosition = t2 + 1;
    if (nextPosition < t3) {
      this._position = nextPosition;
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib$_current = t1[nextPosition];
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  moveNext$0$bailout0: function(state0, t2, t1, t3) {
    var nextPosition = $.$$add(t2, 1);
    if ($.$$lt(nextPosition, t3) === true) {
      this._position = nextPosition;
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib$_current = t1[nextPosition];
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$._Manager = {"": "Object;nextIsolateId=,currentManagerId,nextManagerId,currentContext>,rootContext,topEventLoop>,fromCommandLine,isWorker>,supportsWorkers,isolates,mainManager,managers",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = !($.get$globalWorker() == null) && !($.get$IsolateNatives_thisScript() == null);
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true && $.isEmpty(this.isolates) === true && $.$$eq(this.topEventLoop.get$activeTimerCount(), 0) === true)
      this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "close"])));
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map();
    this.managers = $.Map_Map();
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id>,ports>,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    this._setGlobals$0();
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (!(old == null))
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    return $.$$index(this.ports, portId);
  },
  register$2: function(portId, port) {
    if (this.ports.containsKey$1(portId) === true)
      throw $.$$throw($._ExceptionImplementation$("Registry: ports must be registered only once."));
    $.$$indexSet(this.ports, portId, port);
    $.$$indexSet($globalState.isolates, this.id, this);
  },
  unregister$1: function(portId) {
    $.remove(this.ports, portId);
    if ($.isEmpty(this.ports) === true)
      $.remove($globalState.isolates, this.id);
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId($.$$add(t2, 1));
    this.id = t2;
    this.ports = $.Map_Map();
    this.isolateStatics = new Isolate;
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount=",
  enqueue$3: function(isolate, fn, msg) {
    $.addLast(this.events, $._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if ($.isEmpty(t1) === true)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if (!($globalState.rootContext == null) && $globalState.isolates.containsKey$1($globalState.rootContext.get$id()) === true && $globalState.fromCommandLine === true && $.isEmpty($globalState.rootContext.get$ports()) === true)
      throw $.$$throw($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if (!($.get$globalWindow() == null))
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0() === true;)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;",
  get$id: function() {
    return 0;
  },
  postMessage$1: function(msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function() {
  }
};

$$._BaseSendPort = {"": "Object;_isolateId>",
  _checkReplyTo$1: function(replyTo) {
    if (!(replyTo == null) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_WorkerSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_BufferingSendPort))
      throw $.$$throw($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._CompleterImpl$();
    port = $.ReceivePortImpl$();
    this.send$2(message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.future;
  },
  $isSendPort: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort>,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  $eq: function(other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!other.$is_NativeJsSendPort && $.$$eq(this._receivePort, other._receivePort) === true;
  },
  get$hashCode: function() {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId>,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  $eq: function(other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$is_WorkerSendPort)
      t1 = $.$$eq(this._workerId, other._workerId) === true && $.$$eq(this._isolateId, other._isolateId) === true && $.$$eq(this._receivePortId, other._receivePortId) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function() {
    return $.$$xor($.$$xor($.$$shl(this._workerId, 16), $.$$shl(this._isolateId, 8)), this._receivePortId);
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$.ReceivePortImpl = {"": "Object;_id>,_callback>",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._callback = onMessage;
  },
  close$0: function() {
    this._callback = null;
    $globalState.currentContext.unregister$1(this._id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $globalState.currentContext.get$id());
  },
  ReceivePortImpl$0: function() {
    $._globalState().get$currentContext().register$2(this._id, this);
  }
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports>,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    if (!($.$$index(this._visited, list) == null))
      return;
    $.$$indexSet(this._visited, list, true);
    $.forEach(list, new $._PendingSendPortFinder_visitList_anon(this));
  },
  visitMap$1: function(map) {
    if (!($.$$index(this._visited, map) == null))
      return;
    $.$$indexSet(this._visited, map, true);
    $.forEach(map.get$values(), new $._PendingSendPortFinder_visitMap_anon(this));
  },
  visitSendPort$1: function(port) {
    if (!!port.$is_BufferingSendPort && port._port == null)
      this.ports.push(port.get$_futurePort());
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $globalState.currentManagerId, port._isolateId, port._receivePort.get$_id()];
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._port;
    if (!(t1 == null))
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._receivePort, port._isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._port;
    if (!(t1 == null))
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(x) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$JSStringJSArray(x);
    managerId = t1.$index(x, 1);
    isolateId = t1.$index(x, 2);
    receivePortId = t1.$index(x, 3);
    if ($.$$eq(managerId, $globalState.currentManagerId) === true) {
      isolate = $.$$index($globalState.isolates, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(object) {
    return object['__MessageTraverser__attached_info__'];
  },
  $indexSet: function(object, info) {
    $.add(this.tagged, object);
    object['__MessageTraverser__attached_info__'] = info;
  },
  reset$0: function() {
    this.tagged = $.List_List(0);
  },
  cleanup$0: function() {
    var $length, i;
    $length = $.length(this.tagged);
    if (typeof $length !== "number")
      return this.cleanup$0$bailout(1, $length);
    i = 0;
    for (; i < $length; ++i)
      $.$$index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
    this.tagged = null;
  },
  cleanup$0$bailout: function(state0, $length) {
    var i = 0;
    for (; $.CONSTANT2.$lt(i, $length); ++i)
      $.$$index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(object) {
    return;
  },
  $indexSet: function(object, info) {
  },
  reset$0: function() {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    this._visited.reset$0();
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.$isList()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && x.$isMap())
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var copy, len, i, t1;
    if (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior())
      return this.visitList$1$bailout(1, list);
    copy = $.$$index(this._visited, list);
    if (!(copy == null))
      return copy;
    len = list.length;
    copy = $.List_List(len);
    $.$$indexSet(this._visited, list, copy);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._dispatch$1(list[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  },
  visitList$1$bailout: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        copy = $.$$index(this._visited, list);
        if (!(copy == null))
          return copy;
        t1 = $.getInterceptor$JSStringJSArray(list);
        len = t1.get$length(list);
      case 2:
        var copy, i, t2;
        state0 = 0;
        copy = $.List_List(len);
        $.$$indexSet(this._visited, list, copy);
        for (i = 0; $.CONSTANT2.$lt(i, len); ++i) {
          t2 = this._dispatch$1(t1.$index(list, i));
          if (i >= copy.length)
            throw $.ioore(i);
          copy[i] = t2;
        }
        return copy;
    }
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t1.copy_0 = $.$$index(this._visited, map);
    t2 = t1.copy_0;
    if (!(t2 == null))
      return t2;
    t1.copy_0 = $._HashMapImpl$();
    $.$$indexSet(this._visited, map, t1.copy_0);
    map.forEach$1(new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var copyId, id;
    copyId = $.$$index(this._visited, list);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    $.$$indexSet(this._visited, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var copyId, id;
    copyId = $.$$index(this._visited, map);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    $.$$indexSet(this._visited, map, id);
    return ["map", id, this._serializeList$1($.toList(map.get$keys())), this._serializeList$1($.toList(map.get$values()))];
  },
  _serializeList$1: function(list) {
    var len, result, i, t1;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior()))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._dispatch$1(list[i]);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(list);
        len = t1.get$length(list);
      case 2:
        var result, i, t2;
        state0 = 0;
        result = $.List_List(len);
        for (i = 0; $.CONSTANT2.$lt(i, len); ++i) {
          t2 = this._dispatch$1(t1.$index(list, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $._HashMapImpl$();
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch ($.$$index(x, 0)) {
      case "ref":
        return this._deserializeRef$1(x);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeRef$1: function(x) {
    var id = $.$$index(x, 1);
    return $.$$index(this._deserialized, id);
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$JSStringJSArray(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.$isJavaScriptIndexingBehavior())
      return this._deserializeList$1$bailout(1, dartList, id);
    $.$$indexSet(this._deserialized, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id, t2, len) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(x);
        id = t1.$index(x, 1);
        dartList = t1.$index(x, 2);
      case 1:
        state0 = 0;
        $.$$indexSet(this._deserialized, id, dartList);
        t2 = $.getInterceptor$JSStringJSArray(dartList);
        len = t2.get$length(dartList);
      case 2:
        var t1, i;
        state0 = 0;
        for (i = 0; $.CONSTANT2.$lt(i, len); ++i)
          t2.$indexSet(dartList, i, this._deserializeHelper$1(t2.$index(dartList, i)));
        return dartList;
    }
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, keys, values, len, i, key;
    result = $._HashMapImpl$();
    t1 = $.getInterceptor$JSStringJSArray(x);
    id = t1.$index(x, 1);
    $.$$indexSet(this._deserialized, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !keys.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !values.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(2, 0, result, keys, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, x, result, keys, t1, values, t3, len) {
    switch (state0) {
      case 0:
        result = $._HashMapImpl$();
        t1 = $.getInterceptor$JSStringJSArray(x);
        id = t1.$index(x, 1);
        $.$$indexSet(this._deserialized, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(keys);
        len = t3.get$length(keys);
      case 3:
        var id, i;
        state0 = 0;
        for (t1 = $.getInterceptor$JSStringJSArray(values), i = 0; $.CONSTANT2.$lt(i, len); ++i)
          result.$indexSet(this._deserializeHelper$1(t3.$index(keys, i)), this._deserializeHelper$1(t1.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle<",
  cancel$0: function() {
    if (!($.get$globalThis().setTimeout == null)) {
      if (this._inEventLoop === true)
        throw $.$$throw($.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $globalState.topEventLoop;
      t1.set$activeTimerCount($.$$sub(t1.get$activeTimerCount(), 1));
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw $.$$throw($.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if ($.$$eq(milliseconds, 0) === true)
      t1 = $.hasTimer() !== true || $._globalState().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), new $.anon(this, callback), "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer() === true) {
      t1 = $._globalState().get$topEventLoop();
      t1.set$activeTimerCount($.$$add(t1.get$activeTimerCount(), 1));
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.AsyncError = {"": "Object;error>,stackTrace>,cause>",
  _writeOn$1: function(buffer) {
    var message, exception, t1;
    buffer.add$1("'");
    message = null;
    try {
      message = $.toString(this.error);
    } catch (exception) {
      $.unwrapException(exception);
      message = $.Error_safeToString(this.error);
    }

    buffer.add$1(message);
    buffer.add$1("'\n");
    t1 = this.stackTrace;
    if (!(t1 == null)) {
      buffer.add$1("Stack trace:\n");
      buffer.add$1($.toString(t1));
      buffer.add$1("\n");
    }
  },
  toString$0: function() {
    var buffer, cause;
    buffer = $.JsStringBuffer$("");
    buffer.add$1("AsyncError: ");
    this._writeOn$1(buffer);
    cause = this.cause;
    for (; !(cause == null);) {
      buffer.add$1("Caused by: ");
      cause._writeOn$1(buffer);
      cause = cause.get$cause();
    }
    return buffer.toString$0();
  },
  $isAsyncError: true
};

$$._CompleterImpl = {"": "Object;future,_isComplete>",
  complete$1: function(value) {
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._setValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    var asyncError;
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    asyncError = typeof error === "object" && error !== null && !!error.$isAsyncError ? error : $.AsyncError$(error, stackTrace);
    this.future._setError$1(asyncError);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object;future,_nextListener=",
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state,_resultOrListeners>",
  get$_isComplete: function() {
    return $.$$eq(this._state, 0) !== true;
  },
  get$_hasValue: function() {
    return $.$$eq(this._state, 1);
  },
  get$_hasError: function() {
    return $.$$eq($.$$and(this._state, 2), 0) !== true;
  },
  get$_hasUnhandledError: function() {
    return $.$$eq($.$$and(this._state, 4), 0) !== true;
  },
  _clearUnhandledError$0: function() {
    this._state = $.$$and(this._state, 4294967291);
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (this.get$_isComplete() !== true) {
      if (onError == null) {
        t1 = $._ThenFuture$(f);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError() === true) {
      if (!(onError == null))
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue() === true)
      return $._FutureWrapper$(this);
    if (this.get$_isComplete() !== true) {
      t1 = $._CatchErrorFuture$(f, test);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue);
    $.TimerImpl$(0, new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._clearUnhandledError$0();
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test);
    $.TimerImpl$(0, new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; !(listeners == null); listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (!(listeners0 == null)) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = $.$$or(this._state, 4);
    $.TimerImpl$(0, new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener.set$_nextListener(this._resultOrListeners);
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; !(current == null); prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (this.get$_isComplete() !== true)
      this._addListener$1(future._asListener$0());
    else if (this.get$_hasValue() === true)
      future._setValue$1(this._resultOrListeners);
    else {
      this._clearUnhandledError$0();
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!result.$isFuture)
      if (!!result.$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else
      this._setValue$1(result);
  },
  _asListener$0: function() {
    return $._FutureListenerWrapper$(this);
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener=",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, e1, s0, exception, t1;
    if (!(this._test == null)) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error.get$error());
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e, s, error));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e0 = t1;
        this._setError$1(e0);
        return;
      } else {
        e1 = t1;
        s0 = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e1, s0, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  }
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e0, s, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  }
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function($function, onError) {
    return this._future.then$2$onError($function, onError);
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    return this._future.catchError$2$test($function, test);
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  $isFuture: true
};

$$.Stream = {"": "Object;",
  contains$1: function(match) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t2 = new $.Stream_contains_anon(t1, match, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_contains_anon0(future), t3, true);
    return future;
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  get$length: function() {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.count_0 = 0;
    t2 = new $.Stream_length_anon(t1);
    t3 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_length_anon0(t1, future), t3, true);
    return future;
  },
  get$isEmpty: function() {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t2 = new $.Stream_isEmpty_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_isEmpty_anon0(future), t3, true);
    return future;
  },
  toList$0: function() {
    var result, future, t1, t2;
    result = [];
    future = $._FutureImpl$();
    t1 = new $.Stream_toList_anon(result);
    t2 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t1, new $.Stream_toList_anon0(result, future), t2, true);
    return future;
  },
  toSet$0: function() {
    var result, future, t1, t2;
    result = $.HashSet$();
    future = $._FutureImpl$();
    t1 = new $.Stream_toSet_anon(result);
    t2 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t1, new $.Stream_toSet_anon0(result, future), t2, true);
    return future;
  }
};

$$.StreamSubscription = {"": "Object;"};

$$.Game = {"": "Object;grounds,dynamicObjects,critters,canvasFpsCounter<,canvasWorldStepTime<,debugDraw<,world,canvas,shadowCanvas,mainButtonElm>,wrapperElm,progressElm>,doneElm,ctx,stopwatch,randomGenerator,groundLevel,elapsedUs>,frameCount=,lightEngine,eventHandler>,sun,endSolver>,groundHeight,level>,running>,quotes",
  init$0: function() {
    var extents, viewport, t1;
    this.stopwatch = $._StopwatchImpl$();
    this.eventHandler = $.GameEventHandlers$(this);
    this.canvas = document.query$1("#main_canvas");
    this.shadowCanvas = document.query$1("#shadow_canvas");
    this.mainButtonElm = document.query$1("#start_critters");
    this.wrapperElm = document.query$1("#wrapper");
    this.progressElm = document.query$1("#level_progess");
    this.doneElm = document.query$1("#done");
    this.ctx = this.canvas.getContext$1("2d");
    this.resizeCanvas$0();
    this.loadLevel$1(0);
    this._initListeners$0();
    extents = $.Vector$($.$$div(this.canvas.get$width(), 2), $.$$div(this.canvas.get$height(), 2));
    viewport = $.CanvasViewportTransform$(extents, extents);
    viewport.scale = 10;
    this.debugDraw = $.CanvasDraw$(viewport, this.ctx);
    t1 = this.debugDraw;
    this.world.set$debugDraw(t1);
    this.frameCount = 0;
    window.setInterval$2(new $.Game_init_anon(this), 1000);
    window.setInterval$2(new $.Game_init_anon0(this), 200);
  },
  loadLevel$1: function(level) {
    var t1, t2, t3, levels, aspect, t4, endVectorPoints;
    t1 = $ === level;
    if (t1)
      level = null;
    if (t1)
      level = 0;
    this.resetUI$0();
    this.world = $.World$($.Vector$(0, -50), true, $.DefaultWorldPool$());
    this.running = false;
    this.doneElm.get$style().set$display("none");
    this.progressElm.set$hidden(true);
    this.grounds = $.List_List(0);
    this.dynamicObjects = $.List_List(0);
    this.critters = $.List_List(0);
    this.groundLevel = $.$$div($.$$negate($.Game_canvasCenter.get$y()), 10);
    t1 = document.query$1("#shadow_canvas");
    t2 = this.groundLevel;
    t3 = this.groundHeight;
    this.lightEngine = $.LightEngine$(t1, $.$$add(t2, t3));
    levels = $.Levels__getLevels();
    if (level !== (level | 0))
      throw $.iae(level);
    if (level < 0 || level >= levels.length)
      throw $.ioore(level);
    this.level = levels[level];
    this.sun = $.Vector$($.$$index(this.level, "sun_x"), $.$$div($.Game_canvasCenter.get$y(), 10));
    $.add(this.lightEngine, this.sun);
    this._createBoxes$1($.$$index(this.level, "boxes"));
    this._createGround$2(t3, $.$$index(this.level, "grounds"));
    t3 = "url(./images/" + $.S($.$$index(this.level, "background")) + ")";
    this.wrapperElm.get$style().set$backgroundImage(t3);
    aspect = $.$$div(this.canvas.get$height(), 1000);
    t3 = $.getInterceptor$JSNumber(aspect);
    t4 = $.S(t3.$mul(aspect, 1500)) + "px " + $.S(t3.$mul(aspect, 1000)) + "px";
    this.wrapperElm.get$style().set$backgroundSize(t4);
    endVectorPoints = $.List_List(0);
    for (t1 = $.iterator($.$$index(this.level, "end")); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      t3 = $.getInterceptor$JSStringJSArray(t2);
      endVectorPoints.push($.Vector$(t3.$index(t2, 0), t3.$index(t2, 1)));
    }
    this.endSolver = $.EndSolver$(endVectorPoints, $.Vector$($.$$index($.$$index($.$$index(this.level, "critters"), "spawn_point"), 0), $.$$index($.$$index($.$$index(this.level, "critters"), "spawn_point"), 1)), this.critters, this);
    $.$$index($.$$index(this.level, "critters"), "seed");
    this.randomGenerator = $.CONSTANT5;
  },
  _initListeners$0: function() {
    this.shadowCanvas.get$onMouseDown().listen$1(new $.Game__initListeners_anon(this));
    this.shadowCanvas.get$onMouseUp().listen$1(new $.Game__initListeners_anon0(this));
    this.shadowCanvas.get$onMouseMove().listen$1(new $.Game__initListeners_anon1(this));
    window.get$onKeyDown().listen$1(new $.Game__initListeners_anon2(this));
    window.get$onKeyUp().listen$1(new $.Game__initListeners_anon3(this));
    window.get$onResize().listen$1(new $.Game__initListeners_anon4(this));
    this.mainButtonElm.get$onClick().listen$1(new $.Game__initListeners_anon5(this));
    document.query$1("#play_again").get$onClick().listen$1(new $.Game__initListeners_anon6(this));
    for (var t1 = $.iterator(document.queryAll$1(".level")); t1.moveNext$0() === true;)
      t1.get$current().get$onClick().listen$1(new $.Game__initListeners_anon7(this));
  },
  resetUI$0: function() {
    this.mainButtonElm.set$text("start");
    this.progressElm.get$style().set$display("none");
  },
  _createGround$2: function(height, moreGrounds) {
    var t1, ground, t2, t3;
    t1 = $.getInterceptor$JSNumber(height);
    ground = $.StaticBox$($.Vector$(200, t1.$div(height, 2)), $.Vector$(0, $.$$add(this.groundLevel, t1.$div(height, 2))), $);
    ground.addObjectToWorld$1(this.world);
    $.add(this.grounds, ground);
    ground = $.StaticBox$($.Vector$(200, 1), $.Vector$(0, $.$$div($.Game_canvasCenter.get$y(), 10)), $);
    ground.addObjectToWorld$1(this.world);
    $.add(this.grounds, ground);
    ground = $.StaticBox$($.Vector$(1, $.$$div($.$$mul($.Game_canvasCenter.get$y(), 2), 10)), $.Vector$($.$$div($.Game_canvasCenter.get$x(), 10), 0), $);
    ground.addObjectToWorld$1(this.world);
    $.add(this.grounds, ground);
    ground = $.StaticBox$($.Vector$(1, $.$$div($.$$mul($.Game_canvasCenter.get$y(), 2), 10)), $.Vector$($.$$div($.$$negate($.Game_canvasCenter.get$x()), 10), 0), $);
    ground.addObjectToWorld$1(this.world);
    $.add(this.grounds, ground);
    for (t1 = $.iterator(moreGrounds); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      t3 = $.getInterceptor$JSStringJSArray(t2);
      ground = $.StaticBox$($.Vector$(t3.$index(t2, 2), t3.$index(t2, 3)), $.Vector$(t3.$index(t2, 0), t3.$index(t2, 1)), t3.$index(t2, 4));
      ground.addObjectToWorld$1(this.world);
      $.add(this.grounds, ground);
      $.add(this.dynamicObjects, ground);
    }
  },
  _createBoxes$1: function(boxes) {
    var t1, t2, t3, box;
    for (t1 = $.iterator(boxes); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      t3 = $.getInterceptor$JSStringJSArray(t2);
      box = $.DynamicBox$($.Vector$(t3.$index(t2, 2), t3.$index(t2, 3)), $.Vector$(t3.$index(t2, 0), t3.$index(t2, 1)), t3.$index(t2, 5), t3.$index(t2, 6), t3.$index(t2, 4), 1);
      box.addObjectToWorld$1(this.world);
      box.setTexture$1("./images/" + $.S(t3.$index(t2, 7)));
      $.add(this.dynamicObjects, box);
    }
  },
  resizeCanvas$0: function() {
    this.canvas.set$width(1000);
    this.canvas.set$height(706);
    this.shadowCanvas.set$width(1000);
    this.shadowCanvas.set$height(706);
    this.wrapperElm.get$style().set$width("1000px");
    this.wrapperElm.get$style().set$height("706px");
    $.Game_canvasCenter = $.Vector$(500, 353);
  },
  startCritters$0: function() {
    var crittersSettings, t1, spawnPoint, i, randomPosition, critter;
    this.running = true;
    crittersSettings = $.$$index(this.level, "critters");
    t1 = $.getInterceptor$JSStringJSArray(crittersSettings);
    spawnPoint = $.Vector$($.$$index(t1.$index(crittersSettings, "spawn_point"), 0), $.$$index(t1.$index(crittersSettings, "spawn_point"), 1));
    for (i = 0; $.CONSTANT2.$lt(i, t1.$index(crittersSettings, "count")); ++i) {
      randomPosition = $.Vector$copy(spawnPoint);
      randomPosition.x = $.$$add(randomPosition.x, $.$$mul(this.randomGenerator.nextDouble$0(), 6));
      randomPosition.y = $.$$add(randomPosition.y, $.$$mul(this.randomGenerator.nextDouble$0(), 6));
      critter = $.Critter$(2, randomPosition);
      critter.addObjectToWorld$1(this.world);
      $.add(this.dynamicObjects, critter);
      $.add(this.critters, critter);
    }
  },
  stopCritters$0: function() {
    var t1, t2;
    this.running = false;
    for (t1 = $.iterator(this.critters); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      this.world.destroyBody$1(t2.get$body());
      $.remove(this.dynamicObjects, t2);
    }
    $.clear(this.critters);
  },
  _step$1: function(timestamp) {
    var obj, diffVector, t1;
    this.stopwatch.reset$0();
    this.world.step$3(0.016666666666666666, 10, 5);
    this.elapsedUs = this.stopwatch.get$elapsedMicroseconds();
    if (this.eventHandler.get$dragHandler().isActive$0() === true) {
      this.eventHandler.get$dragHandler().objectDistanceToDestination$0();
      obj = this.eventHandler.get$dragHandler().getActiveObject$0();
      diffVector = $.Vector$copy(this.eventHandler.get$dragHandler().getCorrectedDestination$0());
      diffVector.subLocal$1(obj.get$body().get$position());
      t1 = $.Vector$($.$$mul(diffVector.x, 5), $.$$mul(diffVector.y, 5));
      obj.get$body().set$linearVelocity(t1);
      t1 = this.eventHandler.get$dragHandler();
      if (t1.get$rotateLeft() === true)
        obj.get$body().set$angularVelocity(1.5);
      else if (t1.get$rotateRight() === true)
        obj.get$body().set$angularVelocity(-1.5);
      else {
        t1 = $.$$div(obj.get$body().get$angularVelocity(), 1.05);
        obj.get$body().set$angularVelocity(t1);
      }
    }
    window.requestAnimationFrame$1(new $.Game__step_anon(this));
  },
  _draw$0: function() {
    var t1, sunPos, t2, t3, removeMe, itemToRemove, removeMe0;
    t1 = this.canvas.get$width();
    this.canvas.set$width(t1);
    t1 = this.sun;
    sunPos = $.Vector$(t1.get$x(), t1.get$y());
    $.Game_convertWorldToCanvas(sunPos);
    this.ctx.beginPath$0();
    this.ctx.arc$6(sunPos.x, 3, 10, 0, 6.283185307179586, false);
    this.ctx.set$lineWidth(15);
    this.ctx.set$strokeStyle("#fff");
    this.ctx.stroke$0();
    this.ctx.closePath$0();
    for (t1 = $.iterator(this.grounds); t2 = t1.moveNext$0(), t3 = this.ctx, t2 === true;)
      t1.get$current().draw$1(t3);
    this.endSolver.draw$1(t3);
    for (t1 = $.iterator(this.dynamicObjects), removeMe = null, itemToRemove = false; t1.moveNext$0() === true;) {
      removeMe0 = t1.get$current();
      removeMe0.draw$1(this.ctx);
      if (typeof removeMe0 === "object" && removeMe0 !== null && !!removeMe0.$isCritter)
        if ($.$$lt(removeMe0.opacity, 0.05) === true) {
          this.world.destroyBody$1(removeMe0.body);
          removeMe = removeMe0;
          itemToRemove = true;
        }
    }
    if (itemToRemove) {
      $.remove(this.dynamicObjects, removeMe);
      $.remove(this.critters, removeMe);
      this.updateProgressElm$0();
      this.handleDone$0();
    }
    this.lightEngine.draw$1(this.dynamicObjects);
    this.frameCount = $.$$add(this.frameCount, 1);
  },
  updateProgressElm$0: function() {
    var t1 = $.S($.$$sub($.$$index($.$$index(this.level, "critters"), "count"), $.length(this.critters))) + "/" + $.S($.$$index($.$$index(this.level, "critters"), "count"));
    this.progressElm.set$text(t1);
  },
  handleDone$0: function() {
    if ($.$$eq($.length(this.critters), 0) === true) {
      this.quotes = $.Common_shuffle(this.quotes);
      var t1 = $.$$index(this.quotes, 0);
      document.query$1("#stripe h2").set$text(t1);
      this.doneElm.get$style().set$display("block");
    }
  },
  run$0: function() {
    this.stopwatch.start$0();
    window.requestAnimationFrame$1(new $.Game_run_anon(this));
  }
};

$$.GameObject = {"": "Object;shape=,body>,width=,height=,hovered<",
  getCurrentAngle$0: function() {
    return $.$$sub($.$$negate(this.body.get$angle()), this.origAngle);
  },
  setTexture$1: function(imagePath) {
    this.texture = $._ElementFactoryProvider_createElement_tag("img");
    this.texture.set$src(imagePath);
  },
  GameObject$0: function() {
    var t1 = $.GameObject_static_counter;
    $.GameObject_static_counter = $.$$add(t1, 1);
    this.tag = t1;
  }
};

$$.BasicBoxObject = {"": "GameObject;",
  getRotatedVerticies$0: function() {
    var verticies, _xpos, _ypos, rad, hWidth, hHeight, t1, t2;
    verticies = $.List_List(0);
    _xpos = $.toDouble(this.body.get$position().get$x());
    _ypos = $.$$negate($.toDouble(this.body.get$position().get$y()));
    rad = $.$$sub($.$$negate(this.body.get$angle()), this.origAngle);
    hWidth = $.$$div($.$$div(this.width, 2), 10);
    hHeight = $.$$div($.$$div(this.height, 2), 10);
    t1 = $.getInterceptor$JSNumber(hWidth);
    t2 = $.getInterceptor$JSNumber(hHeight);
    verticies.push($.Vector$($.$$add($.$$negate($.$$sub(t1.$mul(hWidth, Math.cos($.checkNum(rad))), t2.$mul(hHeight, Math.sin($.checkNum(rad))))), _xpos), $.$$negate($.$$add($.$$negate($.$$add(t1.$mul(hWidth, Math.sin($.checkNum(rad))), t2.$mul(hHeight, Math.cos($.checkNum(rad))))), _ypos))));
    verticies.push($.Vector$($.$$add($.$$negate($.$$add(t1.$mul(hWidth, Math.cos($.checkNum(rad))), t2.$mul(hHeight, Math.sin($.checkNum(rad))))), _xpos), $.$$negate($.$$add($.$$negate($.$$sub(t1.$mul(hWidth, Math.sin($.checkNum(rad))), t2.$mul(hHeight, Math.cos($.checkNum(rad))))), _ypos))));
    verticies.push($.Vector$($.$$add($.$$sub(t1.$mul(hWidth, Math.cos($.checkNum(rad))), t2.$mul(hHeight, Math.sin($.checkNum(rad)))), _xpos), $.$$negate($.$$add($.$$add(t1.$mul(hWidth, Math.sin($.checkNum(rad))), t2.$mul(hHeight, Math.cos($.checkNum(rad)))), _ypos))));
    verticies.push($.Vector$($.$$add($.$$add(t1.$mul(hWidth, Math.cos($.checkNum(rad))), t2.$mul(hHeight, Math.sin($.checkNum(rad)))), _xpos), $.$$negate($.$$add($.$$sub(t1.$mul(hWidth, Math.sin($.checkNum(rad))), t2.$mul(hHeight, Math.cos($.checkNum(rad)))), _ypos))));
    return verticies;
  },
  $isBasicBoxObject: true
};

$$.StaticBox = {"": "BasicBoxObject;shape=,tag,bodyDef,lib3$GameObject$shape,body,texture,width,height,origAngle,hovered",
  addObjectToWorld$1: function(world) {
    this.body = world.createBody$1(this.bodyDef);
    this.body.createFixtureFromShape$1(this.shape);
  },
  draw$1: function(ctx) {
    var verticies, t2, t3, t4, t5;
    ctx.set$fillStyle("#000");
    ctx.beginPath$0();
    verticies = this.getRotatedVerticies$0();
    if (typeof verticies !== "string" && (typeof verticies !== "object" || verticies === null || verticies.constructor !== Array && !verticies.$isJavaScriptIndexingBehavior()))
      return this.draw$1$bailout1(1, ctx, verticies);
    if (0 >= verticies.length)
      throw $.ioore(0);
    $.Game_convertWorldToCanvas(verticies[0]);
    if (1 >= verticies.length)
      throw $.ioore(1);
    $.Game_convertWorldToCanvas(verticies[1]);
    if (2 >= verticies.length)
      throw $.ioore(2);
    $.Game_convertWorldToCanvas(verticies[2]);
    if (3 >= verticies.length)
      throw $.ioore(3);
    $.Game_convertWorldToCanvas(verticies[3]);
    if (0 >= verticies.length)
      throw $.ioore(0);
    t2 = verticies[0];
    ctx.moveTo$2(t2.get$x(), t2.get$y());
    if (1 >= verticies.length)
      throw $.ioore(1);
    t3 = verticies[1];
    ctx.lineTo$2(t3.get$x(), t3.get$y());
    if (2 >= verticies.length)
      throw $.ioore(2);
    t4 = verticies[2];
    ctx.lineTo$2(t4.get$x(), t4.get$y());
    if (3 >= verticies.length)
      throw $.ioore(3);
    t5 = verticies[3];
    ctx.lineTo$2(t5.get$x(), t5.get$y());
    ctx.closePath$0();
    ctx.fill$0();
  },
  draw$1$bailout1: function(state0, ctx, verticies) {
    var t2 = $.getInterceptor$JSStringJSArray(verticies);
    $.Game_convertWorldToCanvas(t2.$index(verticies, 0));
    $.Game_convertWorldToCanvas(t2.$index(verticies, 1));
    $.Game_convertWorldToCanvas(t2.$index(verticies, 2));
    $.Game_convertWorldToCanvas(t2.$index(verticies, 3));
    ctx.moveTo$2(t2.$index(verticies, 0).get$x(), t2.$index(verticies, 0).get$y());
    ctx.lineTo$2(t2.$index(verticies, 1).get$x(), t2.$index(verticies, 1).get$y());
    ctx.lineTo$2(t2.$index(verticies, 2).get$x(), t2.$index(verticies, 2).get$y());
    ctx.lineTo$2(t2.$index(verticies, 3).get$x(), t2.$index(verticies, 3).get$y());
    ctx.closePath$0();
    ctx.fill$0();
  },
  StaticBox$3: function(size, position, angle, angle_check) {
    var t1, t2, t3;
    if (angle_check !== true)
      angle = 0;
    this.shape = $.PolygonShape$();
    t1 = $.getInterceptor$JSNumber(angle);
    this.shape.setAsBoxWithCenterAndAngle$4(size.get$x(), size.get$y(), $.Vector$(0, 0), t1.$mul(angle, 0.0174532925));
    this.bodyDef = $.BodyDef$();
    this.bodyDef.set$type(0);
    this.bodyDef.set$position(position);
    t2 = size.get$x();
    if (typeof t2 !== "number")
      throw $.iae(t2);
    this.width = 2 * t2 * 10;
    t3 = size.get$y();
    if (typeof t3 !== "number")
      throw $.iae(t3);
    this.height = 2 * t3 * 10;
    this.origAngle = t1.$mul(angle, 0.0174532925);
  }
};

$$.DynamicBox = {"": "BasicBoxObject;shape=,activeFixtureDef,highlight<,tag,bodyDef,lib3$GameObject$shape,body,texture,width,height,origAngle,hovered",
  addObjectToWorld$1: function(world) {
    this.body = world.createBody$1(this.bodyDef);
    this.body.createFixture$1(this.activeFixtureDef);
  },
  draw$1: function(ctx) {
    var t1, t3, pos1x, t5, t6, t8, t9, t11, t12;
    t1 = this.body.get$position().get$x();
    if (typeof t1 !== "number")
      return this.draw$1$bailout2(1, ctx, t1);
    t1 *= 10;
    t3 = $.Game_canvasCenter.get$x();
    if (typeof t3 !== "number")
      return this.draw$1$bailout2(2, ctx, t1, t3);
    pos1x = t1 + t3;
    t3 = this.body.get$position().get$y();
    if (typeof t3 !== "number")
      return this.draw$1$bailout2(3, ctx, 0, t3, pos1x);
    t5 = -t3 * 10;
    t6 = $.Game_canvasCenter.get$y();
    if (typeof t6 !== "number")
      return this.draw$1$bailout2(4, ctx, 0, 0, pos1x, t5, t6);
    ctx.save$0();
    ctx.translate$2(pos1x, t5 + t6);
    ctx.rotate$1(this.getCurrentAngle$0());
    t8 = this.texture;
    t9 = this.width;
    if (typeof t9 !== "number")
      return this.draw$1$bailout2(5, ctx, 0, 0, 0, t9, t8);
    t11 = -t9 / 2;
    t12 = this.height;
    if (typeof t12 !== "number")
      return this.draw$1$bailout2(6, ctx, 0, 0, 0, 0, t8, t12, t11);
    ctx.drawImage$5(t8, t11, -t12 / 2, t9, t12);
    ctx.restore$0();
    if (this.highlight === true || this.hovered === true)
      this._drawStroke$3(ctx, "#fff", 2);
    else {
      ctx.set$globalAlpha(0.5);
      this._drawStroke$3(ctx, "#000", 1);
      ctx.set$globalAlpha(1);
    }
  },
  draw$1$bailout2: function(state0, ctx, t1, t3, pos1x, t5, t6, t10, t9) {
    switch (state0) {
      case 0:
        t1 = this.body.get$position().get$x();
      case 1:
        state0 = 0;
        t1 = $.$$mul(t1, 10);
        t3 = $.Game_canvasCenter.get$x();
      case 2:
        state0 = 0;
        pos1x = $.$$add(t1, t3);
        t3 = this.body.get$position().get$y();
      case 3:
        state0 = 0;
        t5 = $.$$mul($.$$negate(t3), 10);
        t6 = $.Game_canvasCenter.get$y();
      case 4:
        state0 = 0;
        pos1y = $.$$add(t5, t6);
        ctx.save$0();
        ctx.translate$2(pos1x, pos1y);
        ctx.rotate$1(this.getCurrentAngle$0());
        t6 = this.texture;
        t5 = this.width;
      case 5:
        state0 = 0;
        t9 = $.$$div($.$$negate(t5), 2);
        t10 = this.height;
      case 6:
        var pos1y;
        state0 = 0;
        ctx.drawImage$5(t6, t9, $.$$div($.$$negate(t10), 2), this.width, this.height);
        ctx.restore$0();
        if (this.highlight === true || this.hovered === true)
          this._drawStroke$3(ctx, "#fff", 2);
        else {
          ctx.set$globalAlpha(0.5);
          this._drawStroke$3(ctx, "#000", 1);
          ctx.set$globalAlpha(1);
        }
    }
  },
  _drawStroke$3: function(ctx, color, lineWidth) {
    var t1, boundary, i;
    t1 = $ === lineWidth;
    if (t1)
      lineWidth = null;
    if (t1)
      lineWidth = 1;
    boundary = this.getRotatedVerticies$0();
    if (typeof boundary !== "string" && (typeof boundary !== "object" || boundary === null || boundary.constructor !== Array && !boundary.$isJavaScriptIndexingBehavior()))
      return this._drawStroke$3$bailout(1, ctx, boundary, color, lineWidth);
    ctx.beginPath$0();
    ctx.set$strokeStyle(color);
    ctx.set$lineWidth(lineWidth);
    for (i = 0; i < boundary.length; ++i)
      if (i === 0) {
        t1 = $.$$add($.$$mul(boundary[i].get$x(), 10), $.Game_canvasCenter.get$x());
        if (i >= boundary.length)
          throw $.ioore(i);
        ctx.moveTo$2(t1, $.$$add($.$$mul($.$$negate(boundary[i].get$y()), 10), $.Game_canvasCenter.get$y()));
      } else {
        t1 = $.$$add($.$$mul(boundary[i].get$x(), 10), $.Game_canvasCenter.get$x());
        if (i >= boundary.length)
          throw $.ioore(i);
        ctx.lineTo$2(t1, $.$$add($.$$mul($.$$negate(boundary[i].get$y()), 10), $.Game_canvasCenter.get$y()));
      }
    ctx.closePath$0();
    ctx.stroke$0();
  },
  _drawStroke$3$bailout: function(state0, ctx, boundary, color, lineWidth) {
    var t1, i;
    ctx.beginPath$0();
    ctx.set$strokeStyle(color);
    ctx.set$lineWidth(lineWidth);
    for (t1 = $.getInterceptor$JSStringJSArray(boundary), i = 0; $.CONSTANT2.$lt(i, t1.get$length(boundary)); ++i)
      if (i === 0)
        ctx.moveTo$2($.$$add($.$$mul(t1.$index(boundary, i).get$x(), 10), $.Game_canvasCenter.get$x()), $.$$add($.$$mul($.$$negate(t1.$index(boundary, i).get$y()), 10), $.Game_canvasCenter.get$y()));
      else
        ctx.lineTo$2($.$$add($.$$mul(t1.$index(boundary, i).get$x(), 10), $.Game_canvasCenter.get$x()), $.$$add($.$$mul($.$$negate(t1.$index(boundary, i).get$y()), 10), $.Game_canvasCenter.get$y()));
    ctx.closePath$0();
    ctx.stroke$0();
  },
  DynamicBox$6: function(size, position, restitution, density, angle, friction) {
    var t1, t2, t3, t4;
    this.shape = $.PolygonShape$();
    t1 = $.getInterceptor$JSNumber(angle);
    this.shape.setAsBoxWithCenterAndAngle$4(size.get$x(), size.get$y(), $.Vector$(0, 0), t1.$mul(angle, 0.0174532925));
    this.activeFixtureDef = $.FixtureDef$();
    this.activeFixtureDef.set$restitution(restitution);
    this.activeFixtureDef.set$density(density);
    this.activeFixtureDef.set$friction(1);
    t2 = this.shape;
    this.activeFixtureDef.set$shape(t2);
    this.activeFixtureDef.set$userData(this);
    this.bodyDef = $.BodyDef$();
    this.bodyDef.set$type(2);
    this.bodyDef.set$position(position);
    t2 = size.get$x();
    if (typeof t2 !== "number")
      throw $.iae(t2);
    this.width = 2 * t2 * 10;
    t3 = size.get$y();
    if (typeof t3 !== "number")
      throw $.iae(t3);
    this.height = 2 * t3 * 10;
    this.origAngle = t1.$mul(angle, 0.0174532925);
    t4 = $.GameObject_static_counter;
    $.GameObject_static_counter = $.$$add(t4, 1);
    this.tag = t4;
  },
  $isDynamicBox: true
};

$$.ClickedFixture = {"": "QueryCallback;mousePos",
  reportFixture$1: function(fixture) {
    var t1, rotMatrix, trans;
    t1 = fixture.get$userData();
    if (typeof t1 === "object" && t1 !== null && !!t1.$isDynamicBox) {
      rotMatrix = $.Matrix22$fromAngle(t1.get$body().get$angle());
      trans = $.Transform$();
      trans.setFromPositionAndRotation$2(t1.get$body().get$position(), rotMatrix);
      if (t1.get$shape().testPoint$2(trans, this.mousePos) === true)
        t1.set$hovered(true);
    }
    return true;
  }
};

$$.DragHandler = {"": "Object;_destionationPos,relativeDistanceFromObjectCenter,_activeObject,_mousePosStart,_active,rotateLeft=,rotateRight=,rotateToDefault",
  activate$2: function(mousePosStart, obj) {
    this._active = true;
    this._activeObject = obj;
    this._mousePosStart = mousePosStart;
  },
  deactivate$0: function() {
    this._active = false;
  },
  isActive$0: function() {
    return this._active;
  },
  getActiveObject$0: function() {
    if (this.isActive$0() === true)
      return this._activeObject;
    else
      return;
  },
  setDestination$1: function(point) {
    this._destionationPos = point;
  },
  getCorrectedDestination$0: function() {
    return $.Vector$($.$$sub(this._destionationPos.get$x(), this.relativeDistanceFromObjectCenter.get$x()), $.$$sub(this._destionationPos.get$y(), this.relativeDistanceFromObjectCenter.get$y()));
  },
  objectDistanceToDestination$0: function() {
    if (this.isActive$0() === true)
      return this._activeObject.get$body().get$position().distanceBetween$1(this._destionationPos);
    else
      return 0;
  }
};

$$.LightEngine = {"": "Object;ctx,tmpCtx,secondTmpCtx,canvas,canvasTmp,secondCanvasTmp,groundLevel,lights",
  add$1: function(lightPosition) {
    this.lights.push(lightPosition);
  },
  draw$1: function(objects) {
    var t1, bottomPoint, bottomVector, t3, $sun, canvasSun, t2, verticies, t4, intersections, minX, maxX, minVertexIndex, maxVertexIndex, i, intersect, vertex, t5, t6, t7, t8, t10, pos1x, t12, t13, pos1y;
    t1 = this.canvas.get$width();
    this.canvas.set$width(t1);
    t1 = this.secondCanvasTmp.get$width();
    this.secondCanvasTmp.set$width(t1);
    bottomPoint = $.Vector$(0, this.groundLevel);
    t1 = $.Game_canvasCenter.get$x();
    if (typeof t1 !== "number")
      return this.draw$1$bailout3(1, objects, t1, bottomPoint);
    bottomVector = $.Vector$(t1 * 2, this.groundLevel);
    t3 = this.lights;
    if (0 >= t3.length)
      throw $.ioore(0);
    $sun = $.Vector$copy(t3[0]);
    canvasSun = $.Vector$copy($sun);
    $.Game_convertWorldToCanvas(canvasSun);
    for (t1 = $.iterator(objects); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      t3 = typeof t2 === "object" && t2 !== null && !!t2.$isBasicBoxObject;
      if (t3) {
        verticies = t2.getRotatedVerticies$0();
        if (typeof verticies !== "string" && (typeof verticies !== "object" || verticies === null || verticies.constructor !== Array && !verticies.$isJavaScriptIndexingBehavior()))
          return this.draw$1$bailout3(2, 0, t1, bottomPoint, verticies, bottomVector, $sun, t2, canvasSun, t3);
      } else if (typeof t2 === "object" && t2 !== null && !!t2.$isCircle) {
        verticies = t2.getRotatedVerticies$1($sun);
        if (typeof verticies !== "string" && (typeof verticies !== "object" || verticies === null || verticies.constructor !== Array && !verticies.$isJavaScriptIndexingBehavior()))
          return this.draw$1$bailout3(3, 0, t1, bottomPoint, verticies, bottomVector, $sun, t2, canvasSun, t3);
      } else
        continue;
      t4 = this.canvasTmp.get$width();
      this.canvasTmp.set$width(t4);
      intersections = $.List_List(0);
      for (t4 = $.getInterceptor$JSStringJSArray(verticies), minX = 1.7976931348623157e+308, maxX = -1.7976931348623157e+308, minVertexIndex = 0, maxVertexIndex = 0, i = 0; i < verticies.length; ++i) {
        intersect = $.Vector$(0, 0);
        if (i >= verticies.length)
          throw $.ioore(i);
        vertex = verticies[i];
        this._isIntersecting$5($sun, vertex, bottomPoint, bottomVector, intersect);
        $.Game_convertWorldToCanvas(intersect);
        intersections.push(intersect);
        t5 = intersect.x;
        if (typeof t5 !== "number")
          return this.draw$1$bailout3(5, 0, t1, bottomPoint, verticies, bottomVector, $sun, t2, canvasSun, t3, intersections, maxX, minVertexIndex, maxVertexIndex, i, t5, minX, t4, intersect, vertex);
        if (t5 < minX) {
          if (typeof t5 !== "number")
            return this.draw$1$bailout3(6, 0, t1, bottomPoint, verticies, bottomVector, $sun, t2, canvasSun, t3, intersections, maxX, 0, maxVertexIndex, i, 0, t5, t4, intersect, vertex);
          minVertexIndex = i;
          minX = t5;
        }
        if (t5 > maxX) {
          if (typeof t5 !== "number")
            return this.draw$1$bailout3(8, 0, t1, bottomPoint, verticies, bottomVector, $sun, t2, canvasSun, t3, intersections, t5, minVertexIndex, 0, i, 0, minX, t4, intersect, vertex);
          maxVertexIndex = i;
          maxX = t5;
        }
        $.Game_convertWorldToCanvas(vertex);
      }
      this.tmpCtx.set$strokeStyle("#000");
      this.tmpCtx.beginPath$0();
      t4 = this.tmpCtx;
      if (minVertexIndex < 0 || minVertexIndex >= intersections.length)
        throw $.ioore(minVertexIndex);
      t5 = intersections[minVertexIndex];
      t4.moveTo$2(t5.get$x(), t5.get$y());
      t4 = this.tmpCtx;
      if (minVertexIndex >= verticies.length)
        throw $.ioore(minVertexIndex);
      t6 = verticies[minVertexIndex];
      t4.lineTo$2(t6.get$x(), t6.get$y());
      t4 = this.tmpCtx;
      if (maxVertexIndex < 0 || maxVertexIndex >= verticies.length)
        throw $.ioore(maxVertexIndex);
      t7 = verticies[maxVertexIndex];
      t4.lineTo$2(t7.get$x(), t7.get$y());
      t4 = this.tmpCtx;
      if (maxVertexIndex >= intersections.length)
        throw $.ioore(maxVertexIndex);
      t8 = intersections[maxVertexIndex];
      t4.lineTo$2(t8.get$x(), t8.get$y());
      this.tmpCtx.fill$0();
      this.tmpCtx.closePath$0();
      t4 = t2.get$body().get$position().get$x();
      if (typeof t4 !== "number")
        return this.draw$1$bailout3(10, 0, t1, bottomPoint, 0, bottomVector, $sun, t2, canvasSun, t3, 0, 0, 0, 0, 0, t4);
      t4 *= 10;
      t10 = $.Game_canvasCenter.get$x();
      if (typeof t10 !== "number")
        return this.draw$1$bailout3(11, 0, t1, bottomPoint, 0, bottomVector, $sun, t2, canvasSun, t3, 0, 0, 0, 0, 0, t4, 0, 0, 0, 0, t10);
      pos1x = t4 + t10;
      t10 = t2.get$body().get$position().get$y();
      if (typeof t10 !== "number")
        return this.draw$1$bailout3(12, 0, t1, bottomPoint, 0, bottomVector, $sun, t2, canvasSun, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, pos1x);
      t12 = -t10 * 10;
      t13 = $.Game_canvasCenter.get$y();
      if (typeof t13 !== "number")
        return this.draw$1$bailout3(13, 0, t1, bottomPoint, 0, bottomVector, $sun, t2, canvasSun, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, pos1x, t12, t13);
      pos1y = t12 + t13;
      if (t3) {
        this.tmpCtx.save$0();
        this.tmpCtx.translate$2(pos1x, pos1y);
        this.tmpCtx.rotate$1(t2.getCurrentAngle$0());
        t3 = this.tmpCtx;
        t4 = t2.width;
        if (typeof t4 !== "number")
          return this.draw$1$bailout3(14, 0, t1, bottomPoint, 0, bottomVector, $sun, t2, canvasSun, t3, 0, 0, 0, 0, 0, 0, 0, t4);
        t6 = -t4 / 2;
        t7 = t2.height;
        if (typeof t7 !== "number")
          return this.draw$1$bailout3(15, 0, t1, bottomPoint, 0, bottomVector, $sun, t2, canvasSun, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7, t6);
        t3.clearRect$4(t6, -t7 / 2, t4, t7);
        this.tmpCtx.restore$0();
      } else if (typeof t2 === "object" && t2 !== null && !!t2.$isCircle) {
        this.tmpCtx.set$globalCompositeOperation("destination-out");
        this.tmpCtx.save$0();
        this.tmpCtx.beginPath$0();
        this.tmpCtx.translate$2(pos1x, pos1y);
        this.tmpCtx.set$fillStyle("#f00");
        t3 = this.tmpCtx;
        t4 = t2.shape.get$radius();
        if (typeof t4 !== "number")
          return this.draw$1$bailout3(16, 0, t1, bottomPoint, 0, bottomVector, $sun, 0, canvasSun, t3, 0, 0, 0, 0, 0, 0, 0, t4);
        t3.arc$6(0, 0, t4 * 10, 0, 6.283185307179586, true);
        this.tmpCtx.closePath$0();
        this.tmpCtx.fill$0();
        this.tmpCtx.restore$0();
        this.tmpCtx.set$globalCompositeOperation("source-over");
      }
      this.secondTmpCtx.drawImage$5(this.canvasTmp, 0, 0, this.canvas.get$width(), this.canvas.get$height());
    }
    this.ctx.set$globalAlpha(0.3);
    this.ctx.drawImage$5(this.secondCanvasTmp, 0, 0, this.canvas.get$width(), this.canvas.get$height());
  },
  draw$1$bailout3: function(state0, objects, t1, bottomPoint, verticies, bottomVector, $sun, t2, canvasSun, t3, intersections, maxX, minVertexIndex, maxVertexIndex, i, t5, minX, t4, intersect, vertex, t9, pos1x, t11, t12, t7, t6) {
    switch (state0) {
      case 0:
        t1 = this.canvas.get$width();
        this.canvas.set$width(t1);
        t1 = this.secondCanvasTmp.get$width();
        this.secondCanvasTmp.set$width(t1);
        bottomPoint = $.Vector$(0, this.groundLevel);
        t1 = $.Game_canvasCenter.get$x();
      case 1:
        state0 = 0;
        bottomVector = $.Vector$($.$$mul(t1, 2), this.groundLevel);
        t3 = this.lights;
        if (0 >= t3.length)
          throw $.ioore(0);
        $sun = $.Vector$copy(t3[0]);
        canvasSun = $.Vector$copy($sun);
        $.Game_convertWorldToCanvas(canvasSun);
        t1 = $.iterator(objects);
      default:
        var pos1y;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(t1.moveNext$0() === true))
                  break L0;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t2 = t1.get$current();
                      t3 = typeof t2 === "object" && t2 !== null && !!t2.$isBasicBoxObject;
                    default:
                      if (state0 === 2 || state0 === 0 && t3)
                        switch (state0) {
                          case 0:
                            verticies = t2.getRotatedVerticies$0();
                          case 2:
                            state0 = 0;
                        }
                      else
                        switch (state0) {
                          case 0:
                          case 3:
                            if (state0 === 3 || state0 === 0 && typeof t2 === "object" && t2 !== null && !!t2.$isCircle)
                              switch (state0) {
                                case 0:
                                  verticies = t2.getRotatedVerticies$1($sun);
                                case 3:
                                  state0 = 0;
                              }
                            else
                              break c$0;
                        }
                      t4 = this.canvasTmp.get$width();
                      this.canvasTmp.set$width(t4);
                      intersections = $.List_List(0);
                      t4 = $.getInterceptor$JSStringJSArray(verticies);
                      minX = 1.7976931348623157e+308;
                      maxX = -1.7976931348623157e+308;
                      minVertexIndex = 0;
                      maxVertexIndex = 0;
                      i = 0;
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                      L1:
                        while (true)
                          switch (state0) {
                            case 0:
                              t5 = t4.get$length(verticies);
                            case 4:
                              state0 = 0;
                              if (!$.CONSTANT2.$lt(i, t5))
                                break L1;
                              intersect = $.Vector$(0, 0);
                              vertex = t4.$index(verticies, i);
                              this._isIntersecting$5($sun, vertex, bottomPoint, bottomVector, intersect);
                              $.Game_convertWorldToCanvas(intersect);
                              intersections.push(intersect);
                              t5 = intersect.x;
                            case 5:
                              state0 = 0;
                            case 6:
                              if (state0 === 6 || state0 === 0 && $.$$lt(t5, minX) === true)
                                switch (state0) {
                                  case 0:
                                    minX = intersect.x;
                                  case 6:
                                    state0 = 0;
                                    minVertexIndex = i;
                                }
                              t5 = intersect.x;
                            case 7:
                              state0 = 0;
                            case 8:
                              if (state0 === 8 || state0 === 0 && $.$$gt(t5, maxX) === true)
                                switch (state0) {
                                  case 0:
                                    maxX = intersect.x;
                                  case 8:
                                    state0 = 0;
                                    maxVertexIndex = i;
                                }
                              $.Game_convertWorldToCanvas(vertex);
                              ++i;
                          }
                      this.tmpCtx.set$strokeStyle("#000");
                      this.tmpCtx.beginPath$0();
                      t5 = this.tmpCtx;
                      if (minVertexIndex < 0 || minVertexIndex >= intersections.length)
                        throw $.ioore(minVertexIndex);
                      t6 = intersections[minVertexIndex];
                      t5.moveTo$2(t6.get$x(), t6.get$y());
                      this.tmpCtx.lineTo$2(t4.$index(verticies, minVertexIndex).get$x(), t4.$index(verticies, minVertexIndex).get$y());
                      this.tmpCtx.lineTo$2(t4.$index(verticies, maxVertexIndex).get$x(), t4.$index(verticies, maxVertexIndex).get$y());
                      t5 = this.tmpCtx;
                      if (maxVertexIndex < 0 || maxVertexIndex >= intersections.length)
                        throw $.ioore(maxVertexIndex);
                      t7 = intersections[maxVertexIndex];
                      t5.lineTo$2(t7.get$x(), t7.get$y());
                      this.tmpCtx.fill$0();
                      this.tmpCtx.closePath$0();
                      t5 = t2.get$body().get$position().get$x();
                    case 10:
                      state0 = 0;
                      t5 = $.$$mul(t5, 10);
                      t9 = $.Game_canvasCenter.get$x();
                    case 11:
                      state0 = 0;
                      pos1x = $.$$add(t5, t9);
                      t9 = t2.get$body().get$position().get$y();
                    case 12:
                      state0 = 0;
                      t11 = $.$$mul($.$$negate(t9), 10);
                      t12 = $.Game_canvasCenter.get$y();
                    case 13:
                      state0 = 0;
                      pos1y = $.$$add(t11, t12);
                    case 14:
                    case 15:
                    case 16:
                      if (state0 === 15 || state0 === 14 || state0 === 0 && t3)
                        switch (state0) {
                          case 0:
                            this.tmpCtx.save$0();
                            this.tmpCtx.translate$2(pos1x, pos1y);
                            this.tmpCtx.rotate$1(t2.getCurrentAngle$0());
                            t3 = this.tmpCtx;
                            t4 = t2.width;
                          case 14:
                            state0 = 0;
                            t6 = $.$$div($.$$negate(t4), 2);
                            t7 = t2.height;
                          case 15:
                            state0 = 0;
                            t3.clearRect$4(t6, $.$$div($.$$negate(t7), 2), t2.width, t2.height);
                            this.tmpCtx.restore$0();
                        }
                      else
                        switch (state0) {
                          case 0:
                          case 16:
                            if (state0 === 16 || state0 === 0 && typeof t2 === "object" && t2 !== null && !!t2.$isCircle)
                              switch (state0) {
                                case 0:
                                  this.tmpCtx.set$globalCompositeOperation("destination-out");
                                  this.tmpCtx.save$0();
                                  this.tmpCtx.beginPath$0();
                                  this.tmpCtx.translate$2(pos1x, pos1y);
                                  this.tmpCtx.set$fillStyle("#f00");
                                  t3 = this.tmpCtx;
                                  t4 = t2.shape.get$radius();
                                case 16:
                                  state0 = 0;
                                  t3.arc$6(0, 0, $.$$mul(t4, 10), 0, 6.283185307179586, true);
                                  this.tmpCtx.closePath$0();
                                  this.tmpCtx.fill$0();
                                  this.tmpCtx.restore$0();
                                  this.tmpCtx.set$globalCompositeOperation("source-over");
                              }
                        }
                      this.secondTmpCtx.drawImage$5(this.canvasTmp, 0, 0, this.canvas.get$width(), this.canvas.get$height());
                  }
                }
            }
        this.ctx.set$globalAlpha(0.3);
        this.ctx.drawImage$5(this.secondCanvasTmp, 0, 0, this.canvas.get$width(), this.canvas.get$height());
    }
  },
  _isIntersecting$5: function(p1, p2, p3, p4, out) {
    var t1, t3, t5, t6, t8, t10, t12, t14, t15, t17, denominator, numerator1, numerator2;
    t1 = p1.x;
    t3 = p2.get$x();
    if (typeof t1 !== "number")
      return this._isIntersecting$5$bailout(1, p1, p2, p3, p4, out, t1);
    if (typeof t3 !== "number")
      return this._isIntersecting$5$bailout(2, p1, p2, p3, p4, out, t1, t3);
    t5 = t1 - t3;
    t6 = p3.y;
    t8 = p4.y;
    if (typeof t6 !== "number")
      return this._isIntersecting$5$bailout(3, p1, p2, p3, p4, out, t6, t5);
    if (typeof t8 !== "number")
      return this._isIntersecting$5$bailout(4, p1, p2, p3, p4, out, t6, t5, t8);
    t5 *= t6 - t8;
    t10 = p1.y;
    t12 = p2.get$y();
    if (typeof t10 !== "number")
      return this._isIntersecting$5$bailout(5, p1, p2, p3, p4, out, 0, t5, 0, t10);
    if (typeof t12 !== "number")
      return this._isIntersecting$5$bailout(6, p1, p2, p3, p4, out, 0, t5, 0, t10, t12);
    t14 = t10 - t12;
    t15 = p3.x;
    t17 = p4.x;
    if (typeof t15 !== "number")
      return this._isIntersecting$5$bailout(7, p1, p2, p3, p4, out, 0, t5, 0, t15, t14);
    if (typeof t17 !== "number")
      return this._isIntersecting$5$bailout(8, p1, p2, p3, p4, out, 0, t5, 0, t15, t14, t17);
    denominator = t5 - t14 * (t15 - t17);
    numerator1 = (t1 * t12 - t10 * t3) * (t15 - t17) - (t1 - t3) * (t15 * t8 - t6 * t17);
    numerator2 = (t1 * t12 - t10 * t3) * (t6 - t8) - (t10 - t12) * (t15 * t8 - t6 * t17);
    if (denominator === 0)
      return numerator1 === 0 && numerator2 === 0;
    out.x = numerator1 / denominator;
    out.y = numerator2 / denominator;
    t1 = out.x;
    if (typeof t1 !== "number")
      return this._isIntersecting$5$bailout(33, 0, 0, 0, 0, out, t1);
    if (t1 >= 0 && t1 <= 1) {
      t1 = out.y;
      if (typeof t1 !== "number")
        return this._isIntersecting$5$bailout(35, 0, 0, 0, 0, out, t1);
      t1 = t1 >= 0 && t1 <= 1;
    } else
      t1 = false;
    return t1;
  },
  _isIntersecting$5$bailout: function(state0, p1, p2, p3, p4, out, t1, t3, t6, t8, t10, t13, denominator, t16, t19, t21, t23, t25, t27, t30, t33, numerator1, t36, t39, t41, t43, t45, t47, t50, t53) {
    switch (state0) {
      case 0:
        t1 = p1.x;
      case 1:
        state0 = 0;
        t3 = p2.get$x();
      case 2:
        state0 = 0;
        t3 = $.$$sub(t1, t3);
        t1 = p3.y;
      case 3:
        state0 = 0;
        t6 = p4.y;
      case 4:
        state0 = 0;
        t3 = $.$$mul(t3, $.$$sub(t1, t6));
        t8 = p1.y;
      case 5:
        state0 = 0;
        t10 = p2.get$y();
      case 6:
        state0 = 0;
        t10 = $.$$sub(t8, t10);
        t8 = p3.x;
      case 7:
        state0 = 0;
        t13 = p4.x;
      case 8:
        state0 = 0;
        denominator = $.$$sub(t3, $.$$mul(t10, $.$$sub(t8, t13)));
        t3 = p1.x;
      case 9:
        state0 = 0;
        t16 = p2.get$y();
      case 10:
        state0 = 0;
        t16 = $.$$mul(t3, t16);
        t3 = p1.y;
      case 11:
        state0 = 0;
        t19 = p2.get$x();
      case 12:
        state0 = 0;
        t16 = $.$$sub(t16, $.$$mul(t3, t19));
        t21 = p3.x;
      case 13:
        state0 = 0;
        t23 = p4.x;
      case 14:
        state0 = 0;
        t16 = $.$$mul(t16, $.$$sub(t21, t23));
        t25 = p1.x;
      case 15:
        state0 = 0;
        t27 = p2.get$x();
      case 16:
        state0 = 0;
        t27 = $.$$sub(t25, t27);
        t25 = p3.x;
      case 17:
        state0 = 0;
        t30 = p4.y;
      case 18:
        state0 = 0;
        t30 = $.$$mul(t25, t30);
        t25 = p3.y;
      case 19:
        state0 = 0;
        t33 = p4.x;
      case 20:
        state0 = 0;
        numerator1 = $.$$sub(t16, $.$$mul(t27, $.$$sub(t30, $.$$mul(t25, t33))));
        t16 = p1.x;
      case 21:
        state0 = 0;
        t36 = p2.get$y();
      case 22:
        state0 = 0;
        t36 = $.$$mul(t16, t36);
        t16 = p1.y;
      case 23:
        state0 = 0;
        t39 = p2.get$x();
      case 24:
        state0 = 0;
        t36 = $.$$sub(t36, $.$$mul(t16, t39));
        t41 = p3.y;
      case 25:
        state0 = 0;
        t43 = p4.y;
      case 26:
        state0 = 0;
        t36 = $.$$mul(t36, $.$$sub(t41, t43));
        t45 = p1.y;
      case 27:
        state0 = 0;
        t47 = p2.get$y();
      case 28:
        state0 = 0;
        t47 = $.$$sub(t45, t47);
        t45 = p3.x;
      case 29:
        state0 = 0;
        t50 = p4.y;
      case 30:
        state0 = 0;
        t50 = $.$$mul(t45, t50);
        t45 = p3.y;
      case 31:
        state0 = 0;
        t53 = p4.x;
      case 32:
        state0 = 0;
        numerator2 = $.$$sub(t36, $.$$mul(t47, $.$$sub(t50, $.$$mul(t45, t53))));
        if ($.$$eq(denominator, 0) === true)
          return $.$$eq(numerator1, 0) === true && $.$$eq(numerator2, 0) === true;
        out.x = $.$$div(numerator1, denominator);
        out.y = $.$$div(numerator2, denominator);
        t1 = out.x;
      case 33:
        state0 = 0;
      case 34:
        if (state0 === 34 || state0 === 0 && $.$$ge(t1, 0) === true)
          switch (state0) {
            case 0:
              t1 = out.x;
            case 34:
              state0 = 0;
              t3 = $.$$le(t1, 1) === true;
              t1 = t3;
          }
        else
          t1 = false;
      default:
        var numerator2;
        if (state0 === 36 || state0 === 35 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              t1 = out.y;
            case 35:
              state0 = 0;
            case 36:
              if (state0 === 36 || state0 === 0 && $.$$ge(t1, 0) === true)
                switch (state0) {
                  case 0:
                    t1 = out.y;
                  case 36:
                    state0 = 0;
                    t3 = $.$$le(t1, 1) === true;
                    t1 = t3;
                }
              else
                t1 = false;
          }
        else
          t1 = false;
        return t1;
    }
  },
  LightEngine$2: function(elm, groundLevel) {
    var t1;
    this.lights = $.List_List(0);
    this.canvas = elm;
    this.groundLevel = groundLevel;
    this.canvasTmp = $.Element_Element$tag("canvas");
    t1 = this.canvas.get$width();
    this.canvasTmp.set$width(t1);
    t1 = this.canvas.get$height();
    this.canvasTmp.set$height(t1);
    this.secondCanvasTmp = $.Element_Element$tag("canvas");
    t1 = this.canvas.get$width();
    this.secondCanvasTmp.set$width(t1);
    t1 = this.canvas.get$height();
    this.secondCanvasTmp.set$height(t1);
    this.ctx = elm.getContext$1("2d");
    this.tmpCtx = this.canvasTmp.getContext$1("2d");
    this.secondTmpCtx = this.secondCanvasTmp.getContext$1("2d");
  }
};

$$.GameEventHandlers = {"": "Object;dragHandler>,game",
  onMouseDown$1: function(e) {
    var pointClicked, t1, t2, t3, diffFromObjectCenter;
    pointClicked = $.Game_convertCanvasToWorld($.Vector$(e.get$clientX(), e.get$clientY()));
    t1 = this.dragHandler;
    t1.deactivate$0();
    for (t2 = $.iterator(this.game.dynamicObjects); t2.moveNext$0() === true;) {
      t3 = t2.get$current();
      if (!(typeof t3 === "object" && t3 !== null && !!t3.$isDynamicBox))
        continue;
      if (t3.hovered === true) {
        t3.highlight = true;
        t1.activate$2(pointClicked, t3);
        t1.setDestination$1(pointClicked);
        diffFromObjectCenter = $.Vector$copy(pointClicked);
        diffFromObjectCenter.subLocal$1(t3.body.get$position());
        t1.relativeDistanceFromObjectCenter = diffFromObjectCenter;
        break;
      }
    }
  },
  get$onMouseDown: function() {
    return new $.BoundClosure$1(this, "onMouseDown$1");
  },
  onMouseUp$1: function(e) {
    var t1 = this.dragHandler;
    if (t1.isActive$0() === true) {
      t1.getActiveObject$0().set$highlight(false);
      t1.deactivate$0();
    }
  },
  get$onMouseUp: function() {
    return new $.BoundClosure$1(this, "onMouseUp$1");
  },
  onMouseMove$1: function(e) {
    var t1, t2, callback, mousePos, aabb;
    for (t1 = this.game, t2 = $.iterator(t1.dynamicObjects); t2.moveNext$0() === true;)
      t2.get$current().set$hovered(false);
    callback = $.ClickedFixture$();
    mousePos = $.Game_convertCanvasToWorld($.Vector$(e.get$clientX(), e.get$clientY()));
    callback.mousePos = mousePos;
    aabb = $.AxisAlignedBox$(mousePos, mousePos);
    t1.world.queryAABB$2(callback, aabb);
    t1 = this.dragHandler;
    if (t1.isActive$0() === true)
      t1.setDestination$1(mousePos);
  },
  get$onMouseMove: function() {
    return new $.BoundClosure$1(this, "onMouseMove$1");
  }
};

$$.Circle = {"": "GameObject;shape=",
  addObjectToWorld$1: function(world) {
    this.body = world.createBody$1(this.bodyDef);
    this.body.createFixture$1(this.activeFixtureDef);
  },
  draw$1: function(ctx) {
  },
  getRotatedVerticies$1: function(lightSource) {
    var tmp, t1, t2, first, second;
    tmp = $.Vector$copy(lightSource);
    tmp.subLocal$1(this.body.get$position());
    tmp.normalize$0();
    t1 = tmp.y;
    t2 = tmp.x;
    if (typeof t2 !== "number")
      return this.getRotatedVerticies$1$bailout(1, tmp, t1, t2);
    first = $.Vector$(t1, -t2);
    t1 = tmp.y;
    if (typeof t1 !== "number")
      return this.getRotatedVerticies$1$bailout(2, tmp, t1, 0, first);
    second = $.Vector$(-t1, tmp.x);
    first.mulLocal$1(this.shape.get$radius());
    second.mulLocal$1(this.shape.get$radius());
    first.addLocal$1(this.body.get$position());
    second.addLocal$1(this.body.get$position());
    return [first, second];
  },
  getRotatedVerticies$1$bailout: function(state0, tmp, t1, t2, first) {
    switch (state0) {
      case 0:
        tmp = $.Vector$copy(lightSource);
        tmp.subLocal$1(this.body.get$position());
        tmp.normalize$0();
        t1 = tmp.y;
        t2 = tmp.x;
      case 1:
        state0 = 0;
        first = $.Vector$(t1, $.$$negate(t2));
        t1 = tmp.y;
      case 2:
        var second;
        state0 = 0;
        second = $.Vector$($.$$negate(t1), tmp.x);
        first.mulLocal$1(this.shape.get$radius());
        second.mulLocal$1(this.shape.get$radius());
        first.addLocal$1(this.body.get$position());
        second.addLocal$1(this.body.get$position());
        return [first, second];
    }
  },
  $isCircle: true
};

$$.Critter = {"": "Circle;opacity,fadeOut<,shape,activeFixtureDef,tag,bodyDef,lib3$GameObject$shape,body,texture,width,height,origAngle,hovered",
  draw$1: function(ctx) {
    var t1, t3, pos1x, t5, t6, pos1y, radius, t2;
    t1 = this.body.get$position().get$x();
    if (typeof t1 !== "number")
      return this.draw$1$bailout(1, ctx, t1);
    t1 *= 10;
    t3 = $.Game_canvasCenter.get$x();
    if (typeof t3 !== "number")
      return this.draw$1$bailout(2, ctx, t1, t3);
    pos1x = t1 + t3;
    t3 = this.body.get$position().get$y();
    if (typeof t3 !== "number")
      return this.draw$1$bailout(3, ctx, 0, t3, pos1x);
    t5 = -t3 * 10;
    t6 = $.Game_canvasCenter.get$y();
    if (typeof t6 !== "number")
      return this.draw$1$bailout(4, ctx, 0, 0, pos1x, t5, t6);
    pos1y = t5 + t6;
    t6 = this.shape.get$radius();
    if (typeof t6 !== "number")
      return this.draw$1$bailout(5, ctx, 0, 0, pos1x, 0, t6, pos1y);
    radius = t6 * 10;
    if (this.fadeOut === true) {
      ctx.set$globalAlpha(this.opacity);
      t1 = this.opacity;
      if (typeof t1 !== "number")
        return this.draw$1$bailout(6, ctx, t1, 0, pos1x, 0, 0, pos1y, radius);
      this.opacity = t1 - 0.05;
    }
    ctx.save$0();
    ctx.beginPath$0();
    ctx.translate$2(pos1x, pos1y);
    ctx.rotate$1(this.getCurrentAngle$0());
    t1 = -radius;
    t2 = radius * 2;
    ctx.drawImage$5(this.texture, t1, t1, t2, t2);
    ctx.closePath$0();
    ctx.fill$0();
    ctx.restore$0();
    if (this.fadeOut === true)
      ctx.set$globalAlpha(1);
  },
  draw$1$bailout: function(state0, ctx, t1, t3, pos1x, t5, t6, pos1y, radius) {
    switch (state0) {
      case 0:
        t1 = this.body.get$position().get$x();
      case 1:
        state0 = 0;
        t1 = $.$$mul(t1, 10);
        t3 = $.Game_canvasCenter.get$x();
      case 2:
        state0 = 0;
        pos1x = $.$$add(t1, t3);
        t3 = this.body.get$position().get$y();
      case 3:
        state0 = 0;
        t5 = $.$$mul($.$$negate(t3), 10);
        t6 = $.Game_canvasCenter.get$y();
      case 4:
        state0 = 0;
        pos1y = $.$$add(t5, t6);
        t6 = this.shape.get$radius();
      case 5:
        state0 = 0;
        radius = $.$$mul(t6, 10);
      case 6:
        if (state0 === 6 || state0 === 0 && this.fadeOut === true)
          switch (state0) {
            case 0:
              ctx.set$globalAlpha(this.opacity);
              t1 = this.opacity;
            case 6:
              state0 = 0;
              this.opacity = $.$$sub(t1, 0.05);
          }
        ctx.save$0();
        ctx.beginPath$0();
        ctx.translate$2(pos1x, pos1y);
        ctx.rotate$1(this.getCurrentAngle$0());
        t1 = $.getInterceptor$JSNumber(radius);
        ctx.drawImage$5(this.texture, t1.$negate(radius), t1.$negate(radius), t1.$mul(radius, 2), t1.$mul(radius, 2));
        ctx.closePath$0();
        ctx.fill$0();
        ctx.restore$0();
        if (this.fadeOut === true)
          ctx.set$globalAlpha(1);
    }
  },
  Critter$2: function(radius, position) {
    var t1;
    this.width = radius;
    this.height = radius;
    this.shape = $.CircleShape$();
    this.shape.set$radius(radius);
    this.activeFixtureDef = $.FixtureDef$();
    this.activeFixtureDef.set$restitution(0.8);
    this.activeFixtureDef.set$density(0.4);
    this.activeFixtureDef.set$friction(0.9);
    t1 = this.shape;
    this.activeFixtureDef.set$shape(t1);
    this.activeFixtureDef.set$userData(this);
    this.bodyDef = $.BodyDef$();
    this.bodyDef.set$type(2);
    this.bodyDef.set$position(position);
    this.setTexture$1("./images/circle.png");
  },
  $isCritter: true
};

$$.EndSolver = {"": "Object;endPoints,critters,spawnPoint,game",
  draw$1: function(ctx) {
    var t1, t2, t3, t5, t6, t8, t10, t12, t13, t15, t17, t19, t20, t22, t24, t26, t27, t28, t30;
    ctx.beginPath$0();
    ctx.set$strokeStyle("#fff");
    ctx.set$lineWidth(2);
    t1 = this.endPoints;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2 = t1[0];
    t3 = t2.get$x();
    if (typeof t3 !== "number")
      return this.draw$1$bailout0(1, ctx, t3, t1);
    t3 *= 10;
    t5 = $.Game_canvasCenter;
    t6 = t5.get$x();
    if (typeof t6 !== "number")
      return this.draw$1$bailout0(2, ctx, t3, t1, t6);
    t6 = t3 + t6;
    t2 = t2.get$y();
    if (typeof t2 !== "number")
      return this.draw$1$bailout0(3, ctx, t2, t1, t6);
    t8 = -t2 * 10;
    t5 = t5.get$y();
    if (typeof t5 !== "number")
      return this.draw$1$bailout0(4, ctx, 0, t1, t6, t8, t5);
    ctx.moveTo$2(t6, t8 + t5);
    if (1 >= t1.length)
      throw $.ioore(1);
    t6 = t1[1];
    t10 = t6.get$x();
    if (typeof t10 !== "number")
      return this.draw$1$bailout0(5, ctx, 0, t1, t10);
    t10 *= 10;
    t12 = $.Game_canvasCenter;
    t13 = t12.get$x();
    if (typeof t13 !== "number")
      return this.draw$1$bailout0(6, ctx, 0, t1, t10, 0, 0, t13);
    t13 = t10 + t13;
    t6 = t6.get$y();
    if (typeof t6 !== "number")
      return this.draw$1$bailout0(7, ctx, 0, t1, t6, 0, 0, t13);
    t15 = -t6 * 10;
    t12 = t12.get$y();
    if (typeof t12 !== "number")
      return this.draw$1$bailout0(8, ctx, 0, t1, 0, 0, 0, t13, t15, t12);
    ctx.lineTo$2(t13, t15 + t12);
    if (2 >= t1.length)
      throw $.ioore(2);
    t13 = t1[2];
    t17 = t13.get$x();
    if (typeof t17 !== "number")
      return this.draw$1$bailout0(9, ctx, 0, t1, 0, 0, 0, t17);
    t17 *= 10;
    t19 = $.Game_canvasCenter;
    t20 = t19.get$x();
    if (typeof t20 !== "number")
      return this.draw$1$bailout0(10, ctx, 0, t1, 0, 0, 0, t17, 0, 0, t20);
    t20 = t17 + t20;
    t13 = t13.get$y();
    if (typeof t13 !== "number")
      return this.draw$1$bailout0(11, ctx, 0, 0, 0, 0, 0, t13, 0, 0, t20);
    t22 = -t13 * 10;
    t19 = t19.get$y();
    if (typeof t19 !== "number")
      return this.draw$1$bailout0(12, ctx, 0, 0, 0, 0, 0, 0, 0, 0, t20, t22, t19);
    ctx.lineTo$2(t20, t22 + t19);
    ctx.closePath$0();
    ctx.set$globalAlpha(0.2);
    ctx.set$fillStyle("#fff");
    ctx.fill$0();
    ctx.set$globalAlpha(0.8);
    ctx.stroke$0();
    ctx.beginPath$0();
    t20 = this.spawnPoint;
    t24 = t20.x;
    if (typeof t24 !== "number")
      return this.draw$1$bailout0(13, ctx, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, 0, t24);
    t26 = (t24 + 3) * 10;
    t27 = $.Game_canvasCenter;
    t28 = t27.get$x();
    if (typeof t28 !== "number")
      return this.draw$1$bailout0(14, ctx, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, 0, 0, t28, t26);
    t28 = t26 + t28;
    t20 = t20.y;
    if (typeof t20 !== "number")
      return this.draw$1$bailout0(15, ctx, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, 0, 0, t28);
    t30 = (-t20 - 3) * 10;
    t27 = t27.get$y();
    if (typeof t27 !== "number")
      return this.draw$1$bailout0(16, ctx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, t27, t30);
    ctx.arc$6(t28, t30 + t27, 60, 0, 6.283185307179586, false);
    ctx.set$fillStyle("#fff");
    ctx.set$lineWidth(2);
    ctx.closePath$0();
    ctx.set$globalAlpha(0.2);
    ctx.stroke$0();
    ctx.set$globalAlpha(0.05);
    ctx.set$fillStyle("#fff");
    ctx.fill$0();
    ctx.set$globalAlpha(1);
  },
  draw$1$bailout0: function(state0, ctx, t2, t1, t4, t7, t8, t11, t14, t15, t18, t21, t22, t24, t27, t26, t30, t29) {
    switch (state0) {
      case 0:
        ctx.beginPath$0();
        ctx.set$strokeStyle("#fff");
        ctx.set$lineWidth(2);
        t1 = this.endPoints;
        if (0 >= t1.length)
          throw $.ioore(0);
        t2 = t1[0].get$x();
      case 1:
        state0 = 0;
        t2 = $.$$mul(t2, 10);
        t4 = $.Game_canvasCenter.get$x();
      case 2:
        state0 = 0;
        t4 = $.$$add(t2, t4);
        if (0 >= t1.length)
          throw $.ioore(0);
        t2 = t1[0].get$y();
      case 3:
        state0 = 0;
        t7 = $.$$mul($.$$negate(t2), 10);
        t8 = $.Game_canvasCenter.get$y();
      case 4:
        state0 = 0;
        ctx.moveTo$2(t4, $.$$add(t7, t8));
        if (1 >= t1.length)
          throw $.ioore(1);
        t4 = t1[1].get$x();
      case 5:
        state0 = 0;
        t4 = $.$$mul(t4, 10);
        t11 = $.Game_canvasCenter.get$x();
      case 6:
        state0 = 0;
        t11 = $.$$add(t4, t11);
        if (1 >= t1.length)
          throw $.ioore(1);
        t4 = t1[1].get$y();
      case 7:
        state0 = 0;
        t14 = $.$$mul($.$$negate(t4), 10);
        t15 = $.Game_canvasCenter.get$y();
      case 8:
        state0 = 0;
        ctx.lineTo$2(t11, $.$$add(t14, t15));
        if (2 >= t1.length)
          throw $.ioore(2);
        t11 = t1[2].get$x();
      case 9:
        state0 = 0;
        t11 = $.$$mul(t11, 10);
        t18 = $.Game_canvasCenter.get$x();
      case 10:
        state0 = 0;
        t18 = $.$$add(t11, t18);
        if (2 >= t1.length)
          throw $.ioore(2);
        t11 = t1[2].get$y();
      case 11:
        state0 = 0;
        t21 = $.$$mul($.$$negate(t11), 10);
        t22 = $.Game_canvasCenter.get$y();
      case 12:
        state0 = 0;
        ctx.lineTo$2(t18, $.$$add(t21, t22));
        ctx.closePath$0();
        ctx.set$globalAlpha(0.2);
        ctx.set$fillStyle("#fff");
        ctx.fill$0();
        ctx.set$globalAlpha(0.8);
        ctx.stroke$0();
        ctx.beginPath$0();
        t18 = this.spawnPoint;
        t24 = t18.x;
      case 13:
        state0 = 0;
        t26 = $.$$mul($.$$add(t24, 3), 10);
        t27 = $.Game_canvasCenter.get$x();
      case 14:
        state0 = 0;
        t27 = $.$$add(t26, t27);
        t18 = t18.y;
      case 15:
        state0 = 0;
        t29 = $.$$mul($.$$sub($.$$negate(t18), 3), 10);
        t30 = $.Game_canvasCenter.get$y();
      case 16:
        state0 = 0;
        ctx.arc$6(t27, $.$$add(t29, t30), 60, 0, 6.283185307179586, false);
        ctx.set$fillStyle("#fff");
        ctx.set$lineWidth(2);
        ctx.closePath$0();
        ctx.set$globalAlpha(0.2);
        ctx.stroke$0();
        ctx.set$globalAlpha(0.05);
        ctx.set$fillStyle("#fff");
        ctx.fill$0();
        ctx.set$globalAlpha(1);
    }
  },
  check$0: function() {
    var t1, t2, t3, t4, t5, t6, t7;
    for (t1 = $.iterator(this.critters), t2 = this.endPoints; t1.moveNext$0() === true;) {
      t3 = t1.get$current();
      t4 = t3.get$body().get$position();
      t5 = t2.length;
      if (0 >= t5)
        throw $.ioore(0);
      t6 = t2[0];
      if (1 >= t5)
        throw $.ioore(1);
      t7 = t2[1];
      if (2 >= t5)
        throw $.ioore(2);
      if (this._pointInTriangle$4(t4, t6, t7, t2[2]) === true)
        t3.set$fadeOut(true);
    }
  },
  _sign$3: function(p1, p2, p3) {
    return $.$$sub($.$$mul($.$$sub(p1.get$x(), p3.get$x()), $.$$sub(p2.get$y(), p3.get$y())), $.$$mul($.$$sub(p2.get$x(), p3.get$x()), $.$$sub(p1.get$y(), p3.get$y())));
  },
  _pointInTriangle$4: function(pt, v1, v2, v3) {
    var t1, b1, b2;
    t1 = this._sign$3(pt, v1, v2);
    if (typeof t1 !== "number")
      return this._pointInTriangle$4$bailout(1, pt, v1, v2, v3, t1);
    b1 = t1 < 0;
    t1 = this._sign$3(pt, v2, v3);
    if (typeof t1 !== "number")
      return this._pointInTriangle$4$bailout(2, pt, v1, 0, v3, t1, b1);
    b2 = t1 < 0;
    t1 = this._sign$3(pt, v3, v1);
    if (typeof t1 !== "number")
      return this._pointInTriangle$4$bailout(3, 0, 0, 0, 0, t1, b1, b2);
    return b1 === b2 && b2 === t1 < 0;
  },
  _pointInTriangle$4$bailout: function(state0, pt, v1, v2, v3, t1, b1, b2) {
    switch (state0) {
      case 0:
        t1 = this._sign$3(pt, v1, v2);
      case 1:
        state0 = 0;
        b1 = $.$$lt(t1, 0);
        t1 = this._sign$3(pt, v2, v3);
      case 2:
        state0 = 0;
        b2 = $.$$lt(t1, 0);
        t1 = this._sign$3(pt, v3, v1);
      case 3:
        var b3;
        state0 = 0;
        b3 = $.$$lt(t1, 0);
        return $.$$eq(b1, b2) === true && $.$$eq(b2, b3) === true;
    }
  }
};

$$._FrozenElementList = {"": "Object;_nodeList",
  contains$1: function(element) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      if ($.$$eq(t1.get$current(), element) === true)
        return true;
    return false;
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    return $.isEmpty(this._nodeList);
  },
  get$length: function() {
    return $.length(this._nodeList);
  },
  $index: function(index) {
    var t1 = this._nodeList;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout1(1, t1, index);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout1: function(state0, t1, index) {
    return $.$$index(t1, index);
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  set$length: function(newLength) {
    $.length0(this._nodeList, newLength);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$iterator: function() {
    return $._FrozenElementListIterator$(this);
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  setRange$4: function(start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  setRange$3: function(start, rangeLength, from) {
    return this.setRange$4(start, rangeLength, from, 0);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  getRange$2: function(start, rangeLength) {
    return $._FrozenElementList$_wrap($.getRange(this._nodeList, start, rangeLength));
  },
  indexOf$2: function(element, start) {
    return $.indexOf(this._nodeList, element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$(""));
  },
  remove$1: function(element) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  }
};

$$._FrozenElementListIterator = {"": "Object;_liblib1$_list,_liblib1$_index,_liblib1$_current",
  moveNext$0: function() {
    var t1, nextIndex, t2, t3;
    t1 = this._liblib1$_index;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout2(1, t1);
    nextIndex = t1 + 1;
    t1 = this._liblib1$_list;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    t3 = t2.get$length(t1);
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout2(2, t1, nextIndex, t3, t2);
    if (nextIndex < t3) {
      this._liblib1$_current = t1.$index(nextIndex);
      this._liblib1$_index = nextIndex;
      return true;
    }
    this._liblib1$_index = t2.get$length(t1);
    this._liblib1$_current = null;
    return false;
  },
  moveNext$0$bailout2: function(state0, t1, nextIndex, t3, t2) {
    switch (state0) {
      case 0:
        t1 = this._liblib1$_index;
      case 1:
        state0 = 0;
        nextIndex = $.$$add(t1, 1);
        t1 = this._liblib1$_list;
        t2 = $.getInterceptor$JSStringJSArray(t1);
        t3 = t2.get$length(t1);
      case 2:
        state0 = 0;
        if ($.$$lt(nextIndex, t3) === true) {
          this._liblib1$_current = t1.$index(nextIndex);
          this._liblib1$_index = nextIndex;
          return true;
        }
        this._liblib1$_index = t2.get$length(t1);
        this._liblib1$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$._EventStream = {"": "Stream;_target,_eventType,_useCapture",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture);
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  }
};

$$._EventStreamSubscription = {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this.get$_canceled() === true)
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    var t1 = this._onData;
    if (!(t1 == null))
      this._target.$$dom_removeEventListener$3(this._eventType, t1, this._useCapture);
    this._target = null;
    this._onData = null;
  },
  get$_canceled: function() {
    return this._target == null;
  },
  get$_paused: function() {
    return this._pauseCount > 0;
  },
  _tryResume$0: function() {
    if (!(this._onData == null) && this.get$_paused() !== true)
      this._target.$$dom_addEventListener$3(this._eventType, this._onData, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture) {
    this._tryResume$0();
  }
};

$$.EventStreamProvider = {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$._DOMWindowCrossFrame = {"": "Object;_window",
  get$parent: function() {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  },
  close$0: function() {
    return this._window.close();
  }
};

$$.FixedSizeListIterator = {"": "Object;_array,_liblib1$_length,_liblib1$_position,_liblib1$_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._liblib1$_position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout1(1, t1);
    nextPosition = t1 + 1;
    t1 = this._liblib1$_length;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout1(2, t1, nextPosition);
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout1(3, t1, nextPosition);
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib1$_current = t1[nextPosition];
      this._liblib1$_position = nextPosition;
      return true;
    }
    this._liblib1$_current = null;
    this._liblib1$_position = t1;
    return false;
  },
  moveNext$0$bailout1: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._liblib1$_position;
      case 1:
        state0 = 0;
        nextPosition = $.$$add(t1, 1);
        t1 = this._liblib1$_length;
      case 2:
        state0 = 0;
      case 3:
        if (state0 === 3 || state0 === 0 && $.$$lt(nextPosition, t1) === true)
          switch (state0) {
            case 0:
              t1 = this._array;
            case 3:
              state0 = 0;
              this._liblib1$_current = $.$$index(t1, nextPosition);
              this._liblib1$_position = nextPosition;
              return true;
          }
        this._liblib1$_current = null;
        this._liblib1$_position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$._Random = {"": "Object;",
  nextInt$1: function(max) {
    if (typeof max !== "number")
      return this.nextInt$1$bailout(1, max);
    if (max < 0)
      throw $.$$throw($.ArgumentError$("negative max: " + $.S(max)));
    if (max > 4294967295)
      max = 4294967295;
    return (Math.random() * max) >>> 0;
  },
  nextInt$1$bailout: function(state0, max) {
    var t1 = $.getInterceptor$JSNumber(max);
    if (t1.$lt(max, 0) === true)
      throw $.$$throw($.ArgumentError$("negative max: " + $.S(max)));
    if (t1.$gt(max, 4294967295) === true)
      max = 4294967295;
    return (Math.random() * max) >>> 0;
  },
  nextDouble$0: function() {
    return Math.random();
  }
};

$$.CanvasDraw = {"": "DebugDraw;ctx,flags,viewportTransform",
  CanvasDraw$2: function(viewport, ctx) {
  }
};

$$.CanvasViewportTransform = {"": "IViewportTransform;yFlip,extents,scale,center",
  CanvasViewportTransform$2: function(_extents, _center) {
    this.yFlip = true;
  }
};

$$.ContactFilter = {"": "Object;",
  shouldCollide$2: function(fixtureA, fixtureB) {
    var filterA, filterB, t1, t3, t5;
    filterA = fixtureA.get$filter();
    filterB = fixtureB.get$filter();
    t1 = filterA.get$groupIndex();
    if (typeof t1 !== "number")
      return this.shouldCollide$2$bailout(1, t1, filterA, filterB);
    if (!(t1 === 0) && t1 === filterB.get$groupIndex()) {
      t1 = filterA.get$groupIndex();
      if (typeof t1 !== "number")
        return this.shouldCollide$2$bailout(2, t1);
      return t1 > 0;
    }
    t1 = filterA.get$maskBits();
    t3 = filterB.get$categoryBits();
    if (t1 !== (t1 | 0))
      return this.shouldCollide$2$bailout(3, t1, filterA, filterB);
    if (t3 !== (t3 | 0))
      return this.shouldCollide$2$bailout(4, t1, filterA, filterB, t3);
    if ((t1 & t3) >>> 0 !== 0) {
      t1 = filterA.get$categoryBits();
      t3 = filterB.get$maskBits();
      if (t1 !== (t1 | 0))
        return this.shouldCollide$2$bailout(5, t1, 0, filterB);
      if (t3 !== (t3 | 0))
        return this.shouldCollide$2$bailout(6, t1, 0, 0, t3);
      t5 = (t1 & t3) >>> 0 !== 0;
      t1 = t5;
    } else
      t1 = false;
    return t1;
  },
  shouldCollide$2$bailout: function(state0, t1, filterA, filterB, t3) {
    switch (state0) {
      case 0:
        filterA = fixtureA.get$filter();
        filterB = fixtureB.get$filter();
        t1 = filterA.get$groupIndex();
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$eq(t1, 0) !== true && $.$$eq(filterA.get$groupIndex(), filterB.get$groupIndex()) === true)
          switch (state0) {
            case 0:
              t1 = filterA.get$groupIndex();
            case 2:
              state0 = 0;
              return $.$$gt(t1, 0);
          }
        t1 = filterA.get$maskBits();
      case 3:
        state0 = 0;
        t3 = filterB.get$categoryBits();
      case 4:
        state0 = 0;
      default:
        var t5;
        if (state0 === 6 || state0 === 5 || state0 === 0 && $.$$eq($.$$and(t1, t3), 0) !== true)
          switch (state0) {
            case 0:
              t1 = filterA.get$categoryBits();
            case 5:
              state0 = 0;
              t3 = filterB.get$maskBits();
            case 6:
              state0 = 0;
              t5 = $.$$eq($.$$and(t1, t3), 0) !== true;
              t1 = t5;
          }
        else
          t1 = false;
        return t1;
    }
  }
};

$$.ContactImpulse = {"": "Object;normalImpulses,tangentImpulses"};

$$.QueryCallback = {"": "Object;"};

$$.DebugDraw = {"": "Object;flags="};

$$.AxisAlignedBox = {"": "Object;lowerBound>,upperBound>",
  setFromCombination$2: function(boxOne, boxTwo) {
    var t1 = $.min(boxOne.get$lowerBound().get$x(), boxTwo.get$lowerBound().get$x());
    this.lowerBound.set$x(t1);
    t1 = $.min(boxOne.get$lowerBound().get$y(), boxTwo.get$lowerBound().get$y());
    this.lowerBound.set$y(t1);
    t1 = $.max(boxOne.get$upperBound().get$x(), boxTwo.get$upperBound().get$x());
    this.upperBound.set$x(t1);
    t1 = $.max(boxOne.get$upperBound().get$y(), boxTwo.get$upperBound().get$y());
    this.upperBound.set$y(t1);
  },
  get$center: function() {
    var c = $.Vector$copy(this.lowerBound);
    c.addLocal$1(this.upperBound);
    c.mulLocal$1(0.5);
    return c;
  },
  contains$1: function(aabb) {
    return $.$$gt(this.lowerBound.get$x(), aabb.get$lowerBound().get$x()) === true && $.$$gt(this.lowerBound.get$y(), aabb.get$lowerBound().get$y()) === true && $.$$lt(this.upperBound.get$y(), aabb.get$upperBound().get$y()) === true && $.$$lt(this.upperBound.get$x(), aabb.get$upperBound().get$x()) === true;
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  setFrom$1: function(other) {
    this.lowerBound.setFrom$1(other.get$lowerBound());
    this.upperBound.setFrom$1(other.get$upperBound());
  },
  toString$0: function() {
    return $.S(this.lowerBound) + ", " + $.S(this.upperBound);
  },
  AxisAlignedBox$2: function(lowerBound, upperBound) {
    if (this.lowerBound == null)
      this.lowerBound = $.Vector$(0, 0);
    if (this.upperBound == null)
      this.upperBound = $.Vector$(0, 0);
  }
};

$$.Collision = {"": "Object;_pool,cache,input,output,results1,results2,incidentEdge>,localTangent,localNormal>,planePoint,tangent,normal>,normal1,v11,v12,clipPoints1,clipPoints2",
  testOverlap$4: function(shapeA, shapeB, transformA, transformB) {
    var t1, t2, t3, t4;
    t1 = this.input;
    t1.proxyA.setFromShape$1(shapeA);
    t1.proxyB.setFromShape$1(shapeB);
    t1.transformA.setFrom$1(transformA);
    t1.transformB.setFrom$1(transformB);
    t1.useRadii = true;
    t2 = this.cache;
    t2.count = 0;
    t3 = this._pool.distance;
    t4 = this.output;
    t3.distance$3(t4, t2, t1);
    return $.$$lt(t4.distance, 0.000001192);
  },
  collideCircles$5: function(manifold, circle1, xfA, circle2, xfB) {
    var v, pAy, pAx, v1, pBy, dx, dy, distSqr, radius;
    manifold.set$pointCount(0);
    v = circle1.get$position();
    pAy = $.$$add($.$$add(xfA.get$position().get$y(), $.$$mul(xfA.get$rotation().get$col1().get$y(), v.get$x())), $.$$mul(xfA.get$rotation().get$col2().get$y(), v.get$y()));
    pAx = $.$$add($.$$add(xfA.get$position().get$x(), $.$$mul(xfA.get$rotation().get$col1().get$x(), v.get$x())), $.$$mul(xfA.get$rotation().get$col2().get$x(), v.get$y()));
    v1 = circle2.get$position();
    pBy = $.$$add($.$$add(xfB.get$position().get$y(), $.$$mul(xfB.get$rotation().get$col1().get$y(), v1.get$x())), $.$$mul(xfB.get$rotation().get$col2().get$y(), v1.get$y()));
    dx = $.$$sub($.$$add($.$$add(xfB.get$position().get$x(), $.$$mul(xfB.get$rotation().get$col1().get$x(), v1.get$x())), $.$$mul(xfB.get$rotation().get$col2().get$x(), v1.get$y())), pAx);
    dy = $.$$sub(pBy, pAy);
    distSqr = $.$$add($.$$mul(dx, dx), $.$$mul(dy, dy));
    radius = $.$$add(circle1.get$radius(), circle2.get$radius());
    if ($.$$gt(distSqr, $.$$mul(radius, radius)) === true)
      return;
    manifold.set$type(0);
    manifold.get$localPoint().setFrom$1(circle1.get$position());
    manifold.get$localNormal().setZero$0();
    manifold.set$pointCount(1);
    $.$$index(manifold.get$points(), 0).get$localPoint().setFrom$1(circle2.get$position());
    $.$$index(manifold.get$points(), 0).get$id().zero$0();
  },
  collidePolygonAndCircle$5: function(manifold, polygon, xfA, circle, xfB) {
    var v, cy, v1x, v1y, t1, b, b1, t2, cLocaly, cLocalx, radius, vertexCount, vertices, normals, normalIndex, separation, i, vertex, norm, s, vertIndex2, v1, v2, mpoint, temp2X, temp2Y, t3, t4, temp4X, temp4Y, dx, dy, fcx, fcy;
    manifold.set$pointCount(0);
    v = circle.get$position();
    cy = $.$$add($.$$add(xfB.get$position().get$y(), $.$$mul(xfB.get$rotation().get$col1().get$y(), v.get$x())), $.$$mul(xfB.get$rotation().get$col2().get$y(), v.get$y()));
    v1x = $.$$sub($.$$add($.$$add(xfB.get$position().get$x(), $.$$mul(xfB.get$rotation().get$col1().get$x(), v.get$x())), $.$$mul(xfB.get$rotation().get$col2().get$x(), v.get$y())), xfA.get$position().get$x());
    v1y = $.$$sub(cy, xfA.get$position().get$y());
    t1 = xfA.get$rotation();
    b = t1.get$col1();
    b1 = t1.get$col2();
    t1 = $.getInterceptor$JSNumber(v1x);
    t2 = $.getInterceptor$JSNumber(v1y);
    cLocaly = $.$$add(t1.$mul(v1x, b1.get$x()), t2.$mul(v1y, b1.get$y()));
    if (typeof cLocaly !== "number")
      return this.collidePolygonAndCircle$5$bailout(1, manifold, polygon, v1y, circle, cLocaly, v1x, b, t1, t2);
    cLocalx = $.$$add(t1.$mul(v1x, b.get$x()), t2.$mul(v1y, b.get$y()));
    if (typeof cLocalx !== "number")
      return this.collidePolygonAndCircle$5$bailout(2, manifold, polygon, 0, circle, cLocaly, 0, 0, 0, 0, cLocalx);
    radius = $.$$add(polygon.get$radius(), circle.get$radius());
    if (typeof radius !== "number")
      return this.collidePolygonAndCircle$5$bailout(3, manifold, polygon, 0, circle, cLocaly, 0, 0, 0, 0, cLocalx, radius);
    vertexCount = polygon.get$vertexCount();
    if (typeof vertexCount !== "number")
      return this.collidePolygonAndCircle$5$bailout(4, manifold, polygon, 0, circle, cLocaly, 0, 0, 0, 0, cLocalx, radius, vertexCount);
    vertices = polygon.get$vertices();
    if (typeof vertices !== "string" && (typeof vertices !== "object" || vertices === null || vertices.constructor !== Array && !vertices.$isJavaScriptIndexingBehavior()))
      return this.collidePolygonAndCircle$5$bailout(5, manifold, polygon, 0, circle, cLocaly, 0, 0, 0, 0, cLocalx, radius, vertexCount, vertices);
    normals = polygon.get$normals();
    if (typeof normals !== "string" && (typeof normals !== "object" || normals === null || normals.constructor !== Array && !normals.$isJavaScriptIndexingBehavior()))
      return this.collidePolygonAndCircle$5$bailout(6, manifold, 0, 0, circle, cLocaly, 0, 0, 0, 0, cLocalx, radius, vertexCount, vertices, normals);
    for (normalIndex = 0, separation = 1e-12, i = 0; i < vertexCount; ++i) {
      if (i >= vertices.length)
        throw $.ioore(i);
      vertex = vertices[i];
      t1 = vertex.get$x();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t2 = vertex.get$y();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (i >= normals.length)
        throw $.ioore(i);
      norm = normals[i];
      s = $.$$add($.$$mul(norm.get$x(), cLocalx - t1), $.$$mul(norm.get$y(), cLocaly - t2));
      t1 = $.getInterceptor$JSNumber(s);
      if (t1.$gt(s, radius) === true)
        return;
      if (t1.$gt(s, separation) === true) {
        separation = s;
        normalIndex = i;
      }
    }
    vertIndex2 = normalIndex + 1;
    vertIndex2 = vertIndex2 < vertexCount ? vertIndex2 : 0;
    t1 = vertices.length;
    if (normalIndex < 0 || normalIndex >= t1)
      throw $.ioore(normalIndex);
    v1 = vertices[normalIndex];
    if (vertIndex2 < 0 || vertIndex2 >= t1)
      throw $.ioore(vertIndex2);
    v2 = vertices[vertIndex2];
    if ($.$$lt(separation, 1.192e-7) === true) {
      manifold.set$pointCount(1);
      manifold.set$type(1);
      if (normalIndex >= normals.length)
        throw $.ioore(normalIndex);
      norm = normals[normalIndex];
      t1 = norm.get$x();
      manifold.get$localNormal().set$x(t1);
      t1 = norm.get$y();
      manifold.get$localNormal().set$y(t1);
      t1 = $.$$mul($.$$add(v1.get$x(), v2.get$x()), 0.5);
      manifold.get$localPoint().set$x(t1);
      t1 = $.$$mul($.$$add(v1.get$y(), v2.get$y()), 0.5);
      manifold.get$localPoint().set$y(t1);
      mpoint = $.$$index(manifold.get$points(), 0);
      t1 = circle.get$position().get$x();
      mpoint.get$localPoint().set$x(t1);
      t1 = circle.get$position().get$y();
      mpoint.get$localPoint().set$y(t1);
      mpoint.get$id().zero$0();
      return;
    }
    t1 = v1.get$x();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t2 = v1.get$y();
    if (typeof t2 !== "number")
      throw $.iae(t2);
    temp2X = $.$$sub(v2.get$x(), t1);
    temp2Y = $.$$sub(v2.get$y(), v1.get$y());
    if (typeof temp2X !== "number")
      throw $.iae(temp2X);
    if (typeof temp2Y !== "number")
      throw $.iae(temp2Y);
    t3 = v2.get$x();
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = v2.get$y();
    if (typeof t4 !== "number")
      throw $.iae(t4);
    temp4X = $.$$sub(v1.get$x(), t3);
    temp4Y = $.$$sub(v1.get$y(), v2.get$y());
    if (typeof temp4X !== "number")
      throw $.iae(temp4X);
    if (typeof temp4Y !== "number")
      throw $.iae(temp4Y);
    if ((cLocalx - t1) * temp2X + (cLocaly - t2) * temp2Y <= 0) {
      t1 = v1.get$x();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      dx = cLocalx - t1;
      t1 = v1.get$y();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      dy = cLocaly - t1;
      if (dx * dx + dy * dy > radius * radius)
        return;
      manifold.set$pointCount(1);
      manifold.set$type(1);
      t1 = v1.get$x();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      manifold.get$localNormal().set$x(cLocalx - t1);
      t2 = v1.get$y();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      manifold.get$localNormal().set$y(cLocaly - t2);
      manifold.get$localNormal().normalize$0();
      manifold.get$localPoint().setFrom$1(v1);
      $.$$index(manifold.get$points(), 0).get$localPoint().setFrom$1(circle.get$position());
      $.$$index(manifold.get$points(), 0).get$id().zero$0();
    } else {
      t1 = v2.get$x();
      if ((cLocalx - t3) * temp4X + (cLocaly - t4) * temp4Y <= 0) {
        if (typeof t1 !== "number")
          throw $.iae(t1);
        dx = cLocalx - t1;
        t1 = v2.get$y();
        if (typeof t1 !== "number")
          throw $.iae(t1);
        dy = cLocaly - t1;
        if (dx * dx + dy * dy > radius * radius)
          return;
        manifold.set$pointCount(1);
        manifold.set$type(1);
        t1 = v2.get$x();
        if (typeof t1 !== "number")
          throw $.iae(t1);
        manifold.get$localNormal().set$x(cLocalx - t1);
        t2 = v2.get$y();
        if (typeof t2 !== "number")
          throw $.iae(t2);
        manifold.get$localNormal().set$y(cLocaly - t2);
        manifold.get$localNormal().normalize$0();
        manifold.get$localPoint().setFrom$1(v2);
        $.$$index(manifold.get$points(), 0).get$localPoint().setFrom$1(circle.get$position());
        $.$$index(manifold.get$points(), 0).get$id().zero$0();
      } else {
        fcx = $.$$mul($.$$add(v1.get$x(), t1), 0.5);
        fcy = $.$$mul($.$$add(v1.get$y(), v2.get$y()), 0.5);
        if (typeof fcx !== "number")
          throw $.iae(fcx);
        if (typeof fcy !== "number")
          throw $.iae(fcy);
        if (normalIndex >= normals.length)
          throw $.ioore(normalIndex);
        norm = normals[normalIndex];
        t2 = norm.get$x();
        if (typeof t2 !== "number")
          throw $.iae(t2);
        t3 = norm.get$y();
        if (typeof t3 !== "number")
          throw $.iae(t3);
        if ((cLocalx - fcx) * t2 + (cLocaly - fcy) * t3 > radius)
          return;
        manifold.set$pointCount(1);
        manifold.set$type(1);
        t1 = manifold.get$localNormal();
        if (normalIndex >= normals.length)
          throw $.ioore(normalIndex);
        t1.setFrom$1(normals[normalIndex]);
        manifold.get$localPoint().set$x(fcx);
        manifold.get$localPoint().set$y(fcy);
        $.$$index(manifold.get$points(), 0).get$localPoint().setFrom$1(circle.get$position());
        $.$$index(manifold.get$points(), 0).get$id().zero$0();
      }
    }
  },
  collidePolygonAndCircle$5$bailout: function(state0, manifold, polygon, v1y, circle, cLocaly, v1x, b, t1, t2, cLocalx, radius, vertexCount, vertices, normals) {
    switch (state0) {
      case 0:
        manifold.set$pointCount(0);
        v = circle.get$position();
        cy = $.$$add($.$$add(xfB.get$position().get$y(), $.$$mul(xfB.get$rotation().get$col1().get$y(), v.get$x())), $.$$mul(xfB.get$rotation().get$col2().get$y(), v.get$y()));
        v1x = $.$$sub($.$$add($.$$add(xfB.get$position().get$x(), $.$$mul(xfB.get$rotation().get$col1().get$x(), v.get$x())), $.$$mul(xfB.get$rotation().get$col2().get$x(), v.get$y())), xfA.get$position().get$x());
        v1y = $.$$sub(cy, xfA.get$position().get$y());
        t1 = xfA.get$rotation();
        b = t1.get$col1();
        b1 = t1.get$col2();
        t1 = $.getInterceptor$JSNumber(v1x);
        t2 = $.getInterceptor$JSNumber(v1y);
        cLocaly = $.$$add(t1.$mul(v1x, b1.get$x()), t2.$mul(v1y, b1.get$y()));
      case 1:
        state0 = 0;
        cLocalx = $.$$add(t1.$mul(v1x, b.get$x()), t2.$mul(v1y, b.get$y()));
      case 2:
        state0 = 0;
        radius = $.$$add(polygon.get$radius(), circle.get$radius());
      case 3:
        state0 = 0;
        vertexCount = polygon.get$vertexCount();
      case 4:
        state0 = 0;
        vertices = polygon.get$vertices();
      case 5:
        state0 = 0;
        normals = polygon.get$normals();
      case 6:
        var v, cy, b1, t3, t4, normalIndex, separation, i, vertex, tempx, tempy, norm, s, t5, vertIndex2, v1, v2, mpoint, tempX, tempY, temp2X, temp2Y, u1, temp3X, temp3Y, temp4X, temp4Y, u2, dx, dy, fcx, fcy, tx, ty;
        state0 = 0;
        for (t1 = $.getInterceptor$JSStringJSArray(vertices), t2 = $.getInterceptor$JSNumber(cLocalx), t3 = $.getInterceptor$JSNumber(cLocaly), t4 = $.getInterceptor$JSStringJSArray(normals), normalIndex = 0, separation = 1e-12, i = 0; $.CONSTANT2.$lt(i, vertexCount); ++i) {
          vertex = t1.$index(vertices, i);
          tempx = t2.$sub(cLocalx, vertex.get$x());
          tempy = t3.$sub(cLocaly, vertex.get$y());
          norm = t4.$index(normals, i);
          s = $.$$add($.$$mul(norm.get$x(), tempx), $.$$mul(norm.get$y(), tempy));
          t5 = $.getInterceptor$JSNumber(s);
          if (t5.$gt(s, radius) === true)
            return;
          if (t5.$gt(s, separation) === true) {
            separation = s;
            normalIndex = i;
          }
        }
        vertIndex2 = normalIndex + 1;
        vertIndex2 = $.CONSTANT2.$lt(vertIndex2, vertexCount) ? vertIndex2 : 0;
        v1 = t1.$index(vertices, normalIndex);
        v2 = t1.$index(vertices, vertIndex2);
        if ($.$$lt(separation, 1.192e-7) === true) {
          manifold.set$pointCount(1);
          manifold.set$type(1);
          norm = t4.$index(normals, normalIndex);
          t1 = norm.get$x();
          manifold.get$localNormal().set$x(t1);
          t1 = norm.get$y();
          manifold.get$localNormal().set$y(t1);
          t1 = $.$$mul($.$$add(v1.get$x(), v2.get$x()), 0.5);
          manifold.get$localPoint().set$x(t1);
          t1 = $.$$mul($.$$add(v1.get$y(), v2.get$y()), 0.5);
          manifold.get$localPoint().set$y(t1);
          mpoint = $.$$index(manifold.get$points(), 0);
          t1 = circle.get$position().get$x();
          mpoint.get$localPoint().set$x(t1);
          t1 = circle.get$position().get$y();
          mpoint.get$localPoint().set$y(t1);
          mpoint.get$id().zero$0();
          return;
        }
        tempX = t2.$sub(cLocalx, v1.get$x());
        tempY = t3.$sub(cLocaly, v1.get$y());
        temp2X = $.$$sub(v2.get$x(), v1.get$x());
        temp2Y = $.$$sub(v2.get$y(), v1.get$y());
        u1 = $.$$add($.$$mul(tempX, temp2X), $.$$mul(tempY, temp2Y));
        temp3X = t2.$sub(cLocalx, v2.get$x());
        temp3Y = t3.$sub(cLocaly, v2.get$y());
        temp4X = $.$$sub(v1.get$x(), v2.get$x());
        temp4Y = $.$$sub(v1.get$y(), v2.get$y());
        u2 = $.$$add($.$$mul(temp3X, temp4X), $.$$mul(temp3Y, temp4Y));
        if ($.$$le(u1, 0) === true) {
          dx = t2.$sub(cLocalx, v1.get$x());
          dy = t3.$sub(cLocaly, v1.get$y());
          if ($.$$gt($.$$add($.$$mul(dx, dx), $.$$mul(dy, dy)), $.$$mul(radius, radius)) === true)
            return;
          manifold.set$pointCount(1);
          manifold.set$type(1);
          t1 = t2.$sub(cLocalx, v1.get$x());
          manifold.get$localNormal().set$x(t1);
          t3 = t3.$sub(cLocaly, v1.get$y());
          manifold.get$localNormal().set$y(t3);
          manifold.get$localNormal().normalize$0();
          manifold.get$localPoint().setFrom$1(v1);
          $.$$index(manifold.get$points(), 0).get$localPoint().setFrom$1(circle.get$position());
          $.$$index(manifold.get$points(), 0).get$id().zero$0();
        } else {
          t1 = $.$$le(u2, 0);
          t5 = v2.get$x();
          if (t1 === true) {
            dx = t2.$sub(cLocalx, t5);
            dy = t3.$sub(cLocaly, v2.get$y());
            if ($.$$gt($.$$add($.$$mul(dx, dx), $.$$mul(dy, dy)), $.$$mul(radius, radius)) === true)
              return;
            manifold.set$pointCount(1);
            manifold.set$type(1);
            t1 = t2.$sub(cLocalx, v2.get$x());
            manifold.get$localNormal().set$x(t1);
            t3 = t3.$sub(cLocaly, v2.get$y());
            manifold.get$localNormal().set$y(t3);
            manifold.get$localNormal().normalize$0();
            manifold.get$localPoint().setFrom$1(v2);
            $.$$index(manifold.get$points(), 0).get$localPoint().setFrom$1(circle.get$position());
            $.$$index(manifold.get$points(), 0).get$id().zero$0();
          } else {
            fcx = $.$$mul($.$$add(v1.get$x(), t5), 0.5);
            fcy = $.$$mul($.$$add(v1.get$y(), v2.get$y()), 0.5);
            tx = t2.$sub(cLocalx, fcx);
            ty = t3.$sub(cLocaly, fcy);
            norm = t4.$index(normals, normalIndex);
            if ($.$$gt($.$$add($.$$mul(tx, norm.get$x()), $.$$mul(ty, norm.get$y())), radius) === true)
              return;
            manifold.set$pointCount(1);
            manifold.set$type(1);
            manifold.get$localNormal().setFrom$1(t4.$index(normals, normalIndex));
            manifold.get$localPoint().set$x(fcx);
            manifold.get$localPoint().set$y(fcy);
            $.$$index(manifold.get$points(), 0).get$localPoint().setFrom$1(circle.get$position());
            $.$$index(manifold.get$points(), 0).get$id().zero$0();
          }
        }
    }
  },
  edgeSeparation$5: function(poly1, xf1, edge1, poly2, xf2) {
    var vertices1, normals1, count2, vertices2, R, v, t5, t6, t8, t10, t11, t13, normal1Worldy, normal1Worldx, R1, t15, normal1x, t18, normal1y, t2, t3, index, minDot, i, a, t4, dot, v3, t7, t9, v1y, t14, t16, t20, v1x, v4, t23, t25, t27, t29, v2y, t31, t33, t35, t37, t39;
    poly1.get$vertexCount();
    vertices1 = poly1.get$vertices();
    normals1 = poly1.get$normals();
    count2 = poly2.get$vertexCount();
    if (typeof count2 !== "number")
      return this.edgeSeparation$5$bailout(3, 0, xf1, edge1, poly2, xf2, vertices1, normals1, count2);
    vertices2 = poly2.get$vertices();
    if (typeof vertices2 !== "string" && (typeof vertices2 !== "object" || vertices2 === null || vertices2.constructor !== Array && !vertices2.$isJavaScriptIndexingBehavior()))
      return this.edgeSeparation$5$bailout(4, 0, xf1, edge1, 0, xf2, vertices1, normals1, count2, vertices2);
    R = xf1.get$rotation();
    if (typeof normals1 !== "string" && (typeof normals1 !== "object" || normals1 === null || normals1.constructor !== Array && !normals1.$isJavaScriptIndexingBehavior()))
      return this.edgeSeparation$5$bailout(2, 0, xf1, edge1, poly2, xf2, vertices1, normals1);
    if (edge1 !== (edge1 | 0))
      throw $.iae(edge1);
    if (edge1 < 0 || edge1 >= normals1.length)
      throw $.ioore(edge1);
    v = normals1[edge1];
    t5 = R.get$col1();
    t6 = t5.get$y();
    t8 = v.get$x();
    if (t6 !== (t6 | 0))
      return this.edgeSeparation$5$bailout(5, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, v, t6, R);
    if (t8 !== (t8 | 0))
      return this.edgeSeparation$5$bailout(6, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, v, t6, R, t8);
    t6 *= t8;
    t10 = R.get$col2();
    t11 = t10.get$y();
    t13 = v.get$y();
    if (t11 !== (t11 | 0))
      return this.edgeSeparation$5$bailout(7, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, v, t11, R, t6);
    if (t13 !== (t13 | 0))
      return this.edgeSeparation$5$bailout(8, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, v, t11, R, t6, t13);
    normal1Worldy = t6 + t11 * t13;
    t5 = t5.get$x();
    if (t5 !== (t5 | 0))
      return this.edgeSeparation$5$bailout(9, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, v, 0, R, t5, 0, normal1Worldy);
    t8 = t5 * t8;
    t10 = t10.get$x();
    if (t10 !== (t10 | 0))
      return this.edgeSeparation$5$bailout(11, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, v, 0, R, t10, 0, normal1Worldy, t8);
    normal1Worldx = t8 + t10 * t13;
    R1 = xf2.get$rotation();
    t8 = R1.get$col1();
    t15 = t8.get$x();
    if (t15 !== (t15 | 0))
      return this.edgeSeparation$5$bailout(13, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, 0, 0, R, 0, 0, normal1Worldy, t15, 0, R1, normal1Worldx);
    t15 = normal1Worldx * t15;
    t8 = t8.get$y();
    if (t8 !== (t8 | 0))
      return this.edgeSeparation$5$bailout(14, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, 0, 0, R, 0, 0, normal1Worldy, t15, 0, R1, normal1Worldx, $.CONSTANT2, t8);
    normal1x = t15 + normal1Worldy * t8;
    t15 = R1.get$col2();
    t18 = t15.get$x();
    if (t18 !== (t18 | 0))
      return this.edgeSeparation$5$bailout(15, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, 0, 0, R, 0, 0, normal1Worldy, t18, 0, R1, normal1Worldx, $.CONSTANT2, 0, normal1x, $.CONSTANT2);
    t18 = normal1Worldx * t18;
    t15 = t15.get$y();
    if (t15 !== (t15 | 0))
      return this.edgeSeparation$5$bailout(16, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, 0, 0, R, 0, 0, normal1Worldy, t18, 0, R1, normal1Worldx, t15, 0, normal1x, $.CONSTANT2);
    normal1y = t18 + normal1Worldy * t15;
    for (t2 = $.getInterceptor$JSStringJSArray(vertices2), t3 = vertices2.length, index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
      if (i >= t3)
        throw $.ioore(i);
      a = vertices2[i];
      t4 = a.get$x();
      if (t4 !== (t4 | 0))
        return this.edgeSeparation$5$bailout(17, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, 0, 0, R, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, normal1x, 0, normal1y, index, minDot, i, t2, a, t4);
      t4 *= normal1x;
      t6 = a.get$y();
      if (t6 !== (t6 | 0))
        return this.edgeSeparation$5$bailout(18, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, 0, t6, R, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, normal1x, 0, normal1y, index, minDot, i, t2, 0, t4);
      dot = t4 + t6 * normal1y;
      if (dot < minDot) {
        minDot = dot;
        index = i;
      }
    }
    if (typeof vertices1 !== "string" && (typeof vertices1 !== "object" || vertices1 === null || vertices1.constructor !== Array && !vertices1.$isJavaScriptIndexingBehavior()))
      return this.edgeSeparation$5$bailout(1, poly1, xf1, edge1, poly2, xf2, vertices1);
    if (edge1 >= vertices1.length)
      throw $.ioore(edge1);
    v3 = vertices1[edge1];
    t3 = xf1.get$position().get$y();
    t5 = R.get$col1().get$y();
    t7 = v3.get$x();
    if (typeof t5 !== "number")
      return this.edgeSeparation$5$bailout(20, 0, xf1, 0, 0, xf2, 0, 0, 0, vertices2, 0, t5, R, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3);
    if (typeof t7 !== "number")
      return this.edgeSeparation$5$bailout(21, 0, xf1, 0, 0, xf2, 0, 0, 0, vertices2, 0, t5, R, t7, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3);
    if (typeof t3 !== "number")
      return this.edgeSeparation$5$bailout(19, 0, xf1, 0, 0, xf2, 0, 0, 0, vertices2, 0, 0, R, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3);
    t3 += t5 * t7;
    t9 = R.get$col2().get$y();
    t11 = v3.get$y();
    if (typeof t9 !== "number")
      return this.edgeSeparation$5$bailout(22, 0, xf1, 0, 0, xf2, 0, 0, 0, vertices2, 0, 0, R, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3, t9);
    if (typeof t11 !== "number")
      return this.edgeSeparation$5$bailout(23, 0, xf1, 0, 0, xf2, 0, 0, 0, vertices2, 0, 0, R, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3, t9, t11);
    v1y = t3 + t9 * t11;
    t3 = xf1.get$position().get$x();
    t14 = R.get$col1().get$x();
    t16 = v3.get$x();
    if (typeof t14 !== "number")
      return this.edgeSeparation$5$bailout(25, 0, 0, 0, 0, xf2, 0, 0, 0, vertices2, 0, 0, R, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3, 0, 0, v1y, t14);
    if (typeof t16 !== "number")
      return this.edgeSeparation$5$bailout(26, 0, 0, 0, 0, xf2, 0, 0, 0, vertices2, 0, 0, R, 0, 0, normal1Worldy, 0, t16, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3, 0, 0, v1y, t14);
    if (typeof t3 !== "number")
      return this.edgeSeparation$5$bailout(24, 0, 0, 0, 0, xf2, 0, 0, 0, vertices2, 0, 0, R, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3, 0, 0, v1y);
    t3 += t14 * t16;
    t18 = R.get$col2().get$x();
    t20 = v3.get$y();
    if (typeof t18 !== "number")
      return this.edgeSeparation$5$bailout(27, 0, 0, 0, 0, xf2, 0, 0, 0, vertices2, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3, 0, 0, v1y, 0, t18);
    if (typeof t20 !== "number")
      return this.edgeSeparation$5$bailout(28, 0, 0, 0, 0, xf2, 0, 0, 0, vertices2, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, t20, 0, 0, 0, index, 0, 0, t2, 0, t3, 0, 0, 0, v1y, 0, t18);
    v1x = t3 + t18 * t20;
    if (index < 0 || index >= vertices2.length)
      throw $.ioore(index);
    v4 = vertices2[index];
    t3 = xf2.get$position().get$y();
    t23 = R1.get$col1().get$y();
    t25 = v4.get$x();
    if (typeof t23 !== "number")
      return this.edgeSeparation$5$bailout(30, 0, 0, 0, 0, xf2, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, t23, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, v1y, 0, 0, v4, v1x);
    if (typeof t25 !== "number")
      return this.edgeSeparation$5$bailout(31, 0, 0, 0, 0, xf2, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, t23, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, v1y, 0, 0, v4, v1x, t25);
    if (typeof t3 !== "number")
      return this.edgeSeparation$5$bailout(29, 0, 0, 0, 0, xf2, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, v1y, 0, 0, v4, v1x);
    t3 += t23 * t25;
    t27 = R1.get$col2().get$y();
    t29 = v4.get$y();
    if (typeof t27 !== "number")
      return this.edgeSeparation$5$bailout(32, 0, 0, 0, 0, xf2, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, v1y, 0, 0, v4, v1x, 0, t27);
    if (typeof t29 !== "number")
      return this.edgeSeparation$5$bailout(33, 0, 0, 0, 0, xf2, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, v1y, 0, 0, v4, v1x, 0, t27, t29);
    v2y = t3 + t27 * t29 - v1y;
    t31 = xf2.get$position().get$x();
    t33 = R1.get$col1().get$x();
    t35 = v4.get$x();
    if (typeof t33 !== "number")
      return this.edgeSeparation$5$bailout(35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v4, v1x, 0, 0, 0, v2y, t31, t33);
    if (typeof t35 !== "number")
      return this.edgeSeparation$5$bailout(36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v4, v1x, 0, 0, 0, v2y, t31, t33, t35);
    if (typeof t31 !== "number")
      return this.edgeSeparation$5$bailout(34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v4, v1x, 0, 0, 0, v2y, t31);
    t31 += t33 * t35;
    t37 = R1.get$col2().get$x();
    t39 = v4.get$y();
    if (typeof t37 !== "number")
      return this.edgeSeparation$5$bailout(37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, 0, normal1Worldx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v4, v1x, 0, 0, 0, v2y, t31, 0, 0, t37);
    if (typeof t39 !== "number")
      return this.edgeSeparation$5$bailout(38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, 0, normal1Worldx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v1x, 0, 0, 0, v2y, t31, 0, 0, t37, t39);
    return (t31 + t37 * t39 - v1x) * normal1Worldx + v2y * normal1Worldy;
  },
  edgeSeparation$5$bailout: function(state0, poly1, xf1, edge1, poly2, xf2, vertices1, normals1, count2, vertices2, v, t5, R, t7, t10, normal1Worldy, t13, t16, R1, normal1Worldx, t19, t20, normal1x, t22, normal1y, index, minDot, i, t2, a, t3, v3, t9, t11, v1y, t14, t18, v4, v1x, t24, t26, t28, v2y, t30, t32, t34, t36, t38) {
    switch (state0) {
      case 0:
        poly1.get$vertexCount();
        vertices1 = poly1.get$vertices();
      case 1:
        state0 = 0;
        normals1 = poly1.get$normals();
      case 2:
        state0 = 0;
        count2 = poly2.get$vertexCount();
      case 3:
        state0 = 0;
        vertices2 = poly2.get$vertices();
      case 4:
        state0 = 0;
        R = xf1.get$rotation();
        v = $.$$index(normals1, edge1);
        t5 = R.get$col1().get$y();
      case 5:
        state0 = 0;
        t7 = v.get$x();
      case 6:
        state0 = 0;
        t7 = $.$$mul(t5, t7);
        t5 = R.get$col2().get$y();
      case 7:
        state0 = 0;
        t10 = v.get$y();
      case 8:
        state0 = 0;
        normal1Worldy = $.$$add(t7, $.$$mul(t5, t10));
        t7 = R.get$col1().get$x();
      case 9:
        state0 = 0;
        t13 = v.get$x();
      case 10:
        state0 = 0;
        t13 = $.$$mul(t7, t13);
        t7 = R.get$col2().get$x();
      case 11:
        state0 = 0;
        t16 = v.get$y();
      case 12:
        state0 = 0;
        normal1Worldx = $.$$add(t13, $.$$mul(t7, t16));
        R1 = xf2.get$rotation();
        t13 = R1.get$col1().get$x();
      case 13:
        state0 = 0;
        t19 = $.getInterceptor$JSNumber(normal1Worldx);
        t13 = t19.$mul(normal1Worldx, t13);
        t20 = R1.get$col1().get$y();
      case 14:
        state0 = 0;
        t22 = $.getInterceptor$JSNumber(normal1Worldy);
        normal1x = $.$$add(t13, t22.$mul(normal1Worldy, t20));
        t13 = R1.get$col2().get$x();
      case 15:
        state0 = 0;
        t13 = t19.$mul(normal1Worldx, t13);
        t19 = R1.get$col2().get$y();
      case 16:
        state0 = 0;
        normal1y = $.$$add(t13, t22.$mul(normal1Worldy, t19));
        t2 = $.getInterceptor$JSStringJSArray(vertices2);
        index = 0;
        minDot = 99999999999999;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT2.$lt(i, count2))
                  break L0;
                a = t2.$index(vertices2, i);
                t3 = a.get$x();
              case 17:
                state0 = 0;
                t3 = $.$$mul(t3, normal1x);
                t5 = a.get$y();
              case 18:
                state0 = 0;
                dot = $.$$add(t3, $.$$mul(t5, normal1y));
                if ($.$$lt(dot, minDot) === true) {
                  minDot = dot;
                  index = i;
                }
                ++i;
            }
        v3 = $.$$index(vertices1, edge1);
        t3 = xf1.get$position().get$y();
      case 19:
        state0 = 0;
        t5 = R.get$col1().get$y();
      case 20:
        state0 = 0;
        t7 = v3.get$x();
      case 21:
        state0 = 0;
        t3 = $.$$add(t3, $.$$mul(t5, t7));
        t9 = R.get$col2().get$y();
      case 22:
        state0 = 0;
        t11 = v3.get$y();
      case 23:
        state0 = 0;
        v1y = $.$$add(t3, $.$$mul(t9, t11));
        t3 = xf1.get$position().get$x();
      case 24:
        state0 = 0;
        t14 = R.get$col1().get$x();
      case 25:
        state0 = 0;
        t16 = v3.get$x();
      case 26:
        state0 = 0;
        t3 = $.$$add(t3, $.$$mul(t14, t16));
        t18 = R.get$col2().get$x();
      case 27:
        state0 = 0;
        t20 = v3.get$y();
      case 28:
        state0 = 0;
        v1x = $.$$add(t3, $.$$mul(t18, t20));
        v4 = t2.$index(vertices2, index);
        t2 = xf2.get$position().get$y();
      case 29:
        state0 = 0;
        t22 = R1.get$col1().get$y();
      case 30:
        state0 = 0;
        t24 = v4.get$x();
      case 31:
        state0 = 0;
        t2 = $.$$add(t2, $.$$mul(t22, t24));
        t26 = R1.get$col2().get$y();
      case 32:
        state0 = 0;
        t28 = v4.get$y();
      case 33:
        state0 = 0;
        v2y = $.$$sub($.$$add(t2, $.$$mul(t26, t28)), v1y);
        t30 = xf2.get$position().get$x();
      case 34:
        state0 = 0;
        t32 = R1.get$col1().get$x();
      case 35:
        state0 = 0;
        t34 = v4.get$x();
      case 36:
        state0 = 0;
        t30 = $.$$add(t30, $.$$mul(t32, t34));
        t36 = R1.get$col2().get$x();
      case 37:
        state0 = 0;
        t38 = v4.get$y();
      case 38:
        var dot;
        state0 = 0;
        return $.$$add($.$$mul($.$$sub($.$$add(t30, $.$$mul(t36, t38)), v1x), normal1Worldx), $.$$mul(v2y, normal1Worldy));
    }
  },
  findMaxSeparation$5: function(results, poly1, xf1, poly2, xf2) {
    var count1, normals1, v, predy, predx, v1, tempy, dx, dy, R, t3, t4, dLocal1x, dLocal1y, edge, maxDot, i, norm, dot, s, prevEdge, sPrev, nextEdge, sNext, t1, bestSeparation, bestEdge, increment, edge0;
    count1 = poly1.get$vertexCount();
    if (typeof count1 !== "number")
      return this.findMaxSeparation$5$bailout(1, results, poly1, xf1, poly2, xf2, count1);
    normals1 = poly1.get$normals();
    if (typeof normals1 !== "string" && (typeof normals1 !== "object" || normals1 === null || normals1.constructor !== Array && !normals1.$isJavaScriptIndexingBehavior()))
      return this.findMaxSeparation$5$bailout(2, results, poly1, xf1, poly2, xf2, count1, normals1);
    v = poly2.get$centroid();
    predy = $.$$add($.$$add(xf2.get$position().get$y(), $.$$mul(xf2.get$rotation().get$col1().get$y(), v.get$x())), $.$$mul(xf2.get$rotation().get$col2().get$y(), v.get$y()));
    predx = $.$$add($.$$add(xf2.get$position().get$x(), $.$$mul(xf2.get$rotation().get$col1().get$x(), v.get$x())), $.$$mul(xf2.get$rotation().get$col2().get$x(), v.get$y()));
    v1 = poly1.get$centroid();
    tempy = $.$$add($.$$add(xf1.get$position().get$y(), $.$$mul(xf1.get$rotation().get$col1().get$y(), v1.get$x())), $.$$mul(xf1.get$rotation().get$col2().get$y(), v1.get$y()));
    dx = $.$$sub(predx, $.$$add($.$$add(xf1.get$position().get$x(), $.$$mul(xf1.get$rotation().get$col1().get$x(), v1.get$x())), $.$$mul(xf1.get$rotation().get$col2().get$x(), v1.get$y())));
    dy = $.$$sub(predy, tempy);
    R = xf1.get$rotation();
    t3 = $.getInterceptor$JSNumber(dx);
    t4 = $.getInterceptor$JSNumber(dy);
    dLocal1x = $.$$add(t3.$mul(dx, R.get$col1().get$x()), t4.$mul(dy, R.get$col1().get$y()));
    if (typeof dLocal1x !== "number")
      return this.findMaxSeparation$5$bailout(3, results, poly1, xf1, poly2, xf2, count1, normals1, dx, dy, dLocal1x, R, t3, t4);
    dLocal1y = $.$$add(t3.$mul(dx, R.get$col2().get$x()), t4.$mul(dy, R.get$col2().get$y()));
    if (typeof dLocal1y !== "number")
      return this.findMaxSeparation$5$bailout(4, results, poly1, xf1, poly2, xf2, count1, normals1, 0, 0, dLocal1x, 0, 0, 0, dLocal1y);
    for (edge = 0, maxDot = 1e-12, i = 0; i < count1; ++i) {
      if (i >= normals1.length)
        throw $.ioore(i);
      norm = normals1[i];
      dot = $.$$add($.$$mul(norm.get$x(), dLocal1x), $.$$mul(norm.get$y(), dLocal1y));
      if ($.$$gt(dot, maxDot) === true) {
        maxDot = dot;
        edge = i;
      }
    }
    s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
    prevEdge = edge - 1;
    prevEdge = prevEdge >= 0 ? prevEdge : count1 - 1;
    sPrev = this.edgeSeparation$5(poly1, xf1, prevEdge, poly2, xf2);
    nextEdge = edge + 1;
    nextEdge = nextEdge < count1 ? nextEdge : 0;
    sNext = this.edgeSeparation$5(poly1, xf1, nextEdge, poly2, xf2);
    t1 = $.getInterceptor$JSNumber(sPrev);
    if (t1.$gt(sPrev, s) === true && t1.$gt(sPrev, sNext) === true) {
      bestSeparation = sPrev;
      bestEdge = prevEdge;
      increment = -1;
    } else {
      if ($.$$gt(sNext, s) === true)
        ;
      else {
        results.edgeIndex = edge;
        results.separation = s;
        return;
      }
      bestSeparation = sNext;
      bestEdge = nextEdge;
      increment = 1;
    }
    if (typeof bestSeparation !== "number")
      return this.findMaxSeparation$5$bailout(5, results, poly1, xf1, poly2, xf2, count1, 0, 0, 0, 0, 0, 0, 0, 0, bestEdge, bestSeparation, increment);
    for (t1 = increment === -1, edge = count1 - 1; true; bestSeparation = s, bestEdge = edge0) {
      if (t1) {
        edge0 = bestEdge - 1;
        edge0 = edge0 >= 0 ? edge0 : edge;
      } else {
        edge0 = bestEdge + 1;
        edge0 = edge0 < count1 ? edge0 : 0;
      }
      s = this.edgeSeparation$5(poly1, xf1, edge0, poly2, xf2);
      if ($.$$gt(s, bestSeparation) === true)
        ;
      else
        break;
    }
    results.edgeIndex = bestEdge;
    results.separation = bestSeparation;
  },
  findMaxSeparation$5$bailout: function(state0, results, poly1, xf1, poly2, xf2, count1, normals1, dx, dy, dLocal1x, R, t3, t4, dLocal1y, bestEdge, bestSeparation, increment) {
    switch (state0) {
      case 0:
        count1 = poly1.get$vertexCount();
      case 1:
        state0 = 0;
        normals1 = poly1.get$normals();
      case 2:
        state0 = 0;
        v = poly2.get$centroid();
        predy = $.$$add($.$$add(xf2.get$position().get$y(), $.$$mul(xf2.get$rotation().get$col1().get$y(), v.get$x())), $.$$mul(xf2.get$rotation().get$col2().get$y(), v.get$y()));
        predx = $.$$add($.$$add(xf2.get$position().get$x(), $.$$mul(xf2.get$rotation().get$col1().get$x(), v.get$x())), $.$$mul(xf2.get$rotation().get$col2().get$x(), v.get$y()));
        v1 = poly1.get$centroid();
        tempy = $.$$add($.$$add(xf1.get$position().get$y(), $.$$mul(xf1.get$rotation().get$col1().get$y(), v1.get$x())), $.$$mul(xf1.get$rotation().get$col2().get$y(), v1.get$y()));
        dx = $.$$sub(predx, $.$$add($.$$add(xf1.get$position().get$x(), $.$$mul(xf1.get$rotation().get$col1().get$x(), v1.get$x())), $.$$mul(xf1.get$rotation().get$col2().get$x(), v1.get$y())));
        dy = $.$$sub(predy, tempy);
        R = xf1.get$rotation();
        t3 = $.getInterceptor$JSNumber(dx);
        t4 = $.getInterceptor$JSNumber(dy);
        dLocal1x = $.$$add(t3.$mul(dx, R.get$col1().get$x()), t4.$mul(dy, R.get$col1().get$y()));
      case 3:
        state0 = 0;
        dLocal1y = $.$$add(t3.$mul(dx, R.get$col2().get$x()), t4.$mul(dy, R.get$col2().get$y()));
      case 4:
        state0 = 0;
        for (t1 = $.getInterceptor$JSStringJSArray(normals1), edge = 0, maxDot = 1e-12, i = 0; $.CONSTANT2.$lt(i, count1); ++i) {
          norm = t1.$index(normals1, i);
          dot = $.$$add($.$$mul(norm.get$x(), dLocal1x), $.$$mul(norm.get$y(), dLocal1y));
          if ($.$$gt(dot, maxDot) === true) {
            maxDot = dot;
            edge = i;
          }
        }
        s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
        prevEdge = edge - 1;
        prevEdge = prevEdge >= 0 ? prevEdge : $.$$sub(count1, 1);
        sPrev = this.edgeSeparation$5(poly1, xf1, prevEdge, poly2, xf2);
        nextEdge = edge + 1;
        nextEdge = $.CONSTANT2.$lt(nextEdge, count1) ? nextEdge : 0;
        sNext = this.edgeSeparation$5(poly1, xf1, nextEdge, poly2, xf2);
        t1 = $.getInterceptor$JSNumber(sPrev);
        if (t1.$gt(sPrev, s) === true && t1.$gt(sPrev, sNext) === true) {
          bestSeparation = sPrev;
          bestEdge = prevEdge;
          increment = -1;
        } else {
          if ($.$$gt(sNext, s) === true)
            ;
          else {
            results.edgeIndex = edge;
            results.separation = s;
            return;
          }
          bestSeparation = sNext;
          bestEdge = nextEdge;
          increment = 1;
        }
      case 5:
        var v, predy, predx, v1, tempy, t1, edge, maxDot, i, norm, dot, s, prevEdge, sPrev, nextEdge, sNext, t2;
        state0 = 0;
        for (t1 = increment === -1, t2 = $.getInterceptor$JSNumber(count1); true; bestSeparation = s, bestEdge = edge) {
          if (t1) {
            t3 = $.getInterceptor$JSNumber(bestEdge);
            edge = $.$$ge(t3.$sub(bestEdge, 1), 0) === true ? t3.$sub(bestEdge, 1) : t2.$sub(count1, 1);
          } else {
            t3 = $.getInterceptor$JSNumber(bestEdge);
            edge = $.$$lt(t3.$add(bestEdge, 1), count1) === true ? t3.$add(bestEdge, 1) : 0;
          }
          s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
          if ($.$$gt(s, bestSeparation) === true)
            ;
          else
            break;
        }
        results.edgeIndex = bestEdge;
        results.separation = bestSeparation;
    }
  },
  findIncidentEdge$6: function(c, poly1, xf1, edge1, poly2, xf2) {
    var normals1, count2, vertices2, normals2, t3, t4, t5, index, minDot, i, t1, dot, i2, t2;
    poly1.get$vertexCount();
    normals1 = poly1.get$normals();
    count2 = poly2.get$vertexCount();
    if (typeof count2 !== "number")
      return this.findIncidentEdge$6$bailout(1, c, xf1, edge1, poly2, xf2, normals1, count2);
    vertices2 = poly2.get$vertices();
    normals2 = poly2.get$normals();
    if (typeof normals2 !== "string" && (typeof normals2 !== "object" || normals2 === null || normals2.constructor !== Array && !normals2.$isJavaScriptIndexingBehavior()))
      return this.findIncidentEdge$6$bailout(2, c, xf1, edge1, 0, xf2, normals1, count2, vertices2, normals2);
    t3 = xf1.get$rotation();
    t4 = $.$$index(normals1, edge1);
    t5 = this.normal1;
    $.Matrix22_mulMatrixAndVectorToOut(t3, t4, t5);
    $.Matrix22_mulTransMatrixAndVectorToOut(xf2.get$rotation(), t5, t5);
    for (index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
      if (i >= normals2.length)
        throw $.ioore(i);
      t1 = normals2[i];
      dot = $.$$add($.$$mul(t5.x, t1.get$x()), $.$$mul(t5.y, t1.get$y()));
      if ($.$$lt(dot, minDot) === true) {
        minDot = dot;
        index = i;
      }
    }
    i2 = index + 1;
    i2 = i2 < count2 ? i2 : 0;
    t1 = $.getInterceptor$JSStringJSArray(vertices2);
    t2 = $.getInterceptor$JSStringJSArray(c);
    $.Transform_mulToOut(xf2, t1.$index(vertices2, index), t2.$index(c, 0).get$v());
    t2.$index(c, 0).get$id().get$features().set$referenceEdge(edge1);
    t2.$index(c, 0).get$id().get$features().set$incidentEdge(index);
    t2.$index(c, 0).get$id().get$features().set$incidentVertex(0);
    $.Transform_mulToOut(xf2, t1.$index(vertices2, i2), t2.$index(c, 1).get$v());
    t2.$index(c, 1).get$id().get$features().set$referenceEdge(edge1);
    t2.$index(c, 1).get$id().get$features().set$incidentEdge(i2);
    t2.$index(c, 1).get$id().get$features().set$incidentVertex(1);
  },
  findIncidentEdge$6$bailout: function(state0, c, xf1, edge1, poly2, xf2, normals1, count2, vertices2, normals2) {
    switch (state0) {
      case 0:
        poly1.get$vertexCount();
        normals1 = poly1.get$normals();
        count2 = poly2.get$vertexCount();
      case 1:
        state0 = 0;
        vertices2 = poly2.get$vertices();
        normals2 = poly2.get$normals();
      case 2:
        var t3, t4, t5, t1, index, minDot, i, t2, dot, i2;
        state0 = 0;
        t3 = xf1.get$rotation();
        t4 = $.$$index(normals1, edge1);
        t5 = this.normal1;
        $.Matrix22_mulMatrixAndVectorToOut(t3, t4, t5);
        $.Matrix22_mulTransMatrixAndVectorToOut(xf2.get$rotation(), t5, t5);
        for (t1 = $.getInterceptor$JSStringJSArray(normals2), index = 0, minDot = 99999999999999, i = 0; $.CONSTANT2.$lt(i, count2); ++i) {
          t2 = t1.$index(normals2, i);
          dot = $.$$add($.$$mul(t5.x, t2.get$x()), $.$$mul(t5.y, t2.get$y()));
          if ($.$$lt(dot, minDot) === true) {
            minDot = dot;
            index = i;
          }
        }
        i2 = index + 1;
        i2 = $.CONSTANT2.$lt(i2, count2) ? i2 : 0;
        t1 = $.getInterceptor$JSStringJSArray(vertices2);
        t2 = $.getInterceptor$JSStringJSArray(c);
        $.Transform_mulToOut(xf2, t1.$index(vertices2, index), t2.$index(c, 0).get$v());
        t2.$index(c, 0).get$id().get$features().set$referenceEdge(edge1);
        t2.$index(c, 0).get$id().get$features().set$incidentEdge(index);
        t2.$index(c, 0).get$id().get$features().set$incidentVertex(0);
        $.Transform_mulToOut(xf2, t1.$index(vertices2, i2), t2.$index(c, 1).get$v());
        t2.$index(c, 1).get$id().get$features().set$referenceEdge(edge1);
        t2.$index(c, 1).get$id().get$features().set$incidentEdge(i2);
        t2.$index(c, 1).get$id().get$features().set$incidentVertex(1);
    }
  },
  collidePolygons$5: function(manifold, polyA, xfA, polyB, xfB) {
    var totalRadius, t2, t1, t3, t4, edge1, xf2, xf1, poly2, poly1, flip, count1, vertices1, t5, t6, t7, t8, frontOffset, sideOffset1, sideOffset2, t9, np, pointCount, i, cp;
    manifold.set$pointCount(0);
    totalRadius = $.$$add(polyA.get$radius(), polyB.get$radius());
    if (typeof totalRadius !== "number")
      return this.collidePolygons$5$bailout(1, manifold, polyA, xfA, totalRadius, polyB, xfB);
    t2 = this.results1;
    this.findMaxSeparation$5(t2, polyA, xfA, polyB, xfB);
    if ($.$$gt(t2.separation, totalRadius) === true)
      return;
    t1 = this.results2;
    this.findMaxSeparation$5(t1, polyB, xfB, polyA, xfA);
    if ($.$$gt(t1.separation, totalRadius) === true)
      return;
    t3 = t1.separation;
    t4 = t2.separation;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    if ($.$$gt(t3, 0.98 * t4 + 0.001) === true) {
      edge1 = t1.edgeIndex;
      manifold.set$type(2);
      xf2 = xfA;
      xf1 = xfB;
      poly2 = polyA;
      poly1 = polyB;
      flip = 1;
    } else {
      edge1 = t2.edgeIndex;
      manifold.set$type(1);
      xf2 = xfB;
      xf1 = xfA;
      poly2 = polyB;
      poly1 = polyA;
      flip = 0;
    }
    t1 = this.incidentEdge;
    this.findIncidentEdge$6(t1, poly1, xf1, edge1, poly2, xf2);
    count1 = poly1.get$vertexCount();
    vertices1 = poly1.get$vertices();
    t2 = this.v11;
    t3 = $.getInterceptor$JSStringJSArray(vertices1);
    t2.setFrom$1(t3.$index(vertices1, edge1));
    t4 = this.v12;
    t5 = $.getInterceptor$JSNumber(edge1);
    t4.setFrom$1($.$$lt(t5.$add(edge1, 1), count1) === true ? t3.$index(vertices1, t5.$add(edge1, 1)) : t3.$index(vertices1, 0));
    t3 = this.localTangent;
    t3.setFrom$1(t4).subLocal$1(t2);
    t3.normalize$0();
    t5 = this.localNormal;
    $.Vector_crossVectorAndNumToOut(t3, 1, t5);
    t6 = this.planePoint;
    t6.setFrom$1(t2).addLocal$1(t4).mulLocal$1(0.5);
    t7 = xf1.get$rotation();
    t8 = this.tangent;
    $.Matrix22_mulMatrixAndVectorToOut(t7, t3, t8);
    t3 = this.normal;
    $.Vector_crossVectorAndNumToOut(t8, 1, t3);
    $.Transform_mulToOut(xf1, t2, t2);
    $.Transform_mulToOut(xf1, t4, t4);
    frontOffset = $.$$add($.$$mul(t3.x, t2.x), $.$$mul(t3.y, t2.y));
    if (typeof frontOffset !== "number")
      return this.collidePolygons$5$bailout(2, manifold, 0, 0, totalRadius, 0, 0, xf2, flip, t3, frontOffset, t1, t2, t4, t5, t6, t8);
    sideOffset1 = $.$$add($.$$negate($.$$add($.$$mul(t8.x, t2.x), $.$$mul(t8.y, t2.y))), totalRadius);
    sideOffset2 = $.$$add($.$$add($.$$mul(t8.x, t4.x), $.$$mul(t8.y, t4.y)), totalRadius);
    t8.negateLocal$0();
    t9 = this.clipPoints1;
    np = $.Collision_clipSegmentToLine(t9, t1, t8, sideOffset1);
    t8.negateLocal$0();
    if (np < 2)
      return;
    t1 = this.clipPoints2;
    if ($.Collision_clipSegmentToLine(t1, t9, t8, sideOffset2) < 2)
      return;
    manifold.get$localNormal().setFrom$1(t5);
    manifold.get$localPoint().setFrom$1(t6);
    for (pointCount = 0, i = 0; i < 2; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = t1[i].get$v();
      if ($.$$le($.$$sub($.$$add($.$$mul(t3.x, t2.get$x()), $.$$mul(t3.y, t2.get$y())), frontOffset), totalRadius) === true) {
        cp = $.$$index(manifold.get$points(), pointCount);
        if (i >= t1.length)
          throw $.ioore(i);
        $.Transform_mulTransToOut(xf2, t1[i].get$v(), cp.get$localPoint());
        t2 = cp.get$id();
        if (i >= t1.length)
          throw $.ioore(i);
        t2.setFrom$1(t1[i].get$id());
        cp.get$id().get$features().set$flip(flip);
        ++pointCount;
      }
    }
    manifold.set$pointCount(pointCount);
  },
  collidePolygons$5$bailout: function(state0, manifold, polyA, xfA, totalRadius, polyB, xfB, xf2, flip, t3, frontOffset, t1, t2, t4, t5, t6, t8) {
    switch (state0) {
      case 0:
        manifold.set$pointCount(0);
        totalRadius = $.$$add(polyA.get$radius(), polyB.get$radius());
      case 1:
        state0 = 0;
        t2 = this.results1;
        this.findMaxSeparation$5(t2, polyA, xfA, polyB, xfB);
        if ($.$$gt(t2.separation, totalRadius) === true)
          return;
        t1 = this.results2;
        this.findMaxSeparation$5(t1, polyB, xfB, polyA, xfA);
        if ($.$$gt(t1.separation, totalRadius) === true)
          return;
        t3 = t1.separation;
        t4 = t2.separation;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        if ($.$$gt(t3, 0.98 * t4 + 0.001) === true) {
          edge1 = t1.edgeIndex;
          manifold.set$type(2);
          xf2 = xfA;
          xf1 = xfB;
          poly2 = polyA;
          poly1 = polyB;
          flip = 1;
        } else {
          edge1 = t2.edgeIndex;
          manifold.set$type(1);
          xf2 = xfB;
          xf1 = xfA;
          poly2 = polyB;
          poly1 = polyA;
          flip = 0;
        }
        t1 = this.incidentEdge;
        this.findIncidentEdge$6(t1, poly1, xf1, edge1, poly2, xf2);
        count1 = poly1.get$vertexCount();
        vertices1 = poly1.get$vertices();
        t2 = this.v11;
        t3 = $.getInterceptor$JSStringJSArray(vertices1);
        t2.setFrom$1(t3.$index(vertices1, edge1));
        t4 = this.v12;
        t5 = $.getInterceptor$JSNumber(edge1);
        t4.setFrom$1($.$$lt(t5.$add(edge1, 1), count1) === true ? t3.$index(vertices1, t5.$add(edge1, 1)) : t3.$index(vertices1, 0));
        t3 = this.localTangent;
        t3.setFrom$1(t4).subLocal$1(t2);
        t3.normalize$0();
        t5 = this.localNormal;
        $.Vector_crossVectorAndNumToOut(t3, 1, t5);
        t6 = this.planePoint;
        t6.setFrom$1(t2).addLocal$1(t4).mulLocal$1(0.5);
        t7 = xf1.get$rotation();
        t8 = this.tangent;
        $.Matrix22_mulMatrixAndVectorToOut(t7, t3, t8);
        t3 = this.normal;
        $.Vector_crossVectorAndNumToOut(t8, 1, t3);
        $.Transform_mulToOut(xf1, t2, t2);
        $.Transform_mulToOut(xf1, t4, t4);
        frontOffset = $.$$add($.$$mul(t3.x, t2.x), $.$$mul(t3.y, t2.y));
      case 2:
        var edge1, xf1, poly2, poly1, count1, vertices1, t7, sideOffset1, sideOffset2, t9, np, pointCount, i, cp;
        state0 = 0;
        sideOffset1 = $.$$add($.$$negate($.$$add($.$$mul(t8.x, t2.x), $.$$mul(t8.y, t2.y))), totalRadius);
        sideOffset2 = $.$$add($.$$add($.$$mul(t8.x, t4.x), $.$$mul(t8.y, t4.y)), totalRadius);
        t8.negateLocal$0();
        t9 = this.clipPoints1;
        np = $.Collision_clipSegmentToLine(t9, t1, t8, sideOffset1);
        t8.negateLocal$0();
        if (np < 2)
          return;
        t1 = this.clipPoints2;
        if ($.Collision_clipSegmentToLine(t1, t9, t8, sideOffset2) < 2)
          return;
        manifold.get$localNormal().setFrom$1(t5);
        manifold.get$localPoint().setFrom$1(t6);
        for (pointCount = 0, i = 0; i < 2; ++i) {
          if (i >= t1.length)
            throw $.ioore(i);
          t2 = t1[i].get$v();
          if ($.$$le($.$$sub($.$$add($.$$mul(t3.x, t2.get$x()), $.$$mul(t3.y, t2.get$y())), frontOffset), totalRadius) === true) {
            cp = $.$$index(manifold.get$points(), pointCount);
            if (i >= t1.length)
              throw $.ioore(i);
            $.Transform_mulTransToOut(xf2, t1[i].get$v(), cp.get$localPoint());
            t2 = cp.get$id();
            if (i >= t1.length)
              throw $.ioore(i);
            t2.setFrom$1(t1[i].get$id());
            cp.get$id().get$features().set$flip(flip);
            ++pointCount;
          }
        }
        manifold.set$pointCount(pointCount);
    }
  },
  Collision$_construct$1: function(pool) {
    var t1, t2;
    t1 = this.incidentEdge;
    t2 = $.getInterceptor$JSArray(t1);
    t2.$indexSet(t1, 0, $.ClipVertex$());
    t2.$indexSet(t1, 1, $.ClipVertex$());
    t1 = this.clipPoints1;
    t2 = $.ClipVertex$();
    if (0 >= t1.length)
      throw $.ioore(0);
    t1[0] = t2;
    t2 = $.ClipVertex$();
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = this.clipPoints2;
    t1 = $.ClipVertex$();
    if (0 >= t2.length)
      throw $.ioore(0);
    t2[0] = t1;
    t1 = $.ClipVertex$();
    if (1 >= t2.length)
      throw $.ioore(1);
    t2[1] = t1;
  }
};

$$.ClipVertex = {"": "Object;v>,id>",
  setFrom$1: function(cv) {
    this.v.setFrom$1(cv.get$v());
    this.id.setFrom$1(cv.get$id());
  }
};

$$.EdgeResults = {"": "Object;separation,edgeIndex"};

$$.ContactID = {"": "Object;features>",
  $eq: function(other) {
    if (other == null)
      return false;
    return $.$$eq(other.get$features(), this.features);
  },
  setFrom$1: function(other) {
    this.features.setFrom$1(other.get$features());
  },
  isEqual$1: function(other) {
    return $.$$eq(other.get$features(), this.features);
  },
  zero$0: function() {
    this.features.zero$0();
  }
};

$$.Distance = {"": "Object;calls,iters,maxIters,simplex,saveA,saveB,closestPoint,searchDirection,temp,normal>",
  distance$3: function(output, cache, input) {
    var proxyA, proxyB, transformA, transformB, t1, vertices, t2, t3, t4, t5, t6, iter, saveCount, i, t7, vertex, duplicate, t8, rA, rB;
    this.calls = this.calls + 1;
    proxyA = input.get$proxyA();
    proxyB = input.get$proxyB();
    transformA = input.get$transformA();
    transformB = input.get$transformB();
    t1 = this.simplex;
    t1.readCache$5(cache, proxyA, transformA, proxyB, transformB);
    vertices = t1.vertices;
    t2 = this.closestPoint;
    t1.getClosestPoint$1(t2);
    t2.get$lengthSquared();
    for (t3 = this.saveB, t4 = this.saveA, t5 = this.searchDirection, t6 = this.temp, iter = 0; iter < this.maxIters;) {
      saveCount = t1.count;
      for (i = 0; $.CONSTANT2.$lt(i, saveCount); ++i) {
        if (i >= vertices.length)
          throw $.ioore(i);
        t7 = vertices[i].get$indexA();
        if (i >= t4.length)
          throw $.ioore(i);
        t4[i] = t7;
        t7 = vertices[i].get$indexB();
        if (i >= t3.length)
          throw $.ioore(i);
        t3[i] = t7;
      }
      switch (t1.count) {
        case 1:
          break;
        case 2:
          t1.solve2$0();
          break;
        case 3:
          t1.solve3$0();
          break;
        default:
          return;
      }
      if ($.$$eq(t1.count, 3) === true)
        break;
      t1.getClosestPoint$1(t2);
      t2.get$lengthSquared();
      t1.getSearchDirection$1(t5);
      if ($.$$lt(t5.get$lengthSquared(), 1.4208639999999999e-14) === true)
        break;
      t7 = t1.count;
      if (t7 !== (t7 | 0))
        throw $.iae(t7);
      if (t7 < 0 || t7 >= vertices.length)
        throw $.ioore(t7);
      vertex = vertices[t7];
      $.Matrix22_mulTransMatrixAndVectorToOut(transformA.get$rotation(), t5.negateLocal$0(), t6);
      vertex.set$indexA(proxyA.getSupport$1(t6));
      $.Transform_mulToOut(transformA, $.$$index(proxyA.get$vertices(), vertex.get$indexA()), vertex.get$wA());
      $.Matrix22_mulTransMatrixAndVectorToOut(transformB.get$rotation(), t5.negateLocal$0(), t6);
      vertex.set$indexB(proxyB.getSupport$1(t6));
      $.Transform_mulToOut(transformB, $.$$index(proxyB.get$vertices(), vertex.get$indexB()), vertex.get$wB());
      vertex.get$w().setFrom$1(vertex.get$wB()).subLocal$1(vertex.get$wA());
      ++iter;
      this.iters = this.iters + 1;
      for (i = 0; duplicate = false, $.CONSTANT2.$lt(i, saveCount); ++i) {
        t7 = vertex.get$indexA();
        if (i >= t4.length)
          throw $.ioore(i);
        if ($.$$eq(t7, t4[i]) === true) {
          t7 = vertex.get$indexB();
          if (i >= t3.length)
            throw $.ioore(i);
          t8 = $.$$eq(t7, t3[i]) === true;
          t7 = t8;
        } else
          t7 = false;
        if (t7) {
          duplicate = true;
          break;
        }
      }
      if (duplicate)
        break;
      t1.count = $.$$add(t1.count, 1);
    }
    this.maxIters = $.max(this.maxIters, iter);
    t1.getWitnessPoints$2(output.get$pointA(), output.get$pointB());
    output.set$distance(Math.sqrt($.checkNum($.MathBox_distanceSquared(output.get$pointA(), output.get$pointB()))));
    output.set$iterations(iter);
    t1.writeCache$1(cache);
    if (input.get$useRadii() === true) {
      rA = proxyA.get$radius();
      rB = proxyB.get$radius();
      t1 = $.getInterceptor$JSNumber(rA);
      if ($.$$gt(output.get$distance(), t1.$add(rA, rB)) === true && $.$$gt(output.get$distance(), 1.192e-7) === true) {
        output.set$distance($.$$sub(output.get$distance(), t1.$add(rA, rB)));
        t2 = this.normal;
        t2.setFrom$1(output.get$pointB()).subLocal$1(output.get$pointA());
        t2.normalize$0();
        t6.setFrom$1(t2).mulLocal$1(rA);
        output.get$pointA().addLocal$1(t6);
        t6.setFrom$1(t2).mulLocal$1(rB);
        output.get$pointB().subLocal$1(t6);
      } else {
        output.get$pointA().addLocal$1(output.get$pointB()).mulLocal$1(0.5);
        output.get$pointB().setFrom$1(output.get$pointA());
        output.set$distance(0);
      }
    }
  },
  get$distance: function() {
    return new $.BoundClosure$3(this, "distance$3");
  }
};

$$.DistanceInput = {"": "Object;proxyA=,proxyB=,transformA>,transformB>,useRadii>"};

$$.DistanceOutput = {"": "Object;pointA>,pointB>,distance=,iterations<",
  distance$3: function(arg0, arg1, arg2) {
    return this.distance.call$3(arg0, arg1, arg2);
  }
};

$$.DistanceProxy = {"": "Object;vertices>,count=,radius=",
  setFromShape$1: function(shape) {
    var t1, i, t2, t3;
    t1 = shape.get$type();
    if (typeof t1 !== "number")
      return this.setFromShape$1$bailout(1, shape, t1);
    if (t1 === 0) {
      t1 = this.vertices;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1[0].setFrom$1(shape.get$position());
      this.count = 1;
      this.radius = shape.get$radius();
    } else {
      t1 = shape.get$type();
      if (typeof t1 !== "number")
        return this.setFromShape$1$bailout(2, shape, t1);
      if (t1 === 1) {
        this.count = shape.get$vertexCount();
        this.radius = shape.get$radius();
        t1 = this.vertices;
        i = 0;
        while (true) {
          t2 = this.count;
          if (typeof t2 !== "number")
            return this.setFromShape$1$bailout(3, shape, t1, i, t2);
          if (!(i < t2))
            break;
          if (i >= t1.length)
            throw $.ioore(i);
          t2 = t1[i];
          t3 = shape.get$vertices();
          if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
            return this.setFromShape$1$bailout(4, shape, t1, i, t2, t3);
          if (i >= t3.length)
            throw $.ioore(i);
          t2.setFrom$1(t3[i]);
          ++i;
        }
      }
    }
  },
  setFromShape$1$bailout: function(state0, shape, t1, i, t2, t3) {
    switch (state0) {
      case 0:
        t1 = shape.get$type();
      case 1:
        state0 = 0;
      default:
        if (state0 === 0 && $.$$eq(t1, 0) === true) {
          t1 = this.vertices;
          if (0 >= t1.length)
            throw $.ioore(0);
          t1[0].setFrom$1(shape.get$position());
          this.count = 1;
          this.radius = shape.get$radius();
        } else
          switch (state0) {
            case 0:
              t1 = shape.get$type();
            case 2:
              state0 = 0;
            default:
              if (state0 === 4 || state0 === 3 || state0 === 0 && $.$$eq(t1, 1) === true)
                switch (state0) {
                  case 0:
                    this.count = shape.get$vertexCount();
                    this.radius = shape.get$radius();
                    t1 = this.vertices;
                    i = 0;
                  default:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            t2 = this.count;
                          case 3:
                            state0 = 0;
                            if (!$.CONSTANT2.$lt(i, t2))
                              break L0;
                            if (i >= t1.length)
                              throw $.ioore(i);
                            t2 = t1[i];
                            t3 = shape.get$vertices();
                          case 4:
                            state0 = 0;
                            t2.setFrom$1($.$$index(t3, i));
                            ++i;
                        }
                }
          }
    }
  },
  getSupport$1: function(direction) {
    var t1, t2, t3, t4, t6, t9, bestValue, bestIndex, i, value;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = t3.get$x();
    t6 = direction.x;
    if (typeof t4 !== "number")
      return this.getSupport$1$bailout(1, direction, t4, t1, t3);
    if (typeof t6 !== "number")
      return this.getSupport$1$bailout(2, direction, t4, t1, t3, t6);
    t4 *= t6;
    t3 = t3.get$y();
    t9 = direction.y;
    if (typeof t3 !== "number")
      return this.getSupport$1$bailout(3, direction, 0, t1, t3, t4);
    if (typeof t9 !== "number")
      return this.getSupport$1$bailout(4, direction, 0, t1, t3, t4, t9);
    bestValue = t4 + t3 * t9;
    bestIndex = 0;
    i = 1;
    while (true) {
      t3 = this.count;
      if (typeof t3 !== "number")
        return this.getSupport$1$bailout(5, direction, 0, t1, t3, 0, 0, bestIndex, bestValue, i);
      if (!(i < t3))
        break;
      if (i >= t2)
        throw $.ioore(i);
      t3 = t1[i];
      t4 = t3.get$x();
      if (typeof t4 !== "number")
        return this.getSupport$1$bailout(6, direction, t4, t1, t3, 0, 0, bestIndex, bestValue, i);
      t4 *= t6;
      t3 = t3.get$y();
      if (typeof t3 !== "number")
        return this.getSupport$1$bailout(8, direction, 0, t1, t3, t4, 0, bestIndex, bestValue, i);
      value = t4 + t3 * t9;
      if (value > bestValue) {
        bestValue = value;
        bestIndex = i;
      }
      ++i;
    }
    return bestIndex;
  },
  getSupport$1$bailout: function(state0, direction, t3, t1, t2, t5, t7, bestIndex, bestValue, i) {
    switch (state0) {
      case 0:
        t1 = this.vertices;
        if (0 >= t1.length)
          throw $.ioore(0);
        t2 = t1[0];
        t3 = t2.get$x();
      case 1:
        state0 = 0;
        t5 = direction.x;
      case 2:
        state0 = 0;
        t5 = $.$$mul(t3, t5);
        t2 = t2.get$y();
      case 3:
        state0 = 0;
        t7 = direction.y;
      case 4:
        state0 = 0;
        bestValue = $.$$add(t5, $.$$mul(t2, t7));
        bestIndex = 0;
        i = 1;
      default:
        var value;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this.count;
              case 5:
                state0 = 0;
                if (!$.CONSTANT2.$lt(i, t2))
                  break L0;
                if (i >= t1.length)
                  throw $.ioore(i);
                t2 = t1[i];
                t3 = t2.get$x();
              case 6:
                state0 = 0;
                t5 = direction.x;
              case 7:
                state0 = 0;
                t5 = $.$$mul(t3, t5);
                t2 = t2.get$y();
              case 8:
                state0 = 0;
                t7 = direction.y;
              case 9:
                state0 = 0;
                value = $.$$add(t5, $.$$mul(t2, t7));
                if ($.$$gt(value, bestValue) === true) {
                  bestValue = value;
                  bestIndex = i;
                }
                ++i;
            }
        return bestIndex;
    }
  },
  DistanceProxy$0: function() {
    var t1, i, t2;
    for (t1 = this.vertices, i = 0; i < t1.length; ++i) {
      t2 = $.Vector$(0, 0);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.Features = {"": "Object;referenceEdge=,incidentEdge=,incidentVertex=,flip=",
  setFrom$1: function(f) {
    this.referenceEdge = f.get$referenceEdge();
    this.incidentEdge = f.get$incidentEdge();
    this.incidentVertex = f.get$incidentVertex();
    this.flip = f.get$flip();
  },
  $eq: function(other) {
    if (other == null)
      return false;
    return $.$$eq(this.referenceEdge, other.get$referenceEdge()) === true && $.$$eq(this.incidentEdge, other.get$incidentEdge()) === true && $.$$eq(this.incidentVertex, other.get$incidentVertex()) === true && $.$$eq(this.flip, other.get$flip()) === true;
  },
  toString$0: function() {
    return "Features: (" + $.S(this.flip) + ", " + $.S(this.incidentEdge) + ", " + $.S(this.incidentVertex) + " " + $.S(this.referenceEdge) + ")";
  },
  zero$0: function() {
    this.referenceEdge = 0;
    this.incidentEdge = 0;
    this.incidentVertex = 0;
    this.flip = 0;
  }
};

$$.Manifold = {"": "Object;points>,localNormal>,localPoint>,type=,pointCount=",
  setFrom$1: function(other) {
    var t1, i, t2, t3;
    t1 = this.points;
    i = 0;
    while (true) {
      t2 = other.get$pointCount();
      if (typeof t2 !== "number")
        return this.setFrom$1$bailout0(1, other, t2, t1, i);
      if (!(i < t2))
        break;
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = t1[i];
      t3 = other.get$points();
      if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
        return this.setFrom$1$bailout0(2, other, t2, t1, i, t3);
      if (i >= t3.length)
        throw $.ioore(i);
      t2.setFrom$1(t3[i]);
      ++i;
    }
    this.type = other.get$type();
    this.localNormal.setFrom$1(other.get$localNormal());
    this.localPoint.setFrom$1(other.get$localPoint());
    this.pointCount = other.get$pointCount();
  },
  setFrom$1$bailout0: function(state0, other, t2, t1, i, t3) {
    switch (state0) {
      case 0:
        t1 = this.points;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = other.get$pointCount();
              case 1:
                state0 = 0;
                if (!$.CONSTANT2.$lt(i, t2))
                  break L0;
                if (i >= t1.length)
                  throw $.ioore(i);
                t2 = t1[i];
                t3 = other.get$points();
              case 2:
                state0 = 0;
                t2.setFrom$1($.$$index(t3, i));
                ++i;
            }
        this.type = other.get$type();
        this.localNormal.setFrom$1(other.get$localNormal());
        this.localPoint.setFrom$1(other.get$localPoint());
        this.pointCount = other.get$pointCount();
    }
  },
  Manifold$0: function() {
    var t1, i, t2;
    for (t1 = this.points, i = 0; i < 2; ++i) {
      t2 = $.ManifoldPoint$();
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.ManifoldPoint = {"": "Object;localPoint>,normalImpulse=,tangentImpulse=,id>",
  setFrom$1: function(other) {
    this.localPoint.setFrom$1(other.get$localPoint());
    this.normalImpulse = other.get$normalImpulse();
    this.tangentImpulse = other.get$tangentImpulse();
    this.id.setFrom$1(other.get$id());
  }
};

$$.Simplex = {"": "Object;v1,v2,v3,vertices>,count=,e13,e23,e12,case2,case22,case3,case33",
  readCache$5: function(cache, proxyA, transformA, proxyB, transformB) {
    var t1, i, v, wALocal, wBLocal, metric1, metric2, t2;
    this.count = cache.get$count();
    for (t1 = this.vertices, i = 0; $.CONSTANT2.$lt(i, this.count); ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      v = t1[i];
      v.set$indexA($.$$index(cache.get$indexA(), i));
      v.set$indexB($.$$index(cache.get$indexB(), i));
      wALocal = $.$$index(proxyA.get$vertices(), v.get$indexA());
      wBLocal = $.$$index(proxyB.get$vertices(), v.get$indexB());
      $.Transform_mulToOut(transformA, wALocal, v.get$wA());
      $.Transform_mulToOut(transformB, wBLocal, v.get$wB());
      v.get$w().setFrom$1(v.get$wB()).subLocal$1(v.get$wA());
      v.set$a(0);
    }
    if ($.$$gt(this.count, 1) === true) {
      metric1 = cache.get$metric();
      metric2 = this.getMetric$0();
      if (typeof metric1 !== "number")
        throw $.iae(metric1);
      t2 = $.getInterceptor$JSNumber(metric2);
      if (t2.$lt(metric2, 0.5 * metric1) === true || $.CONSTANT4.$lt(2 * metric1, metric2) || t2.$lt(metric2, 1.192e-7) === true)
        this.count = 0;
    }
    if ($.$$eq(this.count, 0) === true) {
      if (0 >= t1.length)
        throw $.ioore(0);
      v = t1[0];
      v.set$indexA(0);
      v.set$indexB(0);
      wALocal = $.$$index(proxyA.get$vertices(), 0);
      wBLocal = $.$$index(proxyB.get$vertices(), 0);
      $.Transform_mulToOut(transformA, wALocal, v.get$wA());
      $.Transform_mulToOut(transformB, wBLocal, v.get$wB());
      v.get$w().setFrom$1(v.get$wB()).subLocal$1(v.get$wA());
      this.count = 1;
    }
  },
  writeCache$1: function(cache) {
    var t1, i, t2;
    cache.set$metric(this.getMetric$0());
    cache.set$count(this.count);
    for (t1 = this.vertices, i = 0; $.CONSTANT2.$lt(i, this.count); ++i) {
      t2 = cache.get$indexA();
      if (i >= t1.length)
        throw $.ioore(i);
      $.$$indexSet(t2, i, t1[i].get$indexA());
      t2 = cache.get$indexB();
      if (i >= t1.length)
        throw $.ioore(i);
      $.$$indexSet(t2, i, t1[i].get$indexB());
    }
  },
  getSearchDirection$1: function(out) {
    var t1, t2, t3;
    switch (this.count) {
      case 1:
        out.setFrom$1(this.v1.w).negateLocal$0();
        return;
      case 2:
        t1 = this.e12;
        t2 = t1.setFrom$1(this.v2.w);
        t3 = this.v1.w;
        t2.subLocal$1(t3);
        out.setFrom$1(t3).negateLocal$0();
        if ($.$$gt($.$$sub($.$$mul(t1.x, out.y), $.$$mul(t1.y, out.x)), 0) === true)
          $.Vector_crossNumAndVectorToOut(1, t1, out);
        else
          $.Vector_crossVectorAndNumToOut(t1, 1, out);
        break;
      default:
        out.setZero$0();
        return;
    }
  },
  getClosestPoint$1: function(out) {
    var t1, t2, t3, t4;
    switch (this.count) {
      case 0:
        out.setZero$0();
        return;
      case 1:
        out.setFrom$1(this.v1.w);
        return;
      case 2:
        t1 = this.case22;
        t2 = this.v2;
        t1.setFrom$1(t2.w).mulLocal$1(t2.a);
        t3 = this.case2;
        t4 = this.v1;
        t3.setFrom$1(t4.w).mulLocal$1(t4.a).addLocal$1(t1);
        out.setFrom$1(t3);
        return;
      case 3:
        out.setZero$0();
        return;
      default:
        out.setZero$0();
        return;
    }
  },
  getWitnessPoints$2: function(pA, pB) {
    var t1, t2, t3, t4, t5;
    switch (this.count) {
      case 0:
        break;
      case 1:
        t1 = this.v1;
        pA.setFrom$1(t1.wA);
        pB.setFrom$1(t1.wB);
        break;
      case 2:
        t1 = this.case2;
        t2 = this.v1;
        t1.setFrom$1(t2.wA).mulLocal$1(t2.a);
        t3 = this.v2;
        pA.setFrom$1(t3.wA).mulLocal$1(t3.a).addLocal$1(t1);
        t1.setFrom$1(t2.wB).mulLocal$1(t2.a);
        pB.setFrom$1(t3.wB).mulLocal$1(t3.a).addLocal$1(t1);
        break;
      case 3:
        t1 = this.v1;
        pA.setFrom$1(t1.wA).mulLocal$1(t1.a);
        t2 = this.case3;
        t3 = this.v2;
        t2.setFrom$1(t3.wA).mulLocal$1(t3.a);
        t4 = this.case33;
        t5 = this.v3;
        t4.setFrom$1(t5.wA).mulLocal$1(t5.a);
        pA.addLocal$1(t2).addLocal$1(t4);
        pB.setFrom$1(pA);
        break;
      default:
        break;
    }
  },
  getMetric$0: function() {
    var t1, t2, t3;
    switch (this.count) {
      case 0:
        return 0;
      case 1:
        return 0;
      case 2:
        return Math.sqrt($.checkNum($.MathBox_distanceSquared(this.v1.w, this.v2.w)));
      case 3:
        t1 = this.case3;
        t2 = t1.setFrom$1(this.v2.w);
        t3 = this.v1.w;
        t2.subLocal$1(t3);
        t2 = this.case33;
        t2.setFrom$1(this.v3.w).subLocal$1(t3);
        return $.$$sub($.$$mul(t1.x, t2.y), $.$$mul(t1.y, t2.x));
      default:
        return 0;
    }
  },
  solve2$0: function() {
    var t1, w1, t2, w2, t3, t4, t6, t8, t10, d12_2, d12_1, inv_d12;
    t1 = this.v1;
    w1 = t1.w;
    t2 = this.v2;
    w2 = t2.w;
    t3 = this.e12;
    t3.setFrom$1(w2).subLocal$1(w1);
    t4 = w1.x;
    t6 = t3.x;
    if (typeof t4 !== "number")
      return this.solve2$0$bailout(1, t4, t1, w1, t2, w2, t3);
    if (typeof t6 !== "number")
      return this.solve2$0$bailout(2, t4, t1, w1, t2, w2, t3, t6);
    t4 *= t6;
    t8 = w1.y;
    t10 = t3.y;
    if (typeof t8 !== "number")
      return this.solve2$0$bailout(3, t8, t1, 0, t2, w2, t3, t4);
    if (typeof t10 !== "number")
      return this.solve2$0$bailout(4, t8, t1, 0, t2, w2, t3, t4, t10);
    d12_2 = -(t4 + t8 * t10);
    if (d12_2 <= 0) {
      t1.a = 1;
      this.count = 1;
      return;
    }
    t4 = w2.x;
    if (typeof t4 !== "number")
      return this.solve2$0$bailout(5, $.CONSTANT4, t1, 0, t2, w2, t3, 0, 0, d12_2, t4);
    t6 = t4 * t6;
    t4 = w2.y;
    if (typeof t4 !== "number")
      return this.solve2$0$bailout(7, $.CONSTANT4, t1, 0, t2, 0, t3, 0, 0, d12_2, t4, t6);
    d12_1 = t6 + t4 * t10;
    if (d12_1 <= 0) {
      t2.a = 1;
      this.count = 1;
      t1.setFrom$1(t2);
      return;
    }
    inv_d12 = 1 / (d12_1 + d12_2);
    t1.a = d12_1 * inv_d12;
    t2.a = d12_2 * inv_d12;
    this.count = 2;
  },
  solve2$0$bailout: function(state0, t4, t1, w1, t2, w2, t3, t6, t9, d12_2, t5, t7, t10, d12_1, inv_d12) {
    switch (state0) {
      case 0:
        t1 = this.v1;
        w1 = t1.w;
        t2 = this.v2;
        w2 = t2.w;
        t3 = this.e12;
        t3.setFrom$1(w2).subLocal$1(w1);
        t4 = w1.x;
      case 1:
        state0 = 0;
        t6 = t3.x;
      case 2:
        state0 = 0;
        t6 = $.$$mul(t4, t6);
        t4 = w1.y;
      case 3:
        state0 = 0;
        t9 = t3.y;
      case 4:
        state0 = 0;
        d12_2 = $.$$negate($.$$add(t6, $.$$mul(t4, t9)));
        t4 = $.getInterceptor$JSNumber(d12_2);
        if (t4.$le(d12_2, 0) === true) {
          t1.a = 1;
          this.count = 1;
          return;
        }
        t5 = w2.x;
      case 5:
        state0 = 0;
        t7 = t3.x;
      case 6:
        state0 = 0;
        t7 = $.$$mul(t5, t7);
        t5 = w2.y;
      case 7:
        state0 = 0;
        t10 = t3.y;
      case 8:
        state0 = 0;
        d12_1 = $.$$add(t7, $.$$mul(t5, t10));
        t3 = $.getInterceptor$JSNumber(d12_1);
        if (t3.$le(d12_1, 0) === true) {
          t2.a = 1;
          this.count = 1;
          t1.setFrom$1(t2);
          return;
        }
        t5 = t3.$add(d12_1, d12_2);
        if (typeof t5 !== "number")
          throw $.iae(t5);
        inv_d12 = 1 / t5;
      case 9:
        state0 = 0;
        t1.a = t3.$mul(d12_1, inv_d12);
        t2.a = t4.$mul(d12_2, inv_d12);
        this.count = 2;
    }
  },
  solve3$0: function() {
    var t1, w1, t2, w2, t3, w3, t4, t5, t7, t9, t11, w1e12, w2e12, d12_2, t15, t17, t19, t21, w1e13, w3e13, d13_2, t25, t27, t29, t30, t32, w2e23, t35, w3e23, d23_2, t38, t40, n123, d123_1, t43, d123_2, d123_3, inv_d12, inv_d13, inv_d23, inv_d123;
    t1 = this.v1;
    w1 = t1.w;
    t2 = this.v2;
    w2 = t2.w;
    t3 = this.v3;
    w3 = t3.w;
    t4 = this.e12;
    t4.setFrom$1(w2).subLocal$1(w1);
    t5 = w1.x;
    t7 = t4.x;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(1, t1, w1, t2, w2, t3, w3, t4, t5);
    if (typeof t7 !== "number")
      return this.solve3$0$bailout(2, t1, w1, t2, w2, t3, w3, t4, t5, t7);
    t5 *= t7;
    t9 = w1.y;
    t11 = t4.y;
    if (typeof t9 !== "number")
      return this.solve3$0$bailout(3, t1, w1, t2, w2, t3, w3, t4, t9, t5);
    if (typeof t11 !== "number")
      return this.solve3$0$bailout(4, t1, w1, t2, w2, t3, w3, t4, t9, t5, t11);
    w1e12 = t5 + t9 * t11;
    t5 = w2.x;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(5, t1, w1, t2, w2, t3, w3, t4, 0, t5, 0, w1e12);
    t7 = t5 * t7;
    t5 = w2.y;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(7, t1, w1, t2, w2, t3, w3, t4, 0, t5, 0, w1e12, t7);
    w2e12 = t7 + t5 * t11;
    d12_2 = -w1e12;
    t7 = this.e13;
    t7.setFrom$1(w3).subLocal$1(w1);
    t15 = w1.x;
    t17 = t7.x;
    if (typeof t15 !== "number")
      return this.solve3$0$bailout(9, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, t15);
    if (typeof t17 !== "number")
      return this.solve3$0$bailout(10, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, t15, t17);
    t15 *= t17;
    t19 = w1.y;
    t21 = t7.y;
    if (typeof t19 !== "number")
      return this.solve3$0$bailout(11, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, t19, t15);
    if (typeof t21 !== "number")
      return this.solve3$0$bailout(12, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, t19, t15, t21);
    w1e13 = t15 + t19 * t21;
    t15 = w3.x;
    if (typeof t15 !== "number")
      return this.solve3$0$bailout(13, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, t15, 0, w1e13);
    t17 = t15 * t17;
    t15 = w3.y;
    if (typeof t15 !== "number")
      return this.solve3$0$bailout(15, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, t15, 0, w1e13, t17);
    w3e13 = t17 + t15 * t21;
    d13_2 = -w1e13;
    t17 = this.e23;
    t17.setFrom$1(w3).subLocal$1(w2);
    t25 = w2.x;
    t27 = t17.x;
    if (typeof t25 !== "number")
      return this.solve3$0$bailout(17, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, t17, 0, t25, w3e13, d13_2);
    if (typeof t27 !== "number")
      return this.solve3$0$bailout(18, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, t17, 0, t25, w3e13, d13_2, t27);
    t29 = t25 * t27;
    t30 = w2.y;
    t32 = t17.y;
    if (typeof t30 !== "number")
      return this.solve3$0$bailout(19, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, t17, 0, t30, w3e13, d13_2, t29);
    if (typeof t32 !== "number")
      return this.solve3$0$bailout(20, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, t17, 0, t30, w3e13, d13_2, t29, t32);
    w2e23 = t29 + t30 * t32;
    t29 = w3.x;
    if (typeof t29 !== "number")
      return this.solve3$0$bailout(21, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, t17, 0, 0, w3e13, d13_2, t29, 0, w2e23);
    t27 = t29 * t27;
    t35 = w3.y;
    if (typeof t35 !== "number")
      return this.solve3$0$bailout(23, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, t17, 0, 0, w3e13, d13_2, t35, 0, w2e23, t27);
    w3e23 = t27 + t35 * t32;
    d23_2 = -w2e23;
    t27 = t4.x;
    t38 = t7.y;
    if (typeof t27 !== "number")
      return this.solve3$0$bailout(25, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, 0, 0, 0, w3e13, d13_2, 0, 0, 0, t27, 0, w3e23, d23_2);
    if (typeof t38 !== "number")
      return this.solve3$0$bailout(26, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, 0, 0, 0, w3e13, d13_2, 0, 0, 0, t27, 0, w3e23, d23_2, t38);
    t38 = t27 * t38;
    t4 = t4.y;
    t40 = t7.x;
    if (typeof t4 !== "number")
      return this.solve3$0$bailout(27, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, 0, 0, 0, w3e13, d13_2, 0, 0, 0, 0, 0, w3e23, d23_2, t38);
    if (typeof t40 !== "number")
      return this.solve3$0$bailout(28, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, 0, 0, w2e12, d12_2, 0, 0, 0, 0, 0, 0, 0, w3e13, d13_2, 0, 0, 0, 0, 0, w3e23, d23_2, t38, t40);
    n123 = t38 - t4 * t40;
    d123_1 = n123 * (t25 * t35 - t30 * t29);
    t38 = w1.y;
    if (typeof t38 !== "number")
      return this.solve3$0$bailout(34, t1, w1, t2, w2, t3, w3, 0, 0, 0, 0, 0, 0, 0, w2e12, d12_2, 0, 0, 0, 0, 0, 0, 0, w3e13, d13_2, 0, 0, 0, 0, 0, w3e23, d23_2, 0, 0, n123, 0, 0, $.CONSTANT4, d123_1, t29, t38);
    t29 *= t38;
    t43 = w1.x;
    if (typeof t43 !== "number")
      return this.solve3$0$bailout(36, t1, w1, t2, w2, t3, 0, 0, 0, 0, 0, 0, 0, 0, w2e12, d12_2, 0, 0, 0, 0, 0, 0, 0, w3e13, d13_2, 0, 0, 0, 0, 0, w3e23, d23_2, 0, 0, n123, 0, 0, $.CONSTANT4, d123_1, t35, t29, t43);
    d123_2 = n123 * (t29 - t35 * t43);
    d123_3 = n123 * (t43 * t30 - t38 * t25);
    if (d12_2 <= 0 && d13_2 <= 0) {
      t1.a = 1;
      this.count = 1;
      return;
    }
    if (w2e12 > 0 && d12_2 > 0 && d123_3 <= 0) {
      inv_d12 = 1 / (w2e12 + d12_2);
      t1.a = w2e12 * inv_d12;
      t2.a = d12_2 * inv_d12;
      this.count = 2;
      return;
    }
    if (w3e13 > 0 && d13_2 > 0 && d123_2 <= 0) {
      inv_d13 = 1 / (w3e13 + d13_2);
      t1.a = w3e13 * inv_d13;
      t3.a = d13_2 * inv_d13;
      this.count = 2;
      t2.setFrom$1(t3);
      return;
    }
    if (w2e12 <= 0 && d23_2 <= 0) {
      t2.a = 1;
      this.count = 1;
      t1.setFrom$1(t2);
      return;
    }
    if (w3e13 <= 0 && w3e23 <= 0) {
      t3.a = 1;
      this.count = 1;
      t1.setFrom$1(t3);
      return;
    }
    if (w3e23 > 0 && d23_2 > 0 && d123_1 <= 0) {
      inv_d23 = 1 / (w3e23 + d23_2);
      t2.a = w3e23 * inv_d23;
      t3.a = d23_2 * inv_d23;
      this.count = 2;
      t1.setFrom$1(t3);
      return;
    }
    inv_d123 = 1 / (d123_1 + d123_2 + d123_3);
    t1.a = d123_1 * inv_d123;
    t2.a = d123_2 * inv_d123;
    t3.a = d123_3 * inv_d123;
    this.count = 3;
  },
  solve3$0$bailout: function(state0, t1, w1, t2, w2, t3, w3, t4, t5, t7, t10, w1e12, t13, t16, w2e12, d12_2, t18, t20, t23, w1e13, t26, t29, t31, w3e13, d13_2, t33, t36, w2e23, t39, t42, w3e23, d23_2, t45, t47, n123, t50, t53, t55, d123_1, t56, t58, t61, t63, d123_2, t65, t68, inv_d12, inv_d13, inv_d23, d123_3, inv_d123) {
    switch (state0) {
      case 0:
        t1 = this.v1;
        w1 = t1.w;
        t2 = this.v2;
        w2 = t2.w;
        t3 = this.v3;
        w3 = t3.w;
        t4 = this.e12;
        t4.setFrom$1(w2).subLocal$1(w1);
        t5 = w1.x;
      case 1:
        state0 = 0;
        t7 = t4.x;
      case 2:
        state0 = 0;
        t7 = $.$$mul(t5, t7);
        t5 = w1.y;
      case 3:
        state0 = 0;
        t10 = t4.y;
      case 4:
        state0 = 0;
        w1e12 = $.$$add(t7, $.$$mul(t5, t10));
        t7 = w2.x;
      case 5:
        state0 = 0;
        t13 = t4.x;
      case 6:
        state0 = 0;
        t13 = $.$$mul(t7, t13);
        t7 = w2.y;
      case 7:
        state0 = 0;
        t16 = t4.y;
      case 8:
        state0 = 0;
        w2e12 = $.$$add(t13, $.$$mul(t7, t16));
        d12_2 = $.$$negate(w1e12);
        t13 = this.e13;
        t13.setFrom$1(w3).subLocal$1(w1);
        t18 = w1.x;
      case 9:
        state0 = 0;
        t20 = t13.x;
      case 10:
        state0 = 0;
        t20 = $.$$mul(t18, t20);
        t18 = w1.y;
      case 11:
        state0 = 0;
        t23 = t13.y;
      case 12:
        state0 = 0;
        w1e13 = $.$$add(t20, $.$$mul(t18, t23));
        t20 = w3.x;
      case 13:
        state0 = 0;
        t26 = t13.x;
      case 14:
        state0 = 0;
        t26 = $.$$mul(t20, t26);
        t20 = w3.y;
      case 15:
        state0 = 0;
        t29 = t13.y;
      case 16:
        state0 = 0;
        w3e13 = $.$$add(t26, $.$$mul(t20, t29));
        d13_2 = $.$$negate(w1e13);
        t26 = this.e23;
        t26.setFrom$1(w3).subLocal$1(w2);
        t31 = w2.x;
      case 17:
        state0 = 0;
        t33 = t26.x;
      case 18:
        state0 = 0;
        t33 = $.$$mul(t31, t33);
        t31 = w2.y;
      case 19:
        state0 = 0;
        t36 = t26.y;
      case 20:
        state0 = 0;
        w2e23 = $.$$add(t33, $.$$mul(t31, t36));
        t33 = w3.x;
      case 21:
        state0 = 0;
        t39 = t26.x;
      case 22:
        state0 = 0;
        t39 = $.$$mul(t33, t39);
        t33 = w3.y;
      case 23:
        state0 = 0;
        t42 = t26.y;
      case 24:
        state0 = 0;
        w3e23 = $.$$add(t39, $.$$mul(t33, t42));
        d23_2 = $.$$negate(w2e23);
        t39 = t4.x;
      case 25:
        state0 = 0;
        t45 = t13.y;
      case 26:
        state0 = 0;
        t45 = $.$$mul(t39, t45);
        t4 = t4.y;
      case 27:
        state0 = 0;
        t47 = t13.x;
      case 28:
        state0 = 0;
        n123 = $.$$sub(t45, $.$$mul(t4, t47));
        t45 = w2.x;
      case 29:
        state0 = 0;
        t50 = w3.y;
      case 30:
        state0 = 0;
        t50 = $.$$mul(t45, t50);
        t45 = w2.y;
      case 31:
        state0 = 0;
        t53 = w3.x;
      case 32:
        state0 = 0;
        t55 = $.getInterceptor$JSNumber(n123);
        d123_1 = t55.$mul(n123, $.$$sub(t50, $.$$mul(t45, t53)));
        t56 = w3.x;
      case 33:
        state0 = 0;
        t58 = w1.y;
      case 34:
        state0 = 0;
        t58 = $.$$mul(t56, t58);
        t56 = w3.y;
      case 35:
        state0 = 0;
        t61 = w1.x;
      case 36:
        state0 = 0;
        d123_2 = t55.$mul(n123, $.$$sub(t58, $.$$mul(t56, t61)));
        t63 = w1.x;
      case 37:
        state0 = 0;
        t65 = w2.y;
      case 38:
        state0 = 0;
        t65 = $.$$mul(t63, t65);
        t63 = w1.y;
      case 39:
        state0 = 0;
        t68 = w2.x;
      case 40:
        state0 = 0;
        d123_3 = t55.$mul(n123, $.$$sub(t65, $.$$mul(t63, t68)));
        t4 = $.getInterceptor$JSNumber(d12_2);
        if (t4.$le(d12_2, 0) === true && $.$$le(d13_2, 0) === true) {
          t1.a = 1;
          this.count = 1;
          return;
        }
        t5 = $.getInterceptor$JSNumber(w2e12);
      case 41:
        if (state0 === 41 || state0 === 0 && t5.$gt(w2e12, 0) === true && t4.$gt(d12_2, 0) === true && $.$$le(d123_3, 0) === true)
          switch (state0) {
            case 0:
              t3 = t5.$add(w2e12, d12_2);
              if (typeof t3 !== "number")
                throw $.iae(t3);
              inv_d12 = 1 / t3;
            case 41:
              state0 = 0;
              t1.a = t5.$mul(w2e12, inv_d12);
              t2.a = t4.$mul(d12_2, inv_d12);
              this.count = 2;
              return;
          }
        t4 = $.getInterceptor$JSNumber(w3e13);
      case 42:
        if (state0 === 42 || state0 === 0 && t4.$gt(w3e13, 0) === true && $.$$gt(d13_2, 0) === true && $.$$le(d123_2, 0) === true)
          switch (state0) {
            case 0:
              t5 = t4.$add(w3e13, d13_2);
              if (typeof t5 !== "number")
                throw $.iae(t5);
              inv_d13 = 1 / t5;
            case 42:
              state0 = 0;
              t1.a = t4.$mul(w3e13, inv_d13);
              t3.a = $.$$mul(d13_2, inv_d13);
              this.count = 2;
              t2.setFrom$1(t3);
              return;
          }
        if (t5.$le(w2e12, 0) === true && $.$$le(d23_2, 0) === true) {
          t2.a = 1;
          this.count = 1;
          t1.setFrom$1(t2);
          return;
        }
        if (t4.$le(w3e13, 0) === true && $.$$le(w3e23, 0) === true) {
          t3.a = 1;
          this.count = 1;
          t1.setFrom$1(t3);
          return;
        }
        t4 = $.getInterceptor$JSNumber(w3e23);
      case 43:
        if (state0 === 43 || state0 === 0 && t4.$gt(w3e23, 0) === true && $.$$gt(d23_2, 0) === true && $.$$le(d123_1, 0) === true)
          switch (state0) {
            case 0:
              t5 = t4.$add(w3e23, d23_2);
              if (typeof t5 !== "number")
                throw $.iae(t5);
              inv_d23 = 1 / t5;
            case 43:
              state0 = 0;
              t2.a = t4.$mul(w3e23, inv_d23);
              t3.a = $.$$mul(d23_2, inv_d23);
              this.count = 2;
              t1.setFrom$1(t3);
              return;
          }
        t4 = $.getInterceptor$JSNumber(d123_1);
        t5 = $.$$add(t4.$add(d123_1, d123_2), d123_3);
        if (typeof t5 !== "number")
          throw $.iae(t5);
        inv_d123 = 1 / t5;
      case 44:
        state0 = 0;
        t1.a = t4.$mul(d123_1, inv_d123);
        t2.a = $.$$mul(d123_2, inv_d123);
        t3.a = $.$$mul(d123_3, inv_d123);
        this.count = 3;
    }
  },
  Simplex$0: function() {
    var t1, t2, t3;
    t1 = this.vertices;
    t2 = this.v1;
    t3 = t1.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = t2;
    t2 = this.v2;
    if (1 >= t3)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = this.v3;
    if (2 >= t3)
      throw $.ioore(2);
    t1[2] = t2;
  }
};

$$.SimplexCache = {"": "Object;metric=,count=,indexA>,indexB>",
  setFrom$1: function(sc) {
    var t1 = this.indexA;
    $.setRange(t1, 0, $.length(t1), sc.get$indexA());
    t1 = this.indexB;
    $.setRange(t1, 0, $.length(t1), sc.get$indexB());
    this.metric = sc.get$metric();
    this.count = sc.get$count();
  },
  SimplexCache$0: function() {
    var t1, t3, t5, t6, i;
    t1 = this.indexA;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.SimplexCache$0$bailout(1, t1);
    t3 = this.indexB;
    if (typeof t3 !== "object" || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.$isJavaScriptIndexingBehavior())
      return this.SimplexCache$0$bailout(2, t1, t3, $.CONSTANT1);
    t5 = t1.length;
    t6 = t3.length;
    i = 0;
    for (; i < 3; ++i) {
      if (i >= t5)
        throw $.ioore(i);
      t1[i] = 2147483647;
      if (i >= t6)
        throw $.ioore(i);
      t3[i] = 2147483647;
    }
  },
  SimplexCache$0$bailout: function(state0, t1, t4, t3) {
    switch (state0) {
      case 0:
        t1 = this.indexA;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSArray(t1);
        t4 = this.indexB;
      case 2:
        var t6, i;
        state0 = 0;
        t6 = $.getInterceptor$JSArray(t4);
        i = 0;
        for (; i < 3; ++i) {
          t3.$indexSet(t1, i, 2147483647);
          t6.$indexSet(t4, i, 2147483647);
        }
    }
  }
};

$$.SimplexVertex = {"": "Object;wA>,wB>,w>,a=,indexA=,indexB=",
  setFrom$1: function(sv) {
    this.wA.setFrom$1(sv.get$wA());
    this.wB.setFrom$1(sv.get$wB());
    this.w.setFrom$1(sv.get$w());
    this.a = sv.get$a();
    this.indexA = sv.get$indexA();
    this.indexB = sv.get$indexB();
  },
  toString$0: function() {
    return "wA: " + $.S(this.wA) + ", wB: " + $.S(this.wB) + ", w: " + $.S(this.w);
  }
};

$$.TimeOfImpact = {"": "Object;cache,distanceInput,xfA,xfB,distanceOutput,fcn,indexes,sweepA>,sweepB>,pool",
  timeOfImpact$2: function(output, input) {
    var t1, proxyA, proxyB, t3, t4, tMax, t6, t8, target, t10, t11, t12, t2, t5, t7, t9, t13, iter, t14, t20, pushBackIter, done, s2, t15, s1, a2, a1, rootIterCount, t, s;
    t1 = $.TimeOfImpact_toiCalls;
    if (typeof t1 !== "number")
      return this.timeOfImpact$2$bailout(1, output, input, t1);
    $.TimeOfImpact_toiCalls = t1 + 1;
    output.set$state(0);
    output.set$t(input.get$tMax());
    proxyA = input.get$proxyA();
    proxyB = input.get$proxyB();
    t3 = this.sweepA;
    t3.setFrom$1(input.get$sweepA());
    t4 = this.sweepB;
    t4.setFrom$1(input.get$sweepB());
    t3.normalize$0();
    t4.normalize$0();
    tMax = input.get$tMax();
    if (tMax !== (tMax | 0))
      return this.timeOfImpact$2$bailout(2, output, input, 0, t3, t4, tMax, proxyA, proxyB);
    t6 = proxyA.get$radius();
    t8 = proxyB.get$radius();
    if (typeof t6 !== "number")
      return this.timeOfImpact$2$bailout(3, output, input, 0, t3, t4, tMax, proxyA, proxyB, t6);
    if (typeof t8 !== "number")
      return this.timeOfImpact$2$bailout(4, output, input, 0, t3, t4, tMax, proxyA, proxyB, t6, t8);
    target = $.max(0.005, t6 + t8 - 0.015);
    t10 = this.cache;
    t10.count = 0;
    t11 = input.get$proxyA();
    t12 = this.distanceInput;
    t12.proxyA = t11;
    t12.proxyB = input.get$proxyB();
    t12.useRadii = false;
    for (t1 = this.fcn, t2 = this.indexes, t5 = target + 0.00125, t6 = target - 0.00125, t7 = this.distanceOutput, t8 = this.xfA, t9 = this.xfB, t11 = this.pool, t13 = 0, iter = 0; true;) {
      t3.getTransform$2(t8, t13);
      t4.getTransform$2(t9, t13);
      t12.transformA = t8;
      t12.transformB = t9;
      t11.distance.distance$3(t7, t10, t12);
      t14 = t7.distance;
      if (typeof t14 !== "number")
        return this.timeOfImpact$2$bailout(5, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, t14, t10, t12, t13);
      if (t14 <= 0) {
        output.set$state(2);
        output.set$t(0);
        break;
      }
      if (t14 < t5) {
        output.set$state(3);
        output.set$t(t13);
        break;
      }
      t1.initialize$6(t10, proxyA, t3, proxyB, t4, t13);
      for (t20 = tMax, pushBackIter = 0; done = false, true;) {
        s2 = t1.findMinSeparation$2(t2, t20);
        if (typeof s2 !== "number")
          return this.timeOfImpact$2$bailout(7, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, 0, t10, t12, t13, t20, pushBackIter, s2);
        if (s2 > t5) {
          output.set$state(4);
          output.set$t(tMax);
          done = true;
          break;
        }
        if (s2 > t6) {
          t13 = t20;
          done = false;
          break;
        }
        t14 = t2.length;
        if (0 >= t14)
          throw $.ioore(0);
        t15 = t2[0];
        if (1 >= t14)
          throw $.ioore(1);
        s1 = t1.evaluate$3(t15, t2[1], t13);
        if (typeof s1 !== "number")
          return this.timeOfImpact$2$bailout(8, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, 0, t10, t12, t13, t20, pushBackIter, s2, s1);
        if (s1 < t6) {
          output.set$state(1);
          output.set$t(t13);
          done = true;
          break;
        }
        if (s1 <= t5) {
          output.set$state(3);
          output.set$t(t13);
          done = true;
          break;
        }
        for (a2 = t20, a1 = t13, rootIterCount = 0; true;) {
          t = (rootIterCount & 1) === 1 ? a1 + (target - s1) * (a2 - a1) / (s2 - s1) : 0.5 * (a1 + a2);
          t14 = t2.length;
          if (0 >= t14)
            throw $.ioore(0);
          t15 = t2[0];
          if (1 >= t14)
            throw $.ioore(1);
          s = t1.evaluate$3(t15, t2[1], t);
          if (typeof s !== "number")
            return this.timeOfImpact$2$bailout(10, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, 0, t10, t12, t13, t20, pushBackIter, s2, s1, rootIterCount, a1, a2, 0, t, s);
          t14 = $.CONSTANT4.abs$0(s - target);
          if (typeof t14 !== "number")
            return this.timeOfImpact$2$bailout(11, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, $.CONSTANT4, t10, t12, t13, t20, pushBackIter, s2, s1, rootIterCount, a1, a2, 0, t, s, t14);
          if (t14 < 0.00125) {
            t20 = t;
            break;
          }
          if (s > target) {
            a1 = t;
            s1 = s;
          } else {
            a2 = t;
            s2 = s;
          }
          if (a1 !== (a1 | 0))
            return this.timeOfImpact$2$bailout(12, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, 0, t10, t12, t13, t20, pushBackIter, s2, s1, rootIterCount, a1, a2);
          ++rootIterCount;
          t15 = $.TimeOfImpact_toiRootIters;
          if (typeof t15 !== "number")
            return this.timeOfImpact$2$bailout(13, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, 0, t10, t12, t13, t20, pushBackIter, s2, s1, rootIterCount, a1, a2, 0, 0, 0, t15);
          $.TimeOfImpact_toiRootIters = t15 + 1;
          if (rootIterCount === 50)
            break;
        }
        if (t20 !== (t20 | 0))
          return this.timeOfImpact$2$bailout(14, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, 0, t10, t12, t13, t20, pushBackIter, 0, 0, rootIterCount);
        $.TimeOfImpact_toiMaxRootIters = $.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
        ++pushBackIter;
        if (pushBackIter === 8) {
          done = false;
          break;
        }
      }
      ++iter;
      t14 = $.TimeOfImpact_toiIters;
      if (typeof t14 !== "number")
        return this.timeOfImpact$2$bailout(15, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, t14, t10, t12, t13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, done);
      $.TimeOfImpact_toiIters = t14 + 1;
      if (done)
        break;
      if (iter === 1000) {
        output.set$state(1);
        output.set$t(t13);
        break;
      }
    }
    $.TimeOfImpact_toiMaxIters = $.max($.TimeOfImpact_toiMaxIters, iter);
  },
  timeOfImpact$2$bailout: function(state0, output, input, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, t14, t10, t12, t13, t20, pushBackIter, s2, s1, rootIterCount, a1, a2, t16, t, s, t15, done) {
    switch (state0) {
      case 0:
        t1 = $.TimeOfImpact_toiCalls;
      case 1:
        state0 = 0;
        $.TimeOfImpact_toiCalls = $.$$add(t1, 1);
        output.set$state(0);
        output.set$t(input.get$tMax());
        proxyA = input.get$proxyA();
        proxyB = input.get$proxyB();
        t3 = this.sweepA;
        t3.setFrom$1(input.get$sweepA());
        t4 = this.sweepB;
        t4.setFrom$1(input.get$sweepB());
        t3.normalize$0();
        t4.normalize$0();
        tMax = input.get$tMax();
      case 2:
        state0 = 0;
        t6 = proxyA.get$radius();
      case 3:
        state0 = 0;
        t8 = proxyB.get$radius();
      case 4:
        state0 = 0;
        target = $.max(0.005, $.$$sub($.$$add(t6, t8), 0.015));
        t10 = this.cache;
        t10.count = 0;
        t11 = input.get$proxyA();
        t12 = this.distanceInput;
        t12.proxyA = t11;
        t12.proxyB = input.get$proxyB();
        t12.useRadii = false;
        t1 = this.fcn;
        t2 = this.indexes;
        t5 = target + 0.00125;
        t6 = target - 0.00125;
        t7 = this.distanceOutput;
        t8 = this.xfA;
        t9 = this.xfB;
        t11 = this.pool;
        t13 = 0;
        iter = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t3.getTransform$2(t8, t13);
                t4.getTransform$2(t9, t13);
                t12.transformA = t8;
                t12.transformB = t9;
                t11.distance.distance$3(t7, t10, t12);
                t14 = t7.distance;
              case 5:
                state0 = 0;
                if ($.$$le(t14, 0) === true) {
                  output.set$state(2);
                  output.set$t(0);
                  break L0;
                }
                t14 = t7.distance;
              case 6:
                state0 = 0;
                if ($.$$lt(t14, t5) === true) {
                  output.set$state(3);
                  output.set$t(t13);
                  break L0;
                }
                t1.initialize$6(t10, proxyA, t3, proxyB, t4, t13);
                t20 = tMax;
                pushBackIter = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        done = false;
                        if (!true)
                          break L1;
                        s2 = t1.findMinSeparation$2(t2, t20);
                      case 7:
                        state0 = 0;
                        t14 = $.getInterceptor$JSNumber(s2);
                        if (t14.$gt(s2, t5) === true) {
                          output.set$state(4);
                          output.set$t(tMax);
                          done = true;
                          break L1;
                        }
                        if (t14.$gt(s2, t6) === true) {
                          t13 = t20;
                          done = false;
                          break L1;
                        }
                        t14 = t2.length;
                        if (0 >= t14)
                          throw $.ioore(0);
                        t15 = t2[0];
                        if (1 >= t14)
                          throw $.ioore(1);
                        s1 = t1.evaluate$3(t15, t2[1], t13);
                      case 8:
                        state0 = 0;
                        t14 = $.getInterceptor$JSNumber(s1);
                        if (t14.$lt(s1, t6) === true) {
                          output.set$state(1);
                          output.set$t(t13);
                          done = true;
                          break L1;
                        }
                        if (t14.$le(s1, t5) === true) {
                          output.set$state(3);
                          output.set$t(t13);
                          done = true;
                          break L1;
                        }
                        a2 = t20;
                        a1 = t13;
                        rootIterCount = 0;
                      default:
                        L2:
                          while (true)
                            switch (state0) {
                              case 0:
                                if (!true)
                                  break L2;
                                t14 = $.getInterceptor$JSNumber(a1);
                              case 9:
                                if (state0 === 9 || state0 === 0 && (rootIterCount & 1) === 1)
                                  switch (state0) {
                                    case 0:
                                      if (typeof s1 !== "number")
                                        throw $.iae(s1);
                                      t15 = $.$$sub(a2, a1);
                                      if (typeof t15 !== "number")
                                        throw $.iae(t15);
                                      t16 = $.$$sub(s2, s1);
                                      if (typeof t16 !== "number")
                                        throw $.iae(t16);
                                      t16 = (target - s1) * t15 / t16;
                                    case 9:
                                      state0 = 0;
                                      t = t14.$add(a1, t16);
                                  }
                                else {
                                  t14 = t14.$add(a1, a2);
                                  if (typeof t14 !== "number")
                                    throw $.iae(t14);
                                  t = 0.5 * t14;
                                }
                                t14 = t2.length;
                                if (0 >= t14)
                                  throw $.ioore(0);
                                t15 = t2[0];
                                if (1 >= t14)
                                  throw $.ioore(1);
                                s = t1.evaluate$3(t15, t2[1], t);
                              case 10:
                                state0 = 0;
                                t14 = $.getInterceptor$JSNumber(s);
                                t15 = $.abs(t14.$sub(s, target));
                              case 11:
                                state0 = 0;
                                if ($.$$lt(t15, 0.00125) === true) {
                                  t20 = t;
                                  break L2;
                                }
                                if (t14.$gt(s, target) === true) {
                                  a1 = t;
                                  s1 = s;
                                } else {
                                  a2 = t;
                                  s2 = s;
                                }
                              case 12:
                                state0 = 0;
                                ++rootIterCount;
                                t15 = $.TimeOfImpact_toiRootIters;
                              case 13:
                                state0 = 0;
                                $.TimeOfImpact_toiRootIters = $.$$add(t15, 1);
                                if (rootIterCount === 50)
                                  break L2;
                            }
                      case 14:
                        state0 = 0;
                        $.TimeOfImpact_toiMaxRootIters = $.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
                        ++pushBackIter;
                        if (pushBackIter === 8) {
                          done = false;
                          break L1;
                        }
                    }
                ++iter;
                t14 = $.TimeOfImpact_toiIters;
              case 15:
                state0 = 0;
                $.TimeOfImpact_toiIters = $.$$add(t14, 1);
                if (done)
                  break L0;
                if (iter === 1000) {
                  output.set$state(1);
                  output.set$t(t13);
                  break L0;
                }
            }
        $.TimeOfImpact_toiMaxIters = $.max($.TimeOfImpact_toiMaxIters, iter);
    }
  },
  TimeOfImpact$_construct$1: function(argPool) {
    var t1, t2;
    t1 = this.indexes;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 0;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    $.TimeOfImpact_toiCalls = 0;
    $.TimeOfImpact_toiIters = 0;
    $.TimeOfImpact_toiMaxIters = 0;
    $.TimeOfImpact_toiRootIters = 0;
    $.TimeOfImpact_toiMaxRootIters = 0;
  }
};

$$.SeparationFunction = {"": "Object;proxyA=,proxyB=,type=,localPoint>,axis,sweepA>,sweepB>,localPointA,localPointB,pointA>,pointB>,localPointA1,localPointA2,normal>,localPointB1,localPointB2,axisA,axisB,temp,xfa,xfb",
  initialize$6: function(cache, argProxyA, argSweepA, argProxyB, argSweepB, t1) {
    var count, t3, t4, t5, t2, t6, t8, t9, t11, t13, t7, t12, t14, t15, t16, t10, t17, t18, t20, t21, s, t19;
    this.proxyA = argProxyA;
    this.proxyB = argProxyB;
    count = cache.count;
    this.sweepA = argSweepA;
    this.sweepB = argSweepB;
    t3 = this.sweepA;
    t4 = this.xfa;
    t3.getTransform$2(t4, t1);
    t3 = this.sweepB;
    t5 = this.xfb;
    t3.getTransform$2(t5, t1);
    if (typeof count !== "number")
      return this.initialize$6$bailout(1, cache, argSweepA, argSweepB, t1, count);
    if (count === 1) {
      this.type = 0;
      t1 = this.localPointA;
      t2 = this.proxyA.get$vertices();
      t6 = cache.indexA;
      if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior()))
        return this.initialize$6$bailout(3, cache, 0, 0, t1, 0, t4, t5, t2, t6);
      if (0 >= t6.length)
        throw $.ioore(0);
      t6 = t6[0];
      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
        return this.initialize$6$bailout(2, cache, 0, 0, t1, 0, t4, t5, t2);
      if (t6 !== (t6 | 0))
        throw $.iae(t6);
      if (t6 < 0 || t6 >= t2.length)
        throw $.ioore(t6);
      t1.setFrom$1(t2[t6]);
      t8 = this.localPointB;
      t9 = this.proxyB.get$vertices();
      t11 = cache.indexB;
      if (typeof t11 !== "string" && (typeof t11 !== "object" || t11 === null || t11.constructor !== Array && !t11.$isJavaScriptIndexingBehavior()))
        return this.initialize$6$bailout(5, 0, 0, 0, t1, 0, t4, t5, 0, 0, t9, t8, t11);
      if (0 >= t11.length)
        throw $.ioore(0);
      t11 = t11[0];
      if (typeof t9 !== "string" && (typeof t9 !== "object" || t9 === null || t9.constructor !== Array && !t9.$isJavaScriptIndexingBehavior()))
        return this.initialize$6$bailout(4, cache, 0, 0, t1, 0, t4, t5, 0, 0, t9, t8);
      if (t11 !== (t11 | 0))
        throw $.iae(t11);
      if (t11 < 0 || t11 >= t9.length)
        throw $.ioore(t11);
      t8.setFrom$1(t9[t11]);
      t13 = this.pointA;
      $.Transform_mulToOut(t4, t1, t13);
      t1 = this.pointB;
      $.Transform_mulToOut(t5, t8, t1);
      t8 = this.axis;
      t8.setFrom$1(t1).subLocal$1(t13);
      return t8.normalize$0();
    } else {
      t1 = cache.indexA;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
        return this.initialize$6$bailout(6, cache, 0, 0, t1, 0, t4, t5);
      t3 = $.getInterceptor$JSStringJSArray(t1);
      t6 = t1.length;
      if (0 >= t6)
        throw $.ioore(0);
      t7 = t1[0];
      if (1 >= t6)
        throw $.ioore(1);
      t8 = $.$$eq(t7, t1[1]) === true;
      t9 = cache.indexB;
      if (typeof t9 !== "string" && (typeof t9 !== "object" || t9 === null || t9.constructor !== Array && !t9.$isJavaScriptIndexingBehavior()))
        return this.initialize$6$bailout(7, 0, 0, 0, t1, 0, t4, t5, 0, t8, 0, 0, 0, t3, t9);
      t11 = this.pointA;
      t12 = this.axis;
      t13 = this.temp;
      t14 = this.pointB;
      t15 = this.localPoint;
      t16 = this.normal;
      if (t8) {
        this.type = 2;
        t2 = this.localPointB1;
        t6 = this.proxyB.get$vertices();
        t8 = $.getInterceptor$JSStringJSArray(t9);
        if (0 >= t9.length)
          throw $.ioore(0);
        t10 = t9[0];
        if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior()))
          return this.initialize$6$bailout(8, 0, 0, 0, t1, 0, t4, t5, t2, t6, t11, 0, t13, t3, t9, t12, t16, t15, t14);
        if (t10 !== (t10 | 0))
          throw $.iae(t10);
        if (t10 < 0 || t10 >= t6.length)
          throw $.ioore(t10);
        t2.setFrom$1(t6[t10]);
        t17 = this.localPointB2;
        t18 = this.proxyB.get$vertices();
        if (1 >= t9.length)
          throw $.ioore(1);
        t20 = t9[1];
        if (typeof t18 !== "string" && (typeof t18 !== "object" || t18 === null || t18.constructor !== Array && !t18.$isJavaScriptIndexingBehavior()))
          return this.initialize$6$bailout(9, 0, 0, 0, t1, 0, t4, t5, t2, 0, t11, 0, t13, t3, t9, t12, t16, t15, t14, t17, t8, t18);
        if (t20 !== (t20 | 0))
          throw $.iae(t20);
        if (t20 < 0 || t20 >= t18.length)
          throw $.ioore(t20);
        t17.setFrom$1(t18[t20]);
        t13.setFrom$1(t17).subLocal$1(t2);
        $.Vector_crossVectorAndNumToOut(t13, 1, t12);
        t12.normalize$0();
        $.Matrix22_mulMatrixAndVectorToOut(t5.rotation, t12, t16);
        t15.setFrom$1(t2);
        t15.addLocal$1(t17);
        t15.mulLocal$1(0.5);
        $.Transform_mulToOut(t5, t15, t14);
        t15 = this.localPointA;
        t5 = this.proxyA.get$vertices();
        if (0 >= t1.length)
          throw $.ioore(0);
        t2 = t1[0];
        if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !t5.$isJavaScriptIndexingBehavior()))
          return this.initialize$6$bailout(10, 0, 0, 0, t1, 0, t4, t5, 0, 0, t11, 0, t13, t3, 0, t12, t16, t15, t14);
        if (t2 !== (t2 | 0))
          throw $.iae(t2);
        if (t2 < 0 || t2 >= t5.length)
          throw $.ioore(t2);
        t15.setFrom$1(t5[t2]);
        $.Transform_mulToOut(t4, t15, t11);
        t13.setFrom$1(t11);
        t13.subLocal$1(t14);
        t14 = t13.x;
        t15 = t16.x;
        if (typeof t14 !== "number")
          return this.initialize$6$bailout(11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, 0, 0, t12, t16, 0, t14);
        if (typeof t15 !== "number")
          return this.initialize$6$bailout(12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, 0, 0, t12, t16, t15, t14);
        t15 = t14 * t15;
        t13 = t13.y;
        t21 = t16.y;
        if (typeof t13 !== "number")
          return this.initialize$6$bailout(13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, 0, 0, t12, t16, t15);
        if (typeof t21 !== "number")
          return this.initialize$6$bailout(14, 0, 0, 0, 0, 0, 0, 0, t21, 0, 0, 0, t13, 0, 0, t12, 0, t15);
        s = t15 + t13 * t21;
        if (s < 0) {
          t12.negateLocal$0();
          s = -s;
        }
        return s;
      } else {
        this.type = 1;
        t2 = this.localPointA1;
        t6 = this.proxyA.get$vertices();
        if (0 >= t1.length)
          throw $.ioore(0);
        t8 = t1[0];
        if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior()))
          return this.initialize$6$bailout(15, 0, 0, 0, t1, 0, t4, t5, t2, t6, t11, 0, t13, t3, t9, t12, t16, t15, t14);
        if (t8 !== (t8 | 0))
          throw $.iae(t8);
        if (t8 < 0 || t8 >= t6.length)
          throw $.ioore(t8);
        t2.setFrom$1(t6[t8]);
        t10 = this.localPointA2;
        t17 = this.proxyA.get$vertices();
        if (1 >= t1.length)
          throw $.ioore(1);
        t19 = t1[1];
        if (typeof t17 !== "string" && (typeof t17 !== "object" || t17 === null || t17.constructor !== Array && !t17.$isJavaScriptIndexingBehavior()))
          return this.initialize$6$bailout(16, 0, 0, 0, t1, 0, t4, t5, t2, 0, t11, 0, t13, t3, t9, t12, t16, t15, t14, t17, t10);
        if (t19 !== (t19 | 0))
          throw $.iae(t19);
        if (t19 < 0 || t19 >= t17.length)
          throw $.ioore(t19);
        t10.setFrom$1(t17[t19]);
        t13.setFrom$1(t10);
        t13.subLocal$1(t2);
        $.Vector_crossVectorAndNumToOut(t13, 1, t12);
        t12.normalize$0();
        $.Matrix22_mulMatrixAndVectorToOut(t4.rotation, t12, t16);
        t15.setFrom$1(t2);
        t15.addLocal$1(t10);
        t15.mulLocal$1(0.5);
        $.Transform_mulToOut(t4, t15, t11);
        t15 = this.localPointB;
        t4 = this.proxyB.get$vertices();
        if (0 >= t9.length)
          throw $.ioore(0);
        t2 = t9[0];
        if (typeof t4 !== "string" && (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !t4.$isJavaScriptIndexingBehavior()))
          return this.initialize$6$bailout(17, 0, 0, 0, 0, 0, t4, t5, 0, 0, t11, 0, t13, 0, t9, t12, t16, t15, t14);
        if (t2 !== (t2 | 0))
          throw $.iae(t2);
        if (t2 < 0 || t2 >= t4.length)
          throw $.ioore(t2);
        t15.setFrom$1(t4[t2]);
        $.Transform_mulToOut(t5, t15, t14);
        t13.setFrom$1(t14);
        t13.subLocal$1(t11);
        t11 = t13.x;
        t15 = t16.x;
        if (typeof t11 !== "number")
          return this.initialize$6$bailout(18, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, 0, t13, 0, 0, t12, t16);
        if (typeof t15 !== "number")
          return this.initialize$6$bailout(19, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, 0, t13, 0, 0, t12, t16, t15);
        t15 = t11 * t15;
        t13 = t13.y;
        t20 = t16.y;
        if (typeof t13 !== "number")
          return this.initialize$6$bailout(20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, 0, 0, t12, t16, t15);
        if (typeof t20 !== "number")
          return this.initialize$6$bailout(21, 0, 0, 0, 0, 0, 0, 0, t20, 0, 0, 0, t13, 0, 0, t12, 0, t15);
        s = t15 + t13 * t20;
        if (s < 0) {
          t12.negateLocal$0();
          s = -s;
        }
        return s;
      }
    }
  },
  initialize$6$bailout: function(state0, cache, argSweepA, argSweepB, t1, count, t4, t5, t2, t6, t9, t8, t11, t3, t7, t10, t14, t13, t12, t16, t15, t17) {
    switch (state0) {
      case 0:
        this.proxyA = argProxyA;
        this.proxyB = argProxyB;
        count = cache.count;
      case 1:
        state0 = 0;
        this.sweepA = argSweepA;
        this.sweepB = argSweepB;
        t3 = this.sweepA;
        t4 = this.xfa;
        t3.getTransform$2(t4, t1);
        t3 = this.sweepB;
        t5 = this.xfb;
        t3.getTransform$2(t5, t1);
      default:
        var s;
        if (state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && $.$$eq(count, 1) === true)
          switch (state0) {
            case 0:
              this.type = 0;
              t1 = this.localPointA;
              t2 = this.proxyA.get$vertices();
            case 2:
              state0 = 0;
              t6 = cache.indexA;
            case 3:
              state0 = 0;
              t1.setFrom$1($.$$index(t2, $.$$index(t6, 0)));
              t8 = this.localPointB;
              t9 = this.proxyB.get$vertices();
            case 4:
              state0 = 0;
              t11 = cache.indexB;
            case 5:
              state0 = 0;
              t8.setFrom$1($.$$index(t9, $.$$index(t11, 0)));
              t13 = this.pointA;
              $.Transform_mulToOut(t4, t1, t13);
              t1 = this.pointB;
              $.Transform_mulToOut(t5, t8, t1);
              t8 = this.axis;
              t8.setFrom$1(t1).subLocal$1(t13);
              return t8.normalize$0();
          }
        else
          switch (state0) {
            case 0:
              t1 = cache.indexA;
            case 6:
              state0 = 0;
              t3 = $.getInterceptor$JSStringJSArray(t1);
              t6 = $.$$eq(t3.$index(t1, 0), t3.$index(t1, 1)) === true;
              t7 = cache.indexB;
            case 7:
              state0 = 0;
              t9 = this.pointA;
              t10 = this.axis;
              t11 = this.temp;
              t12 = this.pointB;
              t13 = this.localPoint;
              t14 = this.normal;
            default:
              if (state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 0 && t6)
                switch (state0) {
                  case 0:
                    this.type = 2;
                    t2 = this.localPointB1;
                    t6 = this.proxyB.get$vertices();
                  case 8:
                    state0 = 0;
                    t15 = $.getInterceptor$JSStringJSArray(t7);
                    t2.setFrom$1($.$$index(t6, t15.$index(t7, 0)));
                    t16 = this.localPointB2;
                    t17 = this.proxyB.get$vertices();
                  case 9:
                    state0 = 0;
                    t16.setFrom$1($.$$index(t17, t15.$index(t7, 1)));
                    t11.setFrom$1(t16).subLocal$1(t2);
                    $.Vector_crossVectorAndNumToOut(t11, 1, t10);
                    t10.normalize$0();
                    $.Matrix22_mulMatrixAndVectorToOut(t5.rotation, t10, t14);
                    t13.setFrom$1(t2);
                    t13.addLocal$1(t16);
                    t13.mulLocal$1(0.5);
                    $.Transform_mulToOut(t5, t13, t12);
                    t13 = this.localPointA;
                    t5 = this.proxyA.get$vertices();
                  case 10:
                    state0 = 0;
                    t13.setFrom$1($.$$index(t5, t3.$index(t1, 0)));
                    $.Transform_mulToOut(t4, t13, t9);
                    t11.setFrom$1(t9);
                    t11.subLocal$1(t12);
                    t12 = t11.x;
                  case 11:
                    state0 = 0;
                    t13 = t14.x;
                  case 12:
                    state0 = 0;
                    t13 = $.$$mul(t12, t13);
                    t11 = t11.y;
                  case 13:
                    state0 = 0;
                    t2 = t14.y;
                  case 14:
                    state0 = 0;
                    s = $.$$add(t13, $.$$mul(t11, t2));
                    t1 = $.getInterceptor$JSNumber(s);
                    if (t1.$lt(s, 0) === true) {
                      t10.negateLocal$0();
                      s = t1.$negate(s);
                    }
                    return s;
                }
              else
                switch (state0) {
                  case 0:
                    this.type = 1;
                    t2 = this.localPointA1;
                    t6 = this.proxyA.get$vertices();
                  case 15:
                    state0 = 0;
                    t2.setFrom$1($.$$index(t6, t3.$index(t1, 0)));
                    t15 = this.localPointA2;
                    t16 = this.proxyA.get$vertices();
                  case 16:
                    state0 = 0;
                    t15.setFrom$1($.$$index(t16, t3.$index(t1, 1)));
                    t11.setFrom$1(t15);
                    t11.subLocal$1(t2);
                    $.Vector_crossVectorAndNumToOut(t11, 1, t10);
                    t10.normalize$0();
                    $.Matrix22_mulMatrixAndVectorToOut(t4.rotation, t10, t14);
                    t13.setFrom$1(t2);
                    t13.addLocal$1(t15);
                    t13.mulLocal$1(0.5);
                    $.Transform_mulToOut(t4, t13, t9);
                    t13 = this.localPointB;
                    t4 = this.proxyB.get$vertices();
                  case 17:
                    state0 = 0;
                    t13.setFrom$1($.$$index(t4, $.$$index(t7, 0)));
                    $.Transform_mulToOut(t5, t13, t12);
                    t11.setFrom$1(t12);
                    t11.subLocal$1(t9);
                    t9 = t11.x;
                  case 18:
                    state0 = 0;
                    t13 = t14.x;
                  case 19:
                    state0 = 0;
                    t13 = $.$$mul(t9, t13);
                    t11 = t11.y;
                  case 20:
                    state0 = 0;
                    t2 = t14.y;
                  case 21:
                    state0 = 0;
                    s = $.$$add(t13, $.$$mul(t11, t2));
                    t1 = $.getInterceptor$JSNumber(s);
                    if (t1.$lt(s, 0) === true) {
                      t10.negateLocal$0();
                      s = t1.$negate(s);
                    }
                    return s;
                }
          }
    }
  },
  findMinSeparation$2: function(indexes, t) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.sweepA;
    t2 = this.xfa;
    t1.getTransform$2(t2, t);
    t1 = this.sweepB;
    t3 = this.xfb;
    t1.getTransform$2(t3, t);
    switch (this.type) {
      case 0:
        t1 = t2.rotation;
        t4 = this.axis;
        t5 = this.axisA;
        $.Matrix22_mulTransMatrixAndVectorToOut(t1, t4, t5);
        t1 = t3.rotation;
        t6 = t4.negateLocal$0();
        t7 = this.axisB;
        $.Matrix22_mulTransMatrixAndVectorToOut(t1, t6, t7);
        t4.negateLocal$0();
        t5 = this.proxyA.getSupport$1(t5);
        if (0 >= indexes.length)
          throw $.ioore(0);
        indexes[0] = t5;
        t7 = this.proxyB.getSupport$1(t7);
        if (1 >= indexes.length)
          throw $.ioore(1);
        indexes[1] = t7;
        t7 = this.localPointA;
        t7.setFrom$1($.$$index(this.proxyA.get$vertices(), indexes[0]));
        t5 = this.localPointB;
        t6 = this.proxyB.get$vertices();
        if (1 >= indexes.length)
          throw $.ioore(1);
        t5.setFrom$1($.$$index(t6, indexes[1]));
        t1 = this.pointA;
        $.Transform_mulToOut(t2, t7, t1);
        t7 = this.pointB;
        $.Transform_mulToOut(t3, t5, t7);
        t1 = t7.subLocal$1(t1);
        return $.$$add($.$$mul(t1.get$x(), t4.x), $.$$mul(t1.get$y(), t4.y));
      case 1:
        t1 = t2.rotation;
        t4 = this.axis;
        t5 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t1, t4, t5);
        t4 = this.localPoint;
        t1 = this.pointA;
        $.Transform_mulToOut(t2, t4, t1);
        t5.negateLocal$0();
        t4 = t3.rotation;
        t2 = this.axisB;
        $.Matrix22_mulTransMatrixAndVectorToOut(t4, t5, t2);
        t5.negateLocal$0();
        if (0 >= indexes.length)
          throw $.ioore(0);
        indexes[0] = -1;
        t2 = this.proxyB.getSupport$1(t2);
        if (1 >= indexes.length)
          throw $.ioore(1);
        indexes[1] = t2;
        t2 = this.localPointB;
        t2.setFrom$1($.$$index(this.proxyB.get$vertices(), indexes[1]));
        t4 = this.pointB;
        $.Transform_mulToOut(t3, t2, t4);
        t1 = t4.subLocal$1(t1);
        return $.$$add($.$$mul(t1.get$x(), t5.x), $.$$mul(t1.get$y(), t5.y));
      case 2:
        t1 = t3.rotation;
        t4 = this.axis;
        t5 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t1, t4, t5);
        t4 = this.localPoint;
        t1 = this.pointB;
        $.Transform_mulToOut(t3, t4, t1);
        t4 = t2.rotation;
        t3 = t5.negateLocal$0();
        t6 = this.axisA;
        $.Matrix22_mulTransMatrixAndVectorToOut(t4, t3, t6);
        t5.negateLocal$0();
        if (1 >= indexes.length)
          throw $.ioore(1);
        indexes[1] = -1;
        t6 = this.proxyA.getSupport$1(t6);
        if (0 >= indexes.length)
          throw $.ioore(0);
        indexes[0] = t6;
        t6 = this.localPointA;
        t6.setFrom$1($.$$index(this.proxyA.get$vertices(), indexes[0]));
        t3 = this.pointA;
        $.Transform_mulToOut(t2, t6, t3);
        t1 = t3.subLocal$1(t1);
        return $.$$add($.$$mul(t1.get$x(), t5.x), $.$$mul(t1.get$y(), t5.y));
      default:
        t1 = indexes.length;
        if (0 >= t1)
          throw $.ioore(0);
        indexes[0] = -1;
        if (1 >= t1)
          throw $.ioore(1);
        indexes[1] = -1;
        return 0;
    }
  },
  evaluate$3: function(indexA, indexB, t) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.sweepA;
    t2 = this.xfa;
    t1.getTransform$2(t2, t);
    t1 = this.sweepB;
    t3 = this.xfb;
    t1.getTransform$2(t3, t);
    switch (this.type) {
      case 0:
        t1 = t2.rotation;
        t4 = this.axis;
        $.Matrix22_mulTransMatrixAndVectorToOut(t1, t4, this.axisA);
        $.Matrix22_mulTransMatrixAndVectorToOut(t3.rotation, t4.negateLocal$0(), this.axisB);
        t4.negateLocal$0();
        t1 = this.localPointA;
        t1.setFrom$1($.$$index(this.proxyA.get$vertices(), indexA));
        t5 = this.localPointB;
        t5.setFrom$1($.$$index(this.proxyB.get$vertices(), indexB));
        t6 = this.pointA;
        $.Transform_mulToOut(t2, t1, t6);
        t1 = this.pointB;
        $.Transform_mulToOut(t3, t5, t1);
        t6 = t1.subLocal$1(t6);
        return $.$$add($.$$mul(t6.get$x(), t4.x), $.$$mul(t6.get$y(), t4.y));
      case 1:
        t1 = t2.rotation;
        t4 = this.axis;
        t5 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t1, t4, t5);
        t4 = this.localPoint;
        t1 = this.pointA;
        $.Transform_mulToOut(t2, t4, t1);
        t5.negateLocal$0();
        $.Matrix22_mulTransMatrixAndVectorToOut(t3.rotation, t5, this.axisB);
        t5.negateLocal$0();
        t4 = this.localPointB;
        t4.setFrom$1($.$$index(this.proxyB.get$vertices(), indexB));
        t2 = this.pointB;
        $.Transform_mulToOut(t3, t4, t2);
        t1 = t2.subLocal$1(t1);
        return $.$$add($.$$mul(t1.get$x(), t5.x), $.$$mul(t1.get$y(), t5.y));
      case 2:
        t1 = t3.rotation;
        t4 = this.axis;
        t5 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t1, t4, t5);
        t4 = this.localPoint;
        t1 = this.pointB;
        $.Transform_mulToOut(t3, t4, t1);
        $.Matrix22_mulTransMatrixAndVectorToOut(t2.rotation, t5.negateLocal$0(), this.axisA);
        t5.negateLocal$0();
        t4 = this.localPointA;
        t4.setFrom$1($.$$index(this.proxyA.get$vertices(), indexA));
        t3 = this.pointA;
        $.Transform_mulToOut(t2, t4, t3);
        t1 = t3.subLocal$1(t1);
        return $.$$add($.$$mul(t1.get$x(), t5.x), $.$$mul(t1.get$y(), t5.y));
      default:
        return 0;
    }
  }
};

$$.TimeOfImpactInput = {"": "Object;proxyA>,proxyB>,sweepA>,sweepB>,tMax>"};

$$.TimeOfImpactOutput = {"": "Object;state<,t<"};

$$.WorldManifold = {"": "Object;normal>,points>,pool3,pool4",
  initialize$5: function(manifold, xfA, radiusA, xfB, radiusB) {
    var pointA, pointB, t1, cAx, cAy, cBx, cBy, t2, t3, planePoint, clipPoint, i, scalar, t4, R, v;
    switch (manifold.get$type()) {
      case 0:
        pointA = this.pool3;
        pointB = this.pool4;
        t1 = this.normal;
        t1.x = 1;
        t1.y = 0;
        pointA.x = $.$$add($.$$add(xfA.get$position().get$x(), $.$$mul(xfA.get$rotation().get$col1().get$x(), manifold.get$localPoint().get$x())), $.$$mul(xfA.get$rotation().get$col2().get$x(), manifold.get$localPoint().get$y()));
        pointA.y = $.$$add($.$$add(xfA.get$position().get$y(), $.$$mul(xfA.get$rotation().get$col1().get$y(), manifold.get$localPoint().get$x())), $.$$mul(xfA.get$rotation().get$col2().get$y(), manifold.get$localPoint().get$y()));
        pointB.x = $.$$add($.$$add(xfB.get$position().get$x(), $.$$mul(xfB.get$rotation().get$col1().get$x(), $.$$index(manifold.get$points(), 0).get$localPoint().get$x())), $.$$mul(xfB.get$rotation().get$col2().get$x(), $.$$index(manifold.get$points(), 0).get$localPoint().get$y()));
        pointB.y = $.$$add($.$$add(xfB.get$position().get$y(), $.$$mul(xfB.get$rotation().get$col1().get$y(), $.$$index(manifold.get$points(), 0).get$localPoint().get$x())), $.$$mul(xfB.get$rotation().get$col2().get$y(), $.$$index(manifold.get$points(), 0).get$localPoint().get$y()));
        if ($.$$gt($.MathBox_distanceSquared(pointA, pointB), 1.4208639999999999e-14) === true) {
          t1.x = $.$$sub(pointB.x, pointA.x);
          t1.y = $.$$sub(pointB.y, pointA.y);
          t1.normalize$0();
        }
        cAx = $.$$add($.$$mul(t1.x, radiusA), pointA.x);
        cAy = $.$$add($.$$mul(t1.y, radiusA), pointA.y);
        cBx = $.$$add($.$$mul($.$$negate(t1.x), radiusB), pointB.x);
        cBy = $.$$add($.$$mul($.$$negate(t1.y), radiusB), pointB.y);
        t2 = $.$$mul($.$$add(cAx, cBx), 0.5);
        t3 = this.points;
        if (0 >= t3.length)
          throw $.ioore(0);
        t3[0].set$x(t2);
        t2 = $.$$mul($.$$add(cAy, cBy), 0.5);
        if (0 >= t3.length)
          throw $.ioore(0);
        t3[0].set$y(t2);
        return;
      case 1:
        planePoint = this.pool3;
        t1 = $.$$add($.$$mul(xfA.get$rotation().get$col1().get$x(), manifold.get$localNormal().get$x()), $.$$mul(xfA.get$rotation().get$col2().get$x(), manifold.get$localNormal().get$y()));
        t2 = this.normal;
        t2.x = t1;
        t2.y = $.$$add($.$$mul(xfA.get$rotation().get$col1().get$y(), manifold.get$localNormal().get$x()), $.$$mul(xfA.get$rotation().get$col2().get$y(), manifold.get$localNormal().get$y()));
        planePoint.x = $.$$add($.$$add(xfA.get$position().get$x(), $.$$mul(xfA.get$rotation().get$col1().get$x(), manifold.get$localPoint().get$x())), $.$$mul(xfA.get$rotation().get$col2().get$x(), manifold.get$localPoint().get$y()));
        planePoint.y = $.$$add($.$$add(xfA.get$position().get$y(), $.$$mul(xfA.get$rotation().get$col1().get$y(), manifold.get$localPoint().get$x())), $.$$mul(xfA.get$rotation().get$col2().get$y(), manifold.get$localPoint().get$y()));
        clipPoint = this.pool4;
        for (t1 = $.getInterceptor$JSNumber(radiusA), t3 = this.points, i = 0; $.CONSTANT2.$lt(i, manifold.get$pointCount()); ++i) {
          clipPoint.x = $.$$add($.$$add(xfB.get$position().get$x(), $.$$mul(xfB.get$rotation().get$col1().get$x(), $.$$index(manifold.get$points(), i).get$localPoint().get$x())), $.$$mul(xfB.get$rotation().get$col2().get$x(), $.$$index(manifold.get$points(), i).get$localPoint().get$y()));
          clipPoint.y = $.$$add($.$$add(xfB.get$position().get$y(), $.$$mul(xfB.get$rotation().get$col1().get$y(), $.$$index(manifold.get$points(), i).get$localPoint().get$x())), $.$$mul(xfB.get$rotation().get$col2().get$y(), $.$$index(manifold.get$points(), i).get$localPoint().get$y()));
          scalar = t1.$sub(radiusA, $.$$add($.$$mul($.$$sub(clipPoint.x, planePoint.x), t2.x), $.$$mul($.$$sub(clipPoint.y, planePoint.y), t2.y)));
          cAx = $.$$add($.$$mul(t2.x, scalar), clipPoint.x);
          cAy = $.$$add($.$$mul(t2.y, scalar), clipPoint.y);
          cBx = $.$$add($.$$mul($.$$negate(t2.x), radiusB), clipPoint.x);
          cBy = $.$$add($.$$mul($.$$negate(t2.y), radiusB), clipPoint.y);
          t4 = $.$$mul($.$$add(cAx, cBx), 0.5);
          if (i >= t3.length)
            throw $.ioore(i);
          t3[i].set$x(t4);
          t4 = $.$$mul($.$$add(cAy, cBy), 0.5);
          if (i >= t3.length)
            throw $.ioore(i);
          t3[i].set$y(t4);
        }
        return;
      case 2:
        planePoint = this.pool3;
        R = xfB.get$rotation();
        t1 = $.$$add($.$$mul(R.get$col1().get$x(), manifold.get$localNormal().get$x()), $.$$mul(R.get$col2().get$x(), manifold.get$localNormal().get$y()));
        t2 = this.normal;
        t2.x = t1;
        t2.y = $.$$add($.$$mul(R.get$col1().get$y(), manifold.get$localNormal().get$x()), $.$$mul(R.get$col2().get$y(), manifold.get$localNormal().get$y()));
        v = manifold.get$localPoint();
        planePoint.x = $.$$add($.$$add(xfB.get$position().get$x(), $.$$mul(xfB.get$rotation().get$col1().get$x(), v.get$x())), $.$$mul(xfB.get$rotation().get$col2().get$x(), v.get$y()));
        planePoint.y = $.$$add($.$$add(xfB.get$position().get$y(), $.$$mul(xfB.get$rotation().get$col1().get$y(), v.get$x())), $.$$mul(xfB.get$rotation().get$col2().get$y(), v.get$y()));
        clipPoint = this.pool4;
        for (t1 = $.getInterceptor$JSNumber(radiusB), t3 = this.points, i = 0; $.CONSTANT2.$lt(i, manifold.get$pointCount()); ++i) {
          clipPoint.x = $.$$add($.$$add(xfA.get$position().get$x(), $.$$mul(xfA.get$rotation().get$col1().get$x(), $.$$index(manifold.get$points(), i).get$localPoint().get$x())), $.$$mul(xfA.get$rotation().get$col2().get$x(), $.$$index(manifold.get$points(), i).get$localPoint().get$y()));
          clipPoint.y = $.$$add($.$$add(xfA.get$position().get$y(), $.$$mul(xfA.get$rotation().get$col1().get$y(), $.$$index(manifold.get$points(), i).get$localPoint().get$x())), $.$$mul(xfA.get$rotation().get$col2().get$y(), $.$$index(manifold.get$points(), i).get$localPoint().get$y()));
          scalar = t1.$sub(radiusB, $.$$add($.$$mul($.$$sub(clipPoint.x, planePoint.x), t2.x), $.$$mul($.$$sub(clipPoint.y, planePoint.y), t2.y)));
          cBx = $.$$add($.$$mul(t2.x, scalar), clipPoint.x);
          cBy = $.$$add($.$$mul(t2.y, scalar), clipPoint.y);
          cAx = $.$$add($.$$mul($.$$negate(t2.x), radiusA), clipPoint.x);
          cAy = $.$$add($.$$mul($.$$negate(t2.y), radiusA), clipPoint.y);
          t4 = $.$$mul($.$$add(cAx, cBx), 0.5);
          if (i >= t3.length)
            throw $.ioore(i);
          t3[i].set$x(t4);
          t4 = $.$$mul($.$$add(cAy, cBy), 0.5);
          if (i >= t3.length)
            throw $.ioore(i);
          t3[i].set$y(t4);
        }
        t2.x = $.$$negate(t2.x);
        t2.y = $.$$negate(t2.y);
        break;
    }
  },
  WorldManifold$0: function() {
    var t1, i, t2;
    for (t1 = this.points, i = 0; i < 2; ++i) {
      t2 = $.Vector$(0, 0);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.BroadPhase = {"": "Object;_tree,proxyCount,moveBuffer,_pairBuffer,_pairCapacity,_pairCount,queryProxy",
  createProxy$2: function(box, userData) {
    var node = this._tree.createProxy$2(box, userData);
    this.proxyCount = this.proxyCount + 1;
    this.moveBuffer.push(node);
    return node;
  },
  destroyProxy$1: function(proxy) {
    this._unbufferMove$1(proxy);
    this.proxyCount = this.proxyCount - 1;
    this._tree.destroyProxy$1(proxy);
  },
  moveProxy$3: function(proxy, box, displacement) {
    if (this._tree.moveProxy$3(proxy, box, displacement) === true)
      this.moveBuffer.push(proxy);
  },
  testOverlap$2: function(proxyA, proxyB) {
    return $.AxisAlignedBox_testOverlap(proxyA.get$box(), proxyB.get$box());
  },
  updatePairs$1: function(callback) {
    var t1, i, t2, pairBuffer, primaryPair, pair;
    this._pairCount = 0;
    for (t1 = this._tree, i = 0; t2 = this.moveBuffer, i < t2.length; ++i) {
      this.queryProxy = t2[i];
      t2 = this.queryProxy;
      if (t2 == null)
        continue;
      t1.query$2(this, t2.get$box());
    }
    this.moveBuffer = $.List_List(0);
    pairBuffer = $.List_List$from($.CONSTANT1.getRange$2(this._pairBuffer, 0, this._pairCount));
    $.CONSTANT1.sort$1(pairBuffer, new $.BroadPhase_updatePairs_anon());
    $.CONSTANT1.setRange$3(this._pairBuffer, 0, this._pairCount, pairBuffer);
    for (i = 0; i < this._pairCount;) {
      t2 = this._pairBuffer;
      if (i < 0 || i >= t2.length)
        throw $.ioore(i);
      primaryPair = t2[i];
      callback.addPair$2(primaryPair.get$proxyA().get$userData(), primaryPair.get$proxyB().get$userData());
      ++i;
      for (; i < this._pairCount;) {
        t2 = this._pairBuffer;
        if (i >= t2.length)
          throw $.ioore(i);
        pair = t2[i];
        if ($.$$eq(pair.get$proxyA(), primaryPair.get$proxyA()) !== true || $.$$eq(pair.get$proxyB(), primaryPair.get$proxyB()) !== true)
          break;
        ++i;
      }
    }
    t1.rebalance$1(4);
  },
  treeCallback$1: function(proxy) {
    var t1, t2, oldBuffer, i, i0, t3, t4, t5;
    if ($.$$eq(proxy, this.queryProxy) === true)
      return true;
    t1 = this._pairCount;
    t2 = this._pairCapacity;
    if (t1 === t2) {
      oldBuffer = this._pairBuffer;
      this._pairCapacity = t2 * 2;
      this._pairBuffer = $.List_List(this._pairCapacity);
      for (t1 = this._pairBuffer, i = oldBuffer.length, t2 = t1.length, i0 = 0; i0 < i; ++i0) {
        t3 = oldBuffer[i0];
        if (i0 >= t2)
          throw $.ioore(i0);
        t1[i0] = t3;
      }
      for (; i < this._pairCapacity; ++i) {
        t1 = this._pairBuffer;
        t2 = $.Pair$();
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = t2;
      }
    }
    t1 = $.$$lt(proxy.get$key(), this.queryProxy.get$key());
    t2 = this._pairBuffer;
    t3 = this._pairCount;
    if (t1 === true) {
      if (t3 < 0 || t3 >= t2.length)
        throw $.ioore(t3);
      t2[t3].set$proxyA(proxy);
      t1 = this.queryProxy;
      t4 = this._pairBuffer;
      t5 = this._pairCount;
      if (t5 < 0 || t5 >= t4.length)
        throw $.ioore(t5);
      t4[t5].set$proxyB(t1);
    } else {
      t1 = this.queryProxy;
      if (t3 < 0 || t3 >= t2.length)
        throw $.ioore(t3);
      t2[t3].set$proxyA(t1);
      t1 = this._pairBuffer;
      t4 = this._pairCount;
      if (t4 < 0 || t4 >= t1.length)
        throw $.ioore(t4);
      t1[t4].set$proxyB(proxy);
    }
    this._pairCount = this._pairCount + 1;
    return true;
  },
  query$2: function(callback, box) {
    this._tree.query$2(callback, box);
  },
  _unbufferMove$1: function(proxy) {
    var index = $.CONSTANT1.indexOf$1(this.moveBuffer, proxy);
    if ($.$$eq(index, -1) !== true)
      $.CONSTANT1.removeRange$2(this.moveBuffer, index, 1);
  },
  BroadPhase$0: function() {
    var i, t1, t2;
    this.moveBuffer = $.List_List(0);
    this._pairBuffer = $.List_List(this._pairCapacity);
    for (i = 0; i < this._pairCapacity; ++i) {
      t1 = this._pairBuffer;
      t2 = $.Pair$();
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.DynamicTree = {"": "Object;_root,_nodeCount,_lastLeaf,_insertionCount,_path,_nodeStack,_drawVectors,_nodeCounter,_tempVector,_tempBox,center>,deltaOne,deltaTwo",
  createProxy$2: function(box, userData) {
    var proxy, t1, iterationCount, height, tryCount;
    proxy = this._allocateNode$0();
    t1 = $.$$sub(box.get$lowerBound().get$x(), 0.1);
    proxy.get$box().get$lowerBound().set$x(t1);
    t1 = $.$$sub(box.get$lowerBound().get$y(), 0.1);
    proxy.get$box().get$lowerBound().set$y(t1);
    t1 = $.$$add(box.get$upperBound().get$x(), 0.1);
    proxy.get$box().get$upperBound().set$x(t1);
    t1 = $.$$add(box.get$upperBound().get$y(), 0.1);
    proxy.get$box().get$upperBound().set$y(t1);
    proxy.set$userData(userData);
    this._insertLeaf$1(proxy);
    iterationCount = $.CONSTANT2.$shr(this._nodeCount, 4);
    height = this._computeHeight$1(this._root);
    if (typeof height !== "number")
      return this.createProxy$2$bailout(1, height, proxy, iterationCount);
    tryCount = 0;
    while (true) {
      if (!($.$$gt(height, 64) === true && tryCount < 10))
        break;
      this.rebalance$1(iterationCount);
      height = this._computeHeight$1(this._root);
      ++tryCount;
    }
    return proxy;
  },
  createProxy$2$bailout: function(state0, height, proxy, iterationCount) {
    var tryCount = 0;
    while (true) {
      if (!($.$$gt(height, 64) === true && tryCount < 10))
        break;
      this.rebalance$1(iterationCount);
      height = this._computeHeight$1(this._root);
      ++tryCount;
    }
    return proxy;
  },
  destroyProxy$1: function(toDestroy) {
    this._removeLeaf$1(toDestroy);
    this._freeNode$1(toDestroy);
  },
  moveProxy$3: function(argProxy, argBox, displacement) {
    var t1, t2, t3;
    if ($.contains1(argProxy.get$box(), argBox) === true)
      return false;
    this._removeLeaf$1(argProxy);
    t1 = argBox.lowerBound;
    t1.set$x($.$$sub(t1.get$x(), 0.1));
    t1 = argBox.lowerBound;
    t1.set$y($.$$sub(t1.get$y(), 0.1));
    t1 = argBox.upperBound;
    t1.set$x($.$$add(t1.get$x(), 0.1));
    t1 = argBox.upperBound;
    t1.set$y($.$$add(t1.get$y(), 0.1));
    t1 = this._tempVector;
    t1.setFrom$1(displacement);
    t1.mulLocal$1(2);
    t2 = $.$$lt(t1.x, 0);
    t3 = t1.x;
    if (t2 === true) {
      t2 = argBox.lowerBound;
      t2.set$x($.$$add(t2.get$x(), t3));
    } else {
      t2 = argBox.upperBound;
      t2.set$x($.$$add(t2.get$x(), t3));
    }
    t2 = $.$$lt(t1.y, 0);
    t1 = t1.y;
    if (t2 === true) {
      t2 = argBox.lowerBound;
      t2.set$y($.$$add(t2.get$y(), t1));
    } else {
      t2 = argBox.upperBound;
      t2.set$y($.$$add(t2.get$y(), t1));
    }
    argProxy.get$box().setFrom$1(argBox);
    this._insertLeaf$1(argProxy);
    return true;
  },
  _allocateNode$0: function() {
    var t1, i, node;
    t1 = this._nodeStack;
    if ($.isEmpty(t1) === true)
      for (i = 0; i < 6; ++i)
        t1.addFirst$1($.DynamicTreeNode$_construct());
    node = t1.removeFirst$0();
    node.set$parent(null);
    node.set$childOne(null);
    node.set$childTwo(null);
    node.set$userData(null);
    node.set$key(this._nodeCounter);
    this._nodeCounter = this._nodeCounter + 1;
    this._nodeCount = this._nodeCount + 1;
    return node;
  },
  query$2: function(callback, argBox) {
    this._query$4(callback, argBox, this._root, 1);
  },
  _query$4: function(callback, argBox, node, count) {
    if (node == null)
      return true;
    if ($.AxisAlignedBox_testOverlap(argBox, node.get$box()))
      if (node.get$isLeaf() === true) {
        if (callback.treeCallback$1(node) !== true)
          return false;
      } else {
        if (count < 64) {
          ++count;
          if (this._query$4(callback, argBox, node.get$childOne(), count) !== true)
            return false;
        }
        if (count < 64)
          if (this._query$4(callback, argBox, node.get$childTwo(), count + 1) !== true)
            return false;
      }
    return true;
  },
  _insertLeaf$1: function(node) {
    var t1, sibling, childOne, childTwo, t2, t3, t4, t6, normOne, t8, node1, node2, node10;
    this._insertionCount = this._insertionCount + 1;
    if (this._root == null) {
      this._root = node;
      node.set$parent(null);
      return;
    }
    t1 = this.center;
    t1.setFrom$1(node.get$box().get$center());
    sibling = this._root;
    if (sibling.get$isLeaf() !== true)
      do {
        childOne = sibling.get$childOne();
        childTwo = sibling.get$childTwo();
        t2 = this.deltaOne;
        t2.setFrom$1(childOne.get$box().get$center());
        t3 = this.deltaTwo;
        t3.setFrom$1(childTwo.get$box().get$center());
        t2.subLocal$1(t1).absLocal$0();
        t3.subLocal$1(t1).absLocal$0();
        t4 = t2.x;
        t6 = t2.y;
        if (typeof t4 !== "number")
          return this._insertLeaf$1$bailout(1, node, t2, childOne, childTwo, t3, t4);
        if (typeof t6 !== "number")
          return this._insertLeaf$1$bailout(2, node, 0, childOne, childTwo, t3, t4, t6);
        normOne = t4 + t6;
        t6 = t3.x;
        t8 = t3.y;
        if (typeof t6 !== "number")
          return this._insertLeaf$1$bailout(3, node, 0, childOne, childTwo, t3, 0, t6, normOne);
        if (typeof t8 !== "number")
          return this._insertLeaf$1$bailout(4, node, 0, childOne, childTwo, 0, 0, t6, normOne, t8);
        sibling = normOne < t6 + t8 ? childOne : childTwo;
        t2 = sibling.get$isLeaf();
        if (typeof t2 !== "boolean")
          return this._insertLeaf$1$bailout(5, node, t2, 0, 0, 0, 0, 0, 0, 0, sibling, t1);
      } while (!t2);
    node1 = sibling.get$parent();
    node2 = this._allocateNode$0();
    node2.set$parent(node1);
    node2.set$userData(null);
    node2.get$box().setFromCombination$2(node.get$box(), sibling.get$box());
    if (!(node1 == null)) {
      if ($.$$eq(sibling.get$parent().get$childOne(), sibling) === true)
        node1.set$childOne(node2);
      else
        node1.set$childTwo(node2);
      node2.set$childOne(sibling);
      node2.set$childTwo(node);
      sibling.set$parent(node2);
      node.set$parent(node2);
      do {
        if ($.contains1(node1.get$box(), node2.get$box()) === true)
          break;
        node1.get$box().setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
        node10 = node1.get$parent();
        if (!(node10 == null)) {
          node2 = node1;
          node1 = node10;
          continue;
        } else
          break;
      } while (true);
    } else {
      node2.set$childOne(sibling);
      node2.set$childTwo(node);
      sibling.set$parent(node2);
      node.set$parent(node2);
      this._root = node2;
    }
  },
  _insertLeaf$1$bailout: function(state0, node, t2, childOne, childTwo, t3, t4, t6, normOne, t8, sibling, t1) {
    switch (state0) {
      case 0:
        this._insertionCount = this._insertionCount + 1;
        if (this._root == null) {
          this._root = node;
          node.set$parent(null);
          return;
        }
        t1 = this.center;
        t1.setFrom$1(node.get$box().get$center());
        sibling = this._root;
      default:
        var node1, node2, node10;
        if (state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && sibling.get$isLeaf() !== true)
          switch (state0) {
            case 0:
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      childOne = sibling.get$childOne();
                      childTwo = sibling.get$childTwo();
                      t2 = this.deltaOne;
                      t2.setFrom$1(childOne.get$box().get$center());
                      t3 = this.deltaTwo;
                      t3.setFrom$1(childTwo.get$box().get$center());
                      t2.subLocal$1(t1).absLocal$0();
                      t3.subLocal$1(t1).absLocal$0();
                      t4 = t2.x;
                    case 1:
                      state0 = 0;
                      t6 = t2.y;
                    case 2:
                      state0 = 0;
                      normOne = $.$$add(t4, t6);
                      t6 = t3.x;
                    case 3:
                      state0 = 0;
                      t8 = t3.y;
                    case 4:
                      state0 = 0;
                      sibling = $.$$lt(normOne, $.$$add(t6, t8)) === true ? childOne : childTwo;
                      t2 = sibling.get$isLeaf();
                    case 5:
                      state0 = 0;
                      if (!($.$$eq(t2, false) === true))
                        break L0;
                  }
          }
        node1 = sibling.get$parent();
        node2 = this._allocateNode$0();
        node2.set$parent(node1);
        node2.set$userData(null);
        node2.get$box().setFromCombination$2(node.get$box(), sibling.get$box());
        if (!(node1 == null)) {
          if ($.$$eq(sibling.get$parent().get$childOne(), sibling) === true)
            node1.set$childOne(node2);
          else
            node1.set$childTwo(node2);
          node2.set$childOne(sibling);
          node2.set$childTwo(node);
          sibling.set$parent(node2);
          node.set$parent(node2);
          do {
            if ($.contains1(node1.get$box(), node2.get$box()) === true)
              break;
            node1.get$box().setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
            node10 = node1.get$parent();
            if (!(node10 == null)) {
              node2 = node1;
              node1 = node10;
              continue;
            } else
              break;
          } while (true);
        } else {
          node2.set$childOne(sibling);
          node2.set$childTwo(node);
          sibling.set$parent(node2);
          node.set$parent(node2);
          this._root = node2;
        }
    }
  },
  _removeLeaf$1: function(argNode) {
    var node2, node1, sibling, t1;
    if ($.$$eq(argNode, this._root) === true) {
      this._root = null;
      if ($.$$eq(this._lastLeaf, argNode) === true)
        this._lastLeaf = null;
      return;
    }
    node2 = argNode.get$parent();
    node1 = node2.get$parent();
    sibling = $.$$eq(node2.get$childOne(), argNode) === true ? node2.get$childTwo() : node2.get$childOne();
    if (!(node1 == null)) {
      if ($.$$eq(node1.get$childOne(), node2) === true)
        node1.set$childOne(sibling);
      else
        node1.set$childTwo(sibling);
      sibling.set$parent(node1);
      this._freeNode$1(node2);
      for (t1 = this._tempBox; !(node1 == null);) {
        t1.setFrom$1(node1.get$box());
        node1.get$box().setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
        if (t1.contains$1(node1.get$box()) === true)
          break;
        node1 = node1.get$parent();
      }
    } else {
      this._root = sibling;
      sibling.set$parent(null);
      this._freeNode$1(node2);
    }
    if ($.$$eq(this._lastLeaf, argNode) === true)
      this._lastLeaf = this._root;
  },
  _computeHeight$1: function(node) {
    if (node == null)
      return 0;
    return 1 + $.max(this._computeHeight$1(node.get$childOne()), this._computeHeight$1(node.get$childTwo()));
  },
  rebalance$1: function(iterations) {
    var i, current, bit, t1, t2, bit0;
    if (this._root == null)
      return;
    for (i = 0; i < iterations; ++i) {
      current = this._root;
      for (bit = 0; t1 = current.get$isLeaf(), t2 = this._path, t1 !== true; bit = bit0) {
        current = ($.CONSTANT2.$shr(t2, bit) & 1) === 0 ? current.get$childOne() : current.get$childTwo();
        bit0 = bit + 1 & 31;
      }
      this._path = t2 + 1;
      this._removeLeaf$1(current);
      this._insertLeaf$1(current);
    }
  },
  _freeNode$1: function(node) {
    this._nodeStack.addFirst$1(node);
    this._nodeCount = this._nodeCount - 1;
  },
  DynamicTree$0: function() {
    var t1, i, t2;
    for (t1 = this._drawVectors, i = 0; i < t1.length; ++i) {
      t2 = $.Vector$(0, 0);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.DynamicTreeNode = {"": "Object;box>,parent=,next=,childOne=,childTwo=,userData=,key=",
  get$isLeaf: function() {
    return this.childOne == null;
  },
  toString$0: function() {
    return this.box.toString$0();
  }
};

$$.Pair = {"": "Object;proxyA=,proxyB=",
  compareTo$1: function(pair2) {
    var t1;
    if ($.$$lt(this.proxyA.get$key(), pair2.get$proxyA().get$key()) === true)
      return -1;
    if ($.$$eq(this.proxyA.get$key(), pair2.get$proxyA().get$key()) === true) {
      if ($.$$lt(this.proxyB.get$key(), pair2.get$proxyB().get$key()) === true)
        t1 = -1;
      else
        t1 = $.$$eq(this.proxyB.get$key(), pair2.get$proxyB().get$key()) === true ? 0 : 1;
      return t1;
    }
    return 1;
  }
};

$$.CircleShape = {"": "Shape;position>,type,radius",
  testPoint$2: function(transform, point) {
    var center, d, t1, t2, t3;
    center = $.Vector$(0, 0);
    transform.rotation.multiplyVectorToOut$2(this.position, center);
    center.addLocal$1(transform.position);
    d = center.subLocal$1(point).negateLocal$0();
    t1 = d.get$x();
    t1 = $.$$mul(t1, t1);
    t2 = d.get$y();
    t1 = $.$$add(t1, $.$$mul(t2, t2));
    t3 = this.radius;
    return $.$$le(t1, $.$$mul(t3, t3));
  },
  computeAxisAlignedBox$2: function(argBox, argTransform) {
    var p = $.Vector$(0, 0);
    $.Matrix22_mulMatrixAndVectorToOut(argTransform.get$rotation(), this.position, p);
    p.addLocal$1(argTransform.get$position());
    argBox.get$lowerBound().setCoords$2($.$$sub(p.x, this.radius), $.$$sub(p.y, this.radius));
    argBox.get$upperBound().setCoords$2($.$$add(p.x, this.radius), $.$$add(p.y, this.radius));
  },
  clone$0: function() {
    return $.CircleShape$copy(this);
  },
  computeMass$2: function(massData, density) {
    var t1, t2, t3, t4;
    massData.set$mass($.$$mul($.$$mul($.$$mul(density, 3.141592653589793), this.radius), this.radius));
    t1 = massData.get$center();
    t2 = this.position;
    t1.setFrom$1(t2);
    t1 = massData.get$mass();
    t3 = this.radius;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = t2.get$x();
    t4 = $.$$mul(t4, t4);
    t2 = t2.get$y();
    t4 = $.$$add(t4, $.$$mul(t2, t2));
    if (typeof t4 !== "number")
      throw $.iae(t4);
    massData.set$inertia($.$$mul(t1, 0.5 * t3 * t3 + t4));
  }
};

$$.MassData = {"": "Object;mass=,center>,inertia=",
  setFrom$1: function(md) {
    this.mass = md.get$mass();
    this.inertia = md.get$inertia();
    this.center.setFrom$1(md.get$center());
  }
};

$$.PolygonShape = {"": "Shape;centroid>,vertices>,normals>,vertexCount>,type,radius",
  getSupport$1: function(d) {
    var t1, t3, t4, t5, t6, t8, t11, bestValue, bestIndex, i, t2, value;
    t1 = this.vertices;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.getSupport$1$bailout0(1, d, t1);
    t3 = $.getInterceptor$JSStringJSArray(t1);
    t4 = t1.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t1[0];
    t6 = t5.get$x();
    t8 = d.x;
    if (typeof t6 !== "number")
      return this.getSupport$1$bailout0(2, d, t1, t6, t3, t5);
    if (typeof t8 !== "number")
      return this.getSupport$1$bailout0(3, d, t1, t6, t3, t5, t8);
    t6 *= t8;
    t5 = t5.get$y();
    t11 = d.y;
    if (typeof t5 !== "number")
      return this.getSupport$1$bailout0(4, d, t1, 0, t3, t5, t6);
    if (typeof t11 !== "number")
      return this.getSupport$1$bailout0(5, d, t1, 0, t3, t5, t6, t11);
    bestValue = t6 + t5 * t11;
    bestIndex = 0;
    i = 1;
    while (true) {
      t2 = this.vertexCount;
      if (typeof t2 !== "number")
        return this.getSupport$1$bailout0(6, d, t1, 0, t3, 0, 0, 0, t2, bestIndex, bestValue, i);
      if (!(i < t2))
        break;
      if (i >= t4)
        throw $.ioore(i);
      t2 = t1[i];
      t5 = t2.get$x();
      if (typeof t5 !== "number")
        return this.getSupport$1$bailout0(7, d, t1, 0, t3, t5, 0, 0, t2, bestIndex, bestValue, i);
      t5 *= t8;
      t2 = t2.get$y();
      if (typeof t2 !== "number")
        return this.getSupport$1$bailout0(9, d, t1, 0, t3, 0, 0, 0, t2, bestIndex, bestValue, i, t5);
      value = t5 + t2 * t11;
      if (value > bestValue) {
        bestValue = value;
        bestIndex = i;
      }
      ++i;
    }
    return bestIndex;
  },
  getSupport$1$bailout0: function(state0, d, t1, t5, t3, t4, t7, t9, t2, bestIndex, bestValue, i, t6, t8) {
    switch (state0) {
      case 0:
        t1 = this.vertices;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        t4 = t3.$index(t1, 0);
        t5 = t4.get$x();
      case 2:
        state0 = 0;
        t7 = d.x;
      case 3:
        state0 = 0;
        t7 = $.$$mul(t5, t7);
        t4 = t4.get$y();
      case 4:
        state0 = 0;
        t9 = d.y;
      case 5:
        state0 = 0;
        bestValue = $.$$add(t7, $.$$mul(t4, t9));
        bestIndex = 0;
        i = 1;
      default:
        var value;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this.vertexCount;
              case 6:
                state0 = 0;
                if (!$.CONSTANT2.$lt(i, t2))
                  break L0;
                t2 = t3.$index(t1, i);
                t4 = t2.get$x();
              case 7:
                state0 = 0;
                t6 = d.x;
              case 8:
                state0 = 0;
                t6 = $.$$mul(t4, t6);
                t2 = t2.get$y();
              case 9:
                state0 = 0;
                t8 = d.y;
              case 10:
                state0 = 0;
                value = $.$$add(t6, $.$$mul(t2, t8));
                if ($.$$gt(value, bestValue) === true) {
                  bestValue = value;
                  bestIndex = i;
                }
                ++i;
            }
        return bestIndex;
    }
  },
  clone$0: function() {
    return $.PolygonShape$copy(this);
  },
  setAsBoxWithCenterAndAngle$4: function(hx, hy, center, angle) {
    var t1, t3, t4, t5, t6, xf, t8, i, t2;
    this.vertexCount = 4;
    t1 = this.vertices;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.setAsBoxWithCenterAndAngle$4$bailout(1, hx, hy, t1, angle, center);
    t3 = $.getInterceptor$JSStringJSArray(t1);
    if (0 >= t1.length)
      throw $.ioore(0);
    t4 = $.getInterceptor$JSNumber(hx);
    t5 = $.getInterceptor$JSNumber(hy);
    t1[0].setCoords$2(t4.$negate(hx), t5.$negate(hy));
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1].setCoords$2(hx, t5.$negate(hy));
    if (2 >= t1.length)
      throw $.ioore(2);
    t1[2].setCoords$2(hx, hy);
    if (3 >= t1.length)
      throw $.ioore(3);
    t1[3].setCoords$2(t4.$negate(hx), hy);
    t6 = this.normals;
    if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior()))
      return this.setAsBoxWithCenterAndAngle$4$bailout(2, 0, 0, t1, angle, center, t3, t6);
    if (0 >= t6.length)
      throw $.ioore(0);
    t6[0].setCoords$2(0, -1);
    if (1 >= t6.length)
      throw $.ioore(1);
    t6[1].setCoords$2(1, 0);
    if (2 >= t6.length)
      throw $.ioore(2);
    t6[2].setCoords$2(0, 1);
    if (3 >= t6.length)
      throw $.ioore(3);
    t6[3].setCoords$2(-1, 0);
    this.centroid.setFrom$1(center);
    xf = $.Transform$();
    xf.position.setFrom$1(center);
    t8 = xf.rotation;
    t8.setAngle$1(angle);
    for (i = 0; $.CONSTANT2.$lt(i, this.vertexCount); ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = t1[i];
      $.Transform_mulToOut(xf, t2, t2);
      if (i >= t6.length)
        throw $.ioore(i);
      t2 = t6[i];
      $.Matrix22_mulMatrixAndVectorToOut(t8, t2, t2);
    }
  },
  setAsBoxWithCenterAndAngle$4$bailout: function(state0, hx, hy, t1, angle, center, t3, t6) {
    switch (state0) {
      case 0:
        this.vertexCount = 4;
        t1 = this.vertices;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        t4 = $.getInterceptor$JSNumber(hx);
        t5 = $.getInterceptor$JSNumber(hy);
        t3.$index(t1, 0).setCoords$2(t4.$negate(hx), t5.$negate(hy));
        t3.$index(t1, 1).setCoords$2(hx, t5.$negate(hy));
        t3.$index(t1, 2).setCoords$2(hx, hy);
        t3.$index(t1, 3).setCoords$2(t4.$negate(hx), hy);
        t6 = this.normals;
      case 2:
        var t4, t5, t8, xf, t9, i;
        state0 = 0;
        t8 = $.getInterceptor$JSStringJSArray(t6);
        t8.$index(t6, 0).setCoords$2(0, -1);
        t8.$index(t6, 1).setCoords$2(1, 0);
        t8.$index(t6, 2).setCoords$2(0, 1);
        t8.$index(t6, 3).setCoords$2(-1, 0);
        this.centroid.setFrom$1(center);
        xf = $.Transform$();
        xf.position.setFrom$1(center);
        t9 = xf.rotation;
        t9.setAngle$1(angle);
        for (i = 0; $.CONSTANT2.$lt(i, this.vertexCount); ++i) {
          $.Transform_mulToOut(xf, t3.$index(t1, i), t3.$index(t1, i));
          $.Matrix22_mulMatrixAndVectorToOut(t9, t8.$index(t6, i), t8.$index(t6, i));
        }
    }
  },
  testPoint$2: function(xf, p) {
    var pLocal, temp, t1, t3, t4, i, t2;
    pLocal = $.Vector$(0, 0);
    pLocal.setFrom$1(p).subLocal$1(xf.position);
    $.Matrix22_mulTransMatrixAndVectorToOut(xf.rotation, pLocal, pLocal);
    temp = $.Vector$(0, 0);
    t1 = this.normals;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.testPoint$2$bailout(1, t1, pLocal, temp);
    t3 = $.getInterceptor$JSStringJSArray(t1);
    t4 = this.vertices;
    if (typeof t4 !== "string" && (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !t4.$isJavaScriptIndexingBehavior()))
      return this.testPoint$2$bailout(2, t1, pLocal, temp, t4, t3);
    i = 0;
    for (; $.CONSTANT2.$lt(i, this.vertexCount); ++i) {
      t2 = temp.setFrom$1(pLocal);
      if (i >= t4.length)
        throw $.ioore(i);
      t2.subLocal$1(t4[i]);
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = t1[i];
      if ($.$$gt($.$$add($.$$mul(t2.get$x(), temp.x), $.$$mul(t2.get$y(), temp.y)), 0) === true)
        return false;
    }
    return true;
  },
  testPoint$2$bailout: function(state0, t1, pLocal, temp, t4, t3) {
    switch (state0) {
      case 0:
        pLocal = $.Vector$(0, 0);
        pLocal.setFrom$1(p).subLocal$1(xf.position);
        $.Matrix22_mulTransMatrixAndVectorToOut(xf.rotation, pLocal, pLocal);
        temp = $.Vector$(0, 0);
        t1 = this.normals;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        t4 = this.vertices;
      case 2:
        var t6, i, t2;
        state0 = 0;
        t6 = $.getInterceptor$JSStringJSArray(t4);
        i = 0;
        for (; $.CONSTANT2.$lt(i, this.vertexCount); ++i) {
          temp.setFrom$1(pLocal).subLocal$1(t6.$index(t4, i));
          t2 = t3.$index(t1, i);
          if ($.$$gt($.$$add($.$$mul(t2.get$x(), temp.x), $.$$mul(t2.get$y(), temp.y)), 0) === true)
            return false;
        }
        return true;
    }
  },
  computeAxisAlignedBox$2: function(argAabb, argXf) {
    var lower, upper, v, t1, i;
    lower = $.Vector$(0, 0);
    upper = $.Vector$(0, 0);
    v = $.Vector$(0, 0);
    t1 = this.vertices;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.computeAxisAlignedBox$2$bailout(1, argAabb, argXf, lower, t1, upper, v);
    if (0 >= t1.length)
      throw $.ioore(0);
    $.Transform_mulToOut(argXf, t1[0], lower);
    upper.setFrom$1(lower);
    for (i = 1; $.CONSTANT2.$lt(i, this.vertexCount); ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      $.Transform_mulToOut(argXf, t1[i], v);
      lower.x = $.$$lt(lower.x, v.x) === true ? lower.x : v.x;
      lower.y = $.$$lt(lower.y, v.y) === true ? lower.y : v.y;
      upper.x = $.$$gt(upper.x, v.x) === true ? upper.x : v.x;
      upper.y = $.$$gt(upper.y, v.y) === true ? upper.y : v.y;
    }
    t1 = $.$$sub(lower.x, this.radius);
    argAabb.get$lowerBound().set$x(t1);
    t1 = $.$$sub(lower.y, this.radius);
    argAabb.get$lowerBound().set$y(t1);
    t1 = $.$$add(upper.x, this.radius);
    argAabb.get$upperBound().set$x(t1);
    t1 = $.$$add(upper.y, this.radius);
    argAabb.get$upperBound().set$y(t1);
  },
  computeAxisAlignedBox$2$bailout: function(state0, argAabb, argXf, lower, t1, upper, v) {
    var t3, i;
    t3 = $.getInterceptor$JSStringJSArray(t1);
    $.Transform_mulToOut(argXf, t3.$index(t1, 0), lower);
    upper.setFrom$1(lower);
    for (i = 1; $.CONSTANT2.$lt(i, this.vertexCount); ++i) {
      $.Transform_mulToOut(argXf, t3.$index(t1, i), v);
      lower.x = $.$$lt(lower.x, v.x) === true ? lower.x : v.x;
      lower.y = $.$$lt(lower.y, v.y) === true ? lower.y : v.y;
      upper.x = $.$$gt(upper.x, v.x) === true ? upper.x : v.x;
      upper.y = $.$$gt(upper.y, v.y) === true ? upper.y : v.y;
    }
    t1 = $.$$sub(lower.x, this.radius);
    argAabb.get$lowerBound().set$x(t1);
    t1 = $.$$sub(lower.y, this.radius);
    argAabb.get$lowerBound().set$y(t1);
    t1 = $.$$add(upper.x, this.radius);
    argAabb.get$upperBound().set$x(t1);
    t1 = $.$$add(upper.y, this.radius);
    argAabb.get$upperBound().set$y(t1);
  },
  computeMass$2: function(massData, density) {
    var t1, t2, t3, center, pRef, e1, e2, area, I, i, p2, p3, D, triangleArea, t4, t5, t6, px, py, ex1, ey1, ex2, ey2, t7, t8, t9, t10, t11, t12, t13, t14;
    if ($.$$eq(this.vertexCount, 2) === true) {
      t1 = massData.get$center();
      t2 = this.vertices;
      t3 = $.getInterceptor$JSStringJSArray(t2);
      t1.setFrom$1(t3.$index(t2, 0)).addLocal$1(t3.$index(t2, 1)).mulLocal$1(0.5);
      massData.set$mass(0);
      massData.set$inertia(0);
      return;
    }
    center = $.Vector$(0, 0);
    center.setZero$0();
    pRef = $.Vector$(0, 0);
    pRef.setZero$0();
    e1 = $.Vector$(0, 0);
    e2 = $.Vector$(0, 0);
    t1 = this.vertices;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.computeMass$2$bailout(1, massData, pRef, density, e1, e2, center, t1);
    area = 0;
    I = 0;
    i = 0;
    for (; $.CONSTANT2.$lt(i, this.vertexCount);) {
      if (i >= t1.length)
        throw $.ioore(i);
      p2 = t1[i];
      ++i;
      t2 = $.CONSTANT2.$lt(i, this.vertexCount);
      t3 = t1.length;
      if (t2) {
        if (i >= t3)
          throw $.ioore(i);
        p3 = t1[i];
      } else {
        if (0 >= t3)
          throw $.ioore(0);
        p3 = t1[0];
      }
      e1.setFrom$1(p2);
      e1.subLocal$1(pRef);
      e2.setFrom$1(p3);
      e2.subLocal$1(pRef);
      D = $.$$sub($.$$mul(e1.x, e2.y), $.$$mul(e1.y, e2.x));
      if (typeof D !== "number")
        throw $.iae(D);
      triangleArea = 0.5 * D;
      area += triangleArea;
      t2 = center.x;
      t3 = triangleArea * 0.3333333333333333;
      t4 = $.$$add($.$$add(pRef.x, p2.get$x()), p3.get$x());
      if (typeof t4 !== "number")
        throw $.iae(t4);
      center.x = $.$$add(t2, t3 * t4);
      t5 = center.y;
      t6 = $.$$add($.$$add(pRef.y, p2.get$y()), p3.get$y());
      if (typeof t6 !== "number")
        throw $.iae(t6);
      center.y = $.$$add(t5, t3 * t6);
      px = pRef.x;
      py = pRef.y;
      ex1 = e1.x;
      ey1 = e1.y;
      ex2 = e2.x;
      ey2 = e2.y;
      t7 = $.getInterceptor$JSNumber(ex2);
      t8 = $.$$add($.$$add($.$$mul(ex1, ex1), t7.$mul(ex2, ex1)), t7.$mul(ex2, ex2));
      if (typeof t8 !== "number")
        throw $.iae(t8);
      t9 = $.getInterceptor$JSNumber(px);
      t10 = $.$$add(t9.$mul(px, ex1), t9.$mul(px, ex2));
      if (typeof t10 !== "number")
        throw $.iae(t10);
      if (typeof px !== "number")
        throw $.iae(px);
      t11 = $.getInterceptor$JSNumber(ey2);
      t12 = $.$$add($.$$add($.$$mul(ey1, ey1), t11.$mul(ey2, ey1)), t11.$mul(ey2, ey2));
      if (typeof t12 !== "number")
        throw $.iae(t12);
      t13 = $.getInterceptor$JSNumber(py);
      t14 = $.$$add(t13.$mul(py, ey1), t13.$mul(py, ey2));
      if (typeof t14 !== "number")
        throw $.iae(t14);
      if (typeof py !== "number")
        throw $.iae(py);
      I += D * (0.3333333333333333 * (0.25 * t8 + t10) + 0.5 * px * px + (0.3333333333333333 * (0.25 * t12 + t14) + 0.5 * py * py));
    }
    massData.set$mass($.$$mul(density, area));
    center.mulLocal$1(1 / area);
    massData.get$center().setFrom$1(center);
    if (typeof density !== "number")
      throw $.iae(density);
    massData.set$inertia(I * density);
  },
  computeMass$2$bailout: function(state0, massData, pRef, density, e1, e2, center, t1) {
    var t3, area, I, i, p2, p3, D, triangleArea, t2, t4, t5, t6, t7, px, py, ex1, ey1, ex2, ey2, t8, t9, t10, t11, t12, t13, t14, t15;
    t3 = $.getInterceptor$JSStringJSArray(t1);
    area = 0;
    I = 0;
    i = 0;
    for (; $.CONSTANT2.$lt(i, this.vertexCount);) {
      p2 = t3.$index(t1, i);
      ++i;
      p3 = $.CONSTANT2.$lt(i, this.vertexCount) ? t3.$index(t1, i) : t3.$index(t1, 0);
      e1.setFrom$1(p2);
      e1.subLocal$1(pRef);
      e2.setFrom$1(p3);
      e2.subLocal$1(pRef);
      D = $.$$sub($.$$mul(e1.x, e2.y), $.$$mul(e1.y, e2.x));
      if (typeof D !== "number")
        throw $.iae(D);
      triangleArea = 0.5 * D;
      area += triangleArea;
      t2 = center.x;
      t4 = triangleArea * 0.3333333333333333;
      t5 = $.$$add($.$$add(pRef.x, p2.get$x()), p3.get$x());
      if (typeof t5 !== "number")
        throw $.iae(t5);
      center.x = $.$$add(t2, t4 * t5);
      t6 = center.y;
      t7 = $.$$add($.$$add(pRef.y, p2.get$y()), p3.get$y());
      if (typeof t7 !== "number")
        throw $.iae(t7);
      center.y = $.$$add(t6, t4 * t7);
      px = pRef.x;
      py = pRef.y;
      ex1 = e1.x;
      ey1 = e1.y;
      ex2 = e2.x;
      ey2 = e2.y;
      t8 = $.getInterceptor$JSNumber(ex2);
      t9 = $.$$add($.$$add($.$$mul(ex1, ex1), t8.$mul(ex2, ex1)), t8.$mul(ex2, ex2));
      if (typeof t9 !== "number")
        throw $.iae(t9);
      t10 = $.getInterceptor$JSNumber(px);
      t11 = $.$$add(t10.$mul(px, ex1), t10.$mul(px, ex2));
      if (typeof t11 !== "number")
        throw $.iae(t11);
      if (typeof px !== "number")
        throw $.iae(px);
      t12 = $.getInterceptor$JSNumber(ey2);
      t13 = $.$$add($.$$add($.$$mul(ey1, ey1), t12.$mul(ey2, ey1)), t12.$mul(ey2, ey2));
      if (typeof t13 !== "number")
        throw $.iae(t13);
      t14 = $.getInterceptor$JSNumber(py);
      t15 = $.$$add(t14.$mul(py, ey1), t14.$mul(py, ey2));
      if (typeof t15 !== "number")
        throw $.iae(t15);
      if (typeof py !== "number")
        throw $.iae(py);
      I += D * (0.3333333333333333 * (0.25 * t9 + t11) + 0.5 * px * px + (0.3333333333333333 * (0.25 * t13 + t15) + 0.5 * py * py));
    }
    massData.set$mass($.$$mul(density, area));
    center.mulLocal$1(1 / area);
    massData.get$center().setFrom$1(center);
    if (typeof density !== "number")
      throw $.iae(density);
    massData.set$inertia(I * density);
  },
  PolygonShape$copy$1: function(other) {
    var t1, i, t2;
    t1 = this.vertices;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.PolygonShape$copy$1$bailout(1, other, t1);
    i = 0;
    for (; $.CONSTANT2.$lt(i, $.length(other.get$vertices())); ++i) {
      t2 = $.Vector$copy($.$$index(other.get$vertices(), i));
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
    t1 = this.normals;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.PolygonShape$copy$1$bailout(2, other, t1);
    i = 0;
    for (; $.CONSTANT2.$lt(i, $.length(other.get$normals())); ++i) {
      t2 = $.Vector$copy($.$$index(other.get$normals(), i));
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  },
  PolygonShape$copy$1$bailout: function(state0, other, t1) {
    switch (state0) {
      case 0:
        t1 = this.vertices;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSArray(t1);
        i = 0;
        for (; $.CONSTANT2.$lt(i, $.length(other.get$vertices())); ++i)
          t3.$indexSet(t1, i, $.Vector$copy($.$$index(other.get$vertices(), i)));
        t1 = this.normals;
      case 2:
        var t3, i;
        state0 = 0;
        t3 = $.getInterceptor$JSArray(t1);
        i = 0;
        for (; $.CONSTANT2.$lt(i, $.length(other.get$normals())); ++i)
          t3.$indexSet(t1, i, $.Vector$copy($.$$index(other.get$normals(), i)));
    }
  },
  PolygonShape$0: function() {
    var t1, i, t2;
    t1 = this.vertices;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.PolygonShape$0$bailout(1, t1);
    i = 0;
    for (; i < t1.length; ++i) {
      t2 = $.Vector$(0, 0);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
    t1 = this.normals;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.PolygonShape$0$bailout(2, t1);
    i = 0;
    for (; i < t1.length; ++i) {
      t2 = $.Vector$(0, 0);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  },
  PolygonShape$0$bailout: function(state0, t1) {
    switch (state0) {
      case 0:
        t1 = this.vertices;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSArray(t1);
        i = 0;
        for (; $.CONSTANT2.$lt(i, $.length(t1)); ++i)
          t3.$indexSet(t1, i, $.Vector$(0, 0));
        t1 = this.normals;
      case 2:
        var t3, i;
        state0 = 0;
        t3 = $.getInterceptor$JSArray(t1);
        i = 0;
        for (; $.CONSTANT2.$lt(i, $.length(t1)); ++i)
          t3.$indexSet(t1, i, $.Vector$(0, 0));
    }
  }
};

$$.Shape = {"": "Object;type=,radius="};

$$.IViewportTransform = {"": "Object;center>"};

$$.Matrix22 = {"": "Object;col1>,col2>",
  $eq: function(other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$isMatrix22)
      t1 = $.$$eq(this.col1, other.col1) === true && $.$$eq(this.col2, other.col2) === true;
    else
      t1 = false;
    return t1;
  },
  setAngle$1: function(angle) {
    var cosin, sin;
    cosin = Math.cos($.checkNum(angle));
    sin = Math.sin($.checkNum(angle));
    this.col1.setCoords$2(cosin, sin);
    this.col2.setCoords$2(-sin, cosin);
  },
  multiplyVectorToOut$2: function(v, out) {
    var tempy = $.$$add($.$$mul(this.col1.get$y(), v.get$x()), $.$$mul(this.col2.get$y(), v.get$y()));
    out.x = $.$$add($.$$mul(this.col1.get$x(), v.get$x()), $.$$mul(this.col2.get$x(), v.get$y()));
    out.y = tempy;
  },
  setFrom$1: function(matrix) {
    this.col1.setFrom$1(matrix.get$col1());
    this.col2.setFrom$1(matrix.get$col2());
  },
  invertLocal$0: function() {
    var t1, a, t3, b, c, d, det;
    t1 = this.col1;
    a = t1.get$x();
    if (typeof a !== "number")
      return this.invertLocal$0$bailout(1, a, t1);
    t3 = this.col2;
    b = t3.get$x();
    if (typeof b !== "number")
      return this.invertLocal$0$bailout(2, a, t1, b, t3);
    c = t1.get$y();
    if (typeof c !== "number")
      return this.invertLocal$0$bailout(3, a, 0, b, t3, c);
    d = t3.get$y();
    if (typeof d !== "number")
      return this.invertLocal$0$bailout(4, a, 0, b, 0, c, d);
    det = a * d - b * c;
    if (!(det === 0))
      det = 1 / det;
    t1.set$x(det * d);
    t1 = -det;
    this.col2.set$x(t1 * b);
    this.col1.set$y(t1 * c);
    this.col2.set$y(det * a);
    return this;
  },
  invertLocal$0$bailout: function(state0, a, t1, b, t3, c, d, det) {
    switch (state0) {
      case 0:
        t1 = this.col1;
        a = t1.get$x();
      case 1:
        state0 = 0;
        t3 = this.col2;
        b = t3.get$x();
      case 2:
        state0 = 0;
        c = t1.get$y();
      case 3:
        state0 = 0;
        d = t3.get$y();
      case 4:
        state0 = 0;
        det = $.$$sub($.$$mul(a, d), $.$$mul(b, c));
      case 5:
        var t2;
        if (state0 === 5 || state0 === 0 && $.$$eq(det, 0) !== true)
          switch (state0) {
            case 0:
              if (typeof det !== "number")
                throw $.iae(det);
              det = 1 / det;
            case 5:
              state0 = 0;
          }
        t1 = $.getInterceptor$JSNumber(det);
        t2 = t1.$mul(det, d);
        this.col1.set$x(t2);
        t2 = $.$$mul(t1.$negate(det), b);
        this.col2.set$x(t2);
        t2 = $.$$mul(t1.$negate(det), c);
        this.col1.set$y(t2);
        t1 = t1.$mul(det, a);
        this.col2.set$y(t1);
        return this;
    }
  },
  addLocal$1: function(other) {
    var t1, t2, t4, t6, t8, t10, t12, t14, t16;
    t1 = this.col1;
    t2 = t1.get$x();
    t4 = other.get$col1().get$x();
    if (typeof t2 !== "number")
      return this.addLocal$1$bailout(1, other, t1, t2);
    if (typeof t4 !== "number")
      return this.addLocal$1$bailout(2, other, t1, t2, t4);
    t1.set$x(t2 + t4);
    t1 = this.col1;
    t6 = t1.get$y();
    t8 = other.get$col1().get$y();
    if (typeof t6 !== "number")
      return this.addLocal$1$bailout(3, other, t1, 0, 0, t6);
    if (typeof t8 !== "number")
      return this.addLocal$1$bailout(4, other, t1, 0, 0, t6, t8);
    t1.set$y(t6 + t8);
    t1 = this.col2;
    t10 = t1.get$x();
    t12 = other.get$col2().get$x();
    if (typeof t10 !== "number")
      return this.addLocal$1$bailout(5, other, t1, 0, 0, 0, 0, t10);
    if (typeof t12 !== "number")
      return this.addLocal$1$bailout(6, other, t1, 0, 0, 0, 0, t10, t12);
    t1.set$x(t10 + t12);
    t1 = this.col2;
    t14 = t1.get$y();
    t16 = other.get$col2().get$y();
    if (typeof t14 !== "number")
      return this.addLocal$1$bailout(7, other, t1, 0, 0, 0, 0, 0, 0, t14);
    if (typeof t16 !== "number")
      return this.addLocal$1$bailout(8, 0, t1, 0, 0, 0, 0, 0, 0, t14, t16);
    t1.set$y(t14 + t16);
    return this;
  },
  addLocal$1$bailout: function(state0, other, t1, t2, t4, t6, t8, t10, t12, t14, t16) {
    switch (state0) {
      case 0:
        t1 = this.col1;
        t2 = t1.get$x();
      case 1:
        state0 = 0;
        t4 = other.get$col1().get$x();
      case 2:
        state0 = 0;
        t1.set$x($.$$add(t2, t4));
        t1 = this.col1;
        t6 = t1.get$y();
      case 3:
        state0 = 0;
        t8 = other.get$col1().get$y();
      case 4:
        state0 = 0;
        t1.set$y($.$$add(t6, t8));
        t1 = this.col2;
        t10 = t1.get$x();
      case 5:
        state0 = 0;
        t12 = other.get$col2().get$x();
      case 6:
        state0 = 0;
        t1.set$x($.$$add(t10, t12));
        t1 = this.col2;
        t14 = t1.get$y();
      case 7:
        state0 = 0;
        t16 = other.get$col2().get$y();
      case 8:
        state0 = 0;
        t1.set$y($.$$add(t14, t16));
        return this;
    }
  },
  toString$0: function() {
    return $.S(this.col1) + ", " + $.S(this.col2);
  },
  Matrix22$fromAngle$1: function(angle) {
    this.setAngle$1(angle);
  },
  Matrix22$2: function(c1, c2) {
    if (c1 == null)
      c1 = $.Vector$(0, 0);
    if (c2 == null)
      c2 = $.Vector$(0, 0);
    this.col1 = c1;
    this.col2 = c2;
  },
  $isMatrix22: true
};

$$.Sweep = {"": "Object;localCenter>,centerZero>,center>,angleZero=,angle=",
  $eq: function(other) {
    if (other == null)
      return false;
    return this.localCenter.$eq(other.get$localCenter()) === true && this.centerZero.$eq(other.get$centerZero()) === true && this.center.$eq(other.get$center()) === true && $.$$eq(this.angleZero, other.get$angleZero()) === true && $.$$eq(this.angle, other.get$angle()) === true;
  },
  setFrom$1: function(other) {
    this.localCenter.setFrom$1(other.get$localCenter());
    this.centerZero.setFrom$1(other.get$centerZero());
    this.center.setFrom$1(other.get$center());
    this.angleZero = other.get$angleZero();
    this.angle = other.get$angle();
  },
  normalize$0: function() {
    var t1, d;
    t1 = $.floor($.$$div(this.angleZero, 6.283185307179586));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    d = 6.283185307179586 * t1;
    this.angleZero = $.$$sub(this.angleZero, d);
    this.angle = $.$$sub(this.angle, d);
  },
  getTransform$2: function(xf, alpha) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t12, t14, t15, t18, t20, t22, t24, t27;
    if (typeof alpha !== "number")
      throw $.iae(alpha);
    t1 = 1 - alpha;
    t2 = this.centerZero;
    t3 = t2.x;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = this.center;
    t5 = t4.x;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t6 = xf.position;
    t6.set$x(t1 * t3 + alpha * t5);
    t2 = t2.y;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t4 = t4.y;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t6.set$y(t1 * t2 + alpha * t4);
    t7 = xf.rotation;
    t8 = this.angleZero;
    if (typeof t8 !== "number")
      throw $.iae(t8);
    t9 = this.angle;
    if (typeof t9 !== "number")
      throw $.iae(t9);
    t7.setAngle$1(t1 * t8 + alpha * t9);
    t10 = t6.get$x();
    t12 = t7.col1.get$x();
    t14 = this.localCenter;
    t15 = t14.x;
    if (typeof t12 !== "number")
      return this.getTransform$2$bailout(2, t6, t7, t10, t12);
    if (typeof t15 !== "number")
      return this.getTransform$2$bailout(3, t6, t7, t10, t12, t14, t15);
    t15 = t12 * t15;
    t12 = t7.col2.get$x();
    t18 = t14.y;
    if (typeof t12 !== "number")
      return this.getTransform$2$bailout(4, t6, t7, t10, t12, t14, t15);
    if (typeof t18 !== "number")
      return this.getTransform$2$bailout(5, t6, t7, t10, t12, t14, t15, t18);
    if (typeof t10 !== "number")
      return this.getTransform$2$bailout(1, t6, t7, t10);
    t6.set$x(t10 - (t15 + t12 * t18));
    t20 = t6.get$y();
    t22 = t7.col1.get$y();
    t24 = t14.x;
    if (typeof t22 !== "number")
      return this.getTransform$2$bailout(7, t6, t7, 0, 0, t14, 0, 0, t20, t22);
    if (typeof t24 !== "number")
      return this.getTransform$2$bailout(8, t6, t7, 0, 0, t14, 0, 0, t20, t22, t24);
    t24 = t22 * t24;
    t22 = t7.col2.get$y();
    t27 = t14.y;
    if (typeof t22 !== "number")
      return this.getTransform$2$bailout(9, t6, 0, 0, 0, t14, 0, 0, t20, t22, t24);
    if (typeof t27 !== "number")
      return this.getTransform$2$bailout(10, t6, 0, 0, 0, 0, 0, 0, t20, t22, t24, t27);
    if (typeof t20 !== "number")
      return this.getTransform$2$bailout(6, t6, t7, 0, 0, t14, 0, 0, t20);
    t6.set$y(t20 - (t24 + t22 * t27));
  },
  getTransform$2$bailout: function(state0, t6, t7, t10, t12, t14, t15, t18, t20, t22, t24, t27) {
    switch (state0) {
      case 0:
        if (typeof alpha !== "number")
          throw $.iae(alpha);
        t1 = 1 - alpha;
        t2 = this.centerZero;
        t3 = t2.x;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t4 = this.center;
        t5 = t4.x;
        if (typeof t5 !== "number")
          throw $.iae(t5);
        t6 = xf.position;
        t6.set$x(t1 * t3 + alpha * t5);
        t2 = t2.y;
        if (typeof t2 !== "number")
          throw $.iae(t2);
        t4 = t4.y;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        t6.set$y(t1 * t2 + alpha * t4);
        t7 = xf.rotation;
        t8 = this.angleZero;
        if (typeof t8 !== "number")
          throw $.iae(t8);
        t9 = this.angle;
        if (typeof t9 !== "number")
          throw $.iae(t9);
        t7.setAngle$1(t1 * t8 + alpha * t9);
        t10 = t6.get$x();
      case 1:
        state0 = 0;
        t12 = t7.col1.get$x();
      case 2:
        state0 = 0;
        t14 = this.localCenter;
        t15 = t14.x;
      case 3:
        state0 = 0;
        t15 = $.$$mul(t12, t15);
        t12 = t7.col2.get$x();
      case 4:
        state0 = 0;
        t18 = t14.y;
      case 5:
        state0 = 0;
        t6.set$x($.$$sub(t10, $.$$add(t15, $.$$mul(t12, t18))));
        t20 = t6.get$y();
      case 6:
        state0 = 0;
        t22 = t7.col1.get$y();
      case 7:
        state0 = 0;
        t24 = t14.x;
      case 8:
        state0 = 0;
        t24 = $.$$mul(t22, t24);
        t22 = t7.col2.get$y();
      case 9:
        state0 = 0;
        t27 = t14.y;
      case 10:
        var t1, t2, t3, t4, t5, t8, t9;
        state0 = 0;
        t6.set$y($.$$sub(t20, $.$$add(t24, $.$$mul(t22, t27))));
    }
  },
  advance$1: function(time) {
    var t1, t2, t3, t4, t5, t6, t7;
    if (typeof time !== "number")
      throw $.iae(time);
    t1 = 1 - time;
    t2 = this.centerZero;
    t3 = t2.x;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = this.center;
    t5 = t4.x;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t2.x = t1 * t3 + time * t5;
    t6 = t2.y;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t4 = t4.y;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t2.y = t1 * t6 + time * t4;
    t2 = this.angleZero;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t7 = this.angle;
    if (typeof t7 !== "number")
      throw $.iae(t7);
    this.angleZero = t1 * t2 + time * t7;
  }
};

$$.Transform = {"": "Object;position>,rotation>",
  $eq: function(other) {
    if (other == null)
      return false;
    return $.$$eq(this.position, other.get$position()) === true && this.rotation.$eq(other.get$rotation()) === true;
  },
  setFromPositionAndRotation$2: function(argPosition, argRotation) {
    this.position.setFrom$1(argPosition);
    this.rotation.setFrom$1(argRotation);
  },
  setFrom$1: function(other) {
    this.position.setFrom$1(other.get$position());
    this.rotation.setFrom$1(other.get$rotation());
  }
};

$$.Vector = {"": "Object;x=,y=",
  $eq: function(other) {
    if (other == null)
      return false;
    return $.$$eq(this.x, other.get$x()) === true && $.$$eq(this.y, other.get$y()) === true;
  },
  addLocal$1: function(v) {
    this.x = $.$$add(this.x, v.get$x());
    this.y = $.$$add(this.y, v.get$y());
    return this;
  },
  subLocal$1: function(other) {
    this.x = $.$$sub(this.x, other.get$x());
    this.y = $.$$sub(this.y, other.get$y());
    return this;
  },
  setCoords$2: function(xCoord, yCoord) {
    this.x = xCoord;
    this.y = yCoord;
    return this;
  },
  setFrom$1: function(v) {
    var t1, t2;
    t1 = v.get$x();
    t2 = v.get$y();
    this.x = t1;
    this.y = t2;
    return this;
  },
  mulLocal$1: function(d) {
    this.x = $.$$mul(this.x, d);
    this.y = $.$$mul(this.y, d);
    return this;
  },
  setZero$0: function() {
    this.x = 0;
    this.y = 0;
    return this;
  },
  get$length: function() {
    return $.sqrt(this.get$lengthSquared());
  },
  get$lengthSquared: function() {
    var t1, t2;
    t1 = this.x;
    t1 = $.$$mul(t1, t1);
    t2 = this.y;
    return $.$$add(t1, $.$$mul(t2, t2));
  },
  absLocal$0: function() {
    this.x = $.abs(this.x);
    this.y = $.abs(this.y);
  },
  normalize$0: function() {
    var len, invLength;
    len = $.length(this);
    if ($.$$lt(len, 1.192e-7) === true)
      return 0;
    if (typeof len !== "number")
      throw $.iae(len);
    invLength = 1 / len;
    this.x = $.$$mul(this.x, invLength);
    this.y = $.$$mul(this.y, invLength);
    return len;
  },
  distanceBetween$1: function(v) {
    var xDelta, yDelta;
    xDelta = $.$$sub(this.x, v.get$x());
    yDelta = $.$$sub(this.y, v.get$y());
    return Math.sqrt($.checkNum($.$$add($.$$mul(xDelta, xDelta), $.$$mul(yDelta, yDelta))));
  },
  rotate$1: function(angle) {
    var mtx, temp;
    mtx = $.Matrix22$(null, null);
    mtx.setAngle$1(angle);
    temp = $.Vector$(0, 0);
    mtx.multiplyVectorToOut$2(this, temp);
    return temp;
  },
  negateLocal$0: function() {
    this.x = $.$$negate(this.x);
    this.y = $.$$negate(this.y);
    return this;
  },
  toString$0: function() {
    return "(" + $.S(this.x) + ", " + $.S(this.y) + ")";
  }
};

$$.Body = {"": "Object;world,flags=,contactList=,sleepTime=,userData=,_linearVelocity,_angularVelocity,mass=,invMass>,next=,prev=,fixtureList=,fixtureCount<,jointList=,_force>,_torque=,_inertia,invInertia>,linearDamping>,angularDamping>,_type>,islandIndex<,originTransform>,sweep>,_fixDef,_pmd,_pxf,oldCenter,tempCenter",
  createFixture$1: function(def) {
    var fixture, t1;
    fixture = $.Fixture$();
    fixture.create$2(this, def);
    if ($.$$eq($.$$and(this.flags, 32), 32) === true)
      fixture.createProxy$2(this.world._contactManager.get$broadPhase(), this.originTransform);
    fixture.next = this.fixtureList;
    this.fixtureList = fixture;
    this.fixtureCount = $.$$add(this.fixtureCount, 1);
    fixture.body = this;
    if ($.$$gt(fixture.density, 0) === true)
      this.resetMassData$0();
    t1 = this.world;
    t1._flags = $.$$or(t1._flags, 1);
    return fixture;
  },
  createFixtureFromShape$2: function(shape, density) {
    var t1 = this._fixDef;
    t1.shape = shape;
    t1.density = density;
    return this.createFixture$1(t1);
  },
  createFixtureFromShape$1: function(shape) {
    return this.createFixtureFromShape$2(shape, 0);
  },
  get$position: function() {
    return this.originTransform.position;
  },
  get$angle: function() {
    return this.sweep.angle;
  },
  get$localCenter: function() {
    return this.sweep.localCenter;
  },
  get$linearVelocity: function() {
    return this._linearVelocity;
  },
  set$linearVelocity: function(v) {
    if ($.$$eq(this._type, 0) === true)
      return;
    if ($.$$gt($.Vector_dot(v, v), 0) === true)
      this.set$awake(true);
    this._linearVelocity.setFrom$1(v);
  },
  get$angularVelocity: function() {
    return this._angularVelocity;
  },
  set$angularVelocity: function(w) {
    if ($.$$eq(this._type, 0) !== true) {
      if ($.$$gt($.$$mul(w, w), 0) === true)
        this.set$awake(true);
      this._angularVelocity = w;
    }
  },
  get$inertia: function() {
    var t1, t3, t5, t6;
    t1 = this._inertia;
    t3 = this.mass;
    t5 = this.sweep.localCenter;
    t6 = t5.x;
    if (typeof t6 !== "number")
      return this.get$inertia$bailout(3, t1, t3, t6, t5);
    t6 *= t6;
    t5 = t5.y;
    if (typeof t5 !== "number")
      return this.get$inertia$bailout(4, t1, t3, t6, t5);
    if (typeof t3 !== "number")
      return this.get$inertia$bailout(2, t1, t3);
    if (typeof t1 !== "number")
      return this.get$inertia$bailout(1, t1);
    return t1 + t3 * (t6 + t5 * t5);
  },
  get$inertia$bailout: function(state0, t1, t3, t6, t5) {
    switch (state0) {
      case 0:
        t1 = this._inertia;
      case 1:
        state0 = 0;
        t3 = this.mass;
      case 2:
        state0 = 0;
        t5 = this.sweep.localCenter;
        t6 = t5.x;
      case 3:
        state0 = 0;
        t6 = $.$$mul(t6, t6);
        t5 = t5.y;
      case 4:
        state0 = 0;
        return $.$$add(t1, $.$$mul(t3, $.$$add(t6, $.$$mul(t5, t5))));
    }
  },
  getMassData$1: function(data) {
    var lc, t1, t3, t5, t7;
    data.set$mass(this.mass);
    lc = this.sweep.localCenter;
    t1 = this._inertia;
    t3 = this.mass;
    t5 = lc.get$lengthSquared();
    if (typeof t3 !== "number")
      return this.getMassData$1$bailout(2, data, lc, t1, t3);
    if (typeof t5 !== "number")
      return this.getMassData$1$bailout(3, data, lc, t1, t3, t5);
    if (typeof t1 !== "number")
      return this.getMassData$1$bailout(1, data, lc, t1);
    data.set$inertia(t1 + t3 * t5);
    t7 = lc.x;
    data.get$center().set$x(t7);
    t7 = lc.y;
    data.get$center().set$y(t7);
  },
  getMassData$1$bailout: function(state0, data, lc, t1, t3, t5) {
    switch (state0) {
      case 0:
        data.set$mass(this.mass);
        lc = this.sweep.localCenter;
        t1 = this._inertia;
      case 1:
        state0 = 0;
        t3 = this.mass;
      case 2:
        state0 = 0;
        t5 = lc.get$lengthSquared();
      case 3:
        var t7;
        state0 = 0;
        data.set$inertia($.$$add(t1, $.$$mul(t3, t5)));
        t7 = lc.x;
        data.get$center().set$x(t7);
        t7 = lc.y;
        data.get$center().set$y(t7);
    }
  },
  resetMassData$0: function() {
    var t1, t2, t3, massData, f, t4, temp, t5, t6, t7, t8;
    this.mass = 0;
    this.invMass = 0;
    this._inertia = 0;
    this.invInertia = 0;
    t1 = this.sweep;
    t2 = t1.localCenter;
    t2.setZero$0();
    if ($.$$eq(this._type, 0) === true || $.$$eq(this._type, 1) === true) {
      t2 = t1.center;
      t3 = this.originTransform.position;
      t2.setFrom$1(t3);
      t1.centerZero.setFrom$1(t3);
      return;
    }
    t3 = this.tempCenter;
    t3.setZero$0();
    massData = this._pmd;
    for (f = this.fixtureList, t4 = massData.center; !(f == null); f = f.get$next()) {
      if ($.$$eq(f.get$density(), 0) === true)
        continue;
      f.getMassData$1(massData);
      this.mass = $.$$add(this.mass, massData.mass);
      temp = $.Vector$copy(t4);
      temp.mulLocal$1(massData.mass);
      t3.addLocal$1(temp);
      this._inertia = $.$$add(this._inertia, massData.inertia);
    }
    if ($.$$gt(this.mass, 0) === true) {
      t4 = this.mass;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      this.invMass = 1 / t4;
      t3.mulLocal$1(this.invMass);
    } else {
      this.mass = 1;
      this.invMass = 1;
    }
    if ($.$$gt(this._inertia, 0) === true && $.$$eq($.$$and(this.flags, 16), 0) === true) {
      t4 = this._inertia;
      t5 = this.mass;
      t6 = t3.x;
      t6 = $.$$mul(t6, t6);
      t7 = t3.y;
      this._inertia = $.$$sub(t4, $.$$mul(t5, $.$$add(t6, $.$$mul(t7, t7))));
      t8 = this._inertia;
      if (typeof t8 !== "number")
        throw $.iae(t8);
      this.invInertia = 1 / t8;
    } else {
      this._inertia = 0;
      this.invInertia = 0;
    }
    t4 = this.oldCenter;
    t5 = t1.center;
    t4.setFrom$1(t5);
    t2.setFrom$1(t3);
    t3 = this.originTransform;
    t1 = t1.centerZero;
    $.Transform_mulToOut(t3, t2, t1);
    t5.setFrom$1(t1);
    temp = $.Vector$copy(t5);
    temp.subLocal$1(t4);
    $.Vector_crossNumAndVectorToOut(this._angularVelocity, temp, temp);
    this._linearVelocity.addLocal$1(temp);
  },
  getWorldPoint$1: function(localPoint) {
    var v = $.Vector$(0, 0);
    $.Transform_mulToOut(this.originTransform, localPoint, v);
    return v;
  },
  getWorldPointToOut$2: function(localPoint, out) {
    $.Transform_mulToOut(this.originTransform, localPoint, out);
  },
  getWorldVector$1: function(localVector) {
    var out = $.Vector$(0, 0);
    this.getWorldVectorToOut$2(localVector, out);
    return out;
  },
  getWorldVectorToOut$2: function(localVector, out) {
    $.Matrix22_mulMatrixAndVectorToOut(this.originTransform.rotation, localVector, out);
  },
  get$type: function() {
    return this._type;
  },
  set$type: function(otherType) {
    var ce;
    if ($.$$eq(this._type, otherType) === true)
      return;
    this._type = otherType;
    this.resetMassData$0();
    if ($.$$eq(this._type, 0) === true) {
      this._linearVelocity.setZero$0();
      this._angularVelocity = 0;
    }
    this.set$awake(true);
    this._force.setZero$0();
    this._torque = 0;
    for (ce = this.contactList; !(ce == null); ce = ce.get$next())
      ce.get$contact().flagForFiltering$0();
  },
  get$bullet: function() {
    var t1 = this.flags;
    if (t1 !== (t1 | 0))
      return this.get$bullet$bailout(1, t1);
    return (t1 & 8) === 8;
  },
  get$bullet$bailout: function(state0, t1) {
    return $.$$eq($.$$and(t1, 8), 8);
  },
  set$awake: function(flag) {
    var t1;
    if (flag === true) {
      t1 = this.flags;
      if (t1 !== (t1 | 0))
        return this.set$awake$bailout(1, t1);
      if ((t1 & 2) === 0) {
        this.flags = (t1 | 2) >>> 0;
        this.sleepTime = 0;
      }
    } else {
      t1 = this.flags;
      if (t1 !== (t1 | 0))
        return this.set$awake$bailout(3, t1);
      this.flags = (t1 & 4294967293) >>> 0;
      this.sleepTime = 0;
      this._linearVelocity.setZero$0();
      this._angularVelocity = 0;
      this._force.setZero$0();
      this._torque = 0;
    }
  },
  set$awake$bailout: function(state0, t1) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 2 || state0 === 1 || state0 === 0 && flag === true)
          switch (state0) {
            case 0:
              t1 = this.flags;
            case 1:
              state0 = 0;
            case 2:
              if (state0 === 2 || state0 === 0 && $.$$eq($.$$and(t1, 2), 0) === true)
                switch (state0) {
                  case 0:
                    t1 = this.flags;
                  case 2:
                    state0 = 0;
                    this.flags = $.$$or(t1, 2);
                    this.sleepTime = 0;
                }
          }
        else
          switch (state0) {
            case 0:
              t1 = this.flags;
            case 3:
              state0 = 0;
              this.flags = $.$$and(t1, 4294967293);
              this.sleepTime = 0;
              this._linearVelocity.setZero$0();
              this._angularVelocity = 0;
              this._force.setZero$0();
              this._torque = 0;
          }
    }
  },
  get$awake: function() {
    return $.$$eq($.$$and(this.flags, 2), 2);
  },
  get$active: function() {
    var t1 = this.flags;
    if (t1 !== (t1 | 0))
      return this.get$active$bailout(1, t1);
    return (t1 & 32) === 32;
  },
  get$active$bailout: function(state0, t1) {
    return $.$$eq($.$$and(t1, 32), 32);
  },
  get$fixedRotation: function() {
    return $.$$eq($.$$and(this.flags, 16), 16);
  },
  synchronizeFixtures$0: function() {
    var xf1, t1, t2, t3, t4, broadPhase, f;
    xf1 = this._pxf;
    t1 = xf1.rotation;
    t2 = this.sweep;
    t1.setAngle$1(t2.angleZero);
    t3 = t2.localCenter;
    t4 = xf1.position;
    $.Matrix22_mulMatrixAndVectorToOut(t1, t3, t4);
    t4.mulLocal$1(-1);
    t4.addLocal$1(t2.centerZero);
    broadPhase = this.world._contactManager.get$broadPhase();
    for (f = this.fixtureList, t1 = this.originTransform; !(f == null); f = f.get$next())
      f.synchronize$3(broadPhase, xf1, t1);
  },
  synchronizeTransform$0: function() {
    var t1, c, s, t, r, p, t2, t4, t5, t8, t10, t11, t13, t15, t18, t20;
    t1 = this.sweep;
    c = Math.cos($.checkNum(t1.angle));
    s = Math.sin($.checkNum(t1.angle));
    t = this.originTransform;
    r = t.rotation;
    p = t.position;
    r.col1.set$x(c);
    r.col2.set$x(-s);
    r.col1.set$y(s);
    r.col2.set$y(c);
    t2 = r.col1.get$x();
    t4 = t1.localCenter;
    t5 = t4.x;
    if (typeof t2 !== "number")
      return this.synchronizeTransform$0$bailout(1, r, p, t2, t1);
    if (typeof t5 !== "number")
      return this.synchronizeTransform$0$bailout(2, r, p, t2, t1, t4, t5);
    t5 = t2 * t5;
    t2 = r.col2.get$x();
    t8 = t4.y;
    if (typeof t2 !== "number")
      return this.synchronizeTransform$0$bailout(3, r, p, t2, t1, t4, t5);
    if (typeof t8 !== "number")
      return this.synchronizeTransform$0$bailout(4, r, p, t2, t1, t4, t5, t8);
    t10 = (t5 + t2 * t8) * -1;
    t1 = t1.center;
    t11 = t1.x;
    if (typeof t11 !== "number")
      return this.synchronizeTransform$0$bailout(5, r, p, 0, t1, t4, 0, 0, t11, t10);
    p.set$x(t10 + t11);
    t13 = r.col1.get$y();
    t15 = t4.x;
    if (typeof t13 !== "number")
      return this.synchronizeTransform$0$bailout(6, r, p, 0, t1, t4, 0, 0, 0, 0, t13);
    if (typeof t15 !== "number")
      return this.synchronizeTransform$0$bailout(7, r, p, 0, t1, t4, 0, 0, 0, 0, t13, t15);
    t15 = t13 * t15;
    t13 = r.col2.get$y();
    t18 = t4.y;
    if (typeof t13 !== "number")
      return this.synchronizeTransform$0$bailout(8, 0, p, 0, t1, t4, 0, 0, 0, 0, t13, t15);
    if (typeof t18 !== "number")
      return this.synchronizeTransform$0$bailout(9, 0, p, 0, t1, 0, 0, 0, 0, 0, t13, t15, t18);
    t20 = (t15 + t13 * t18) * -1;
    t1 = t1.y;
    if (typeof t1 !== "number")
      return this.synchronizeTransform$0$bailout(10, 0, p, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, t20);
    p.set$y(t20 + t1);
  },
  synchronizeTransform$0$bailout: function(state0, r, p, t2, t1, t4, t5, t8, t11, t10, t13, t15, t18, t20) {
    switch (state0) {
      case 0:
        t1 = this.sweep;
        c = Math.cos($.checkNum(t1.angle));
        s = Math.sin($.checkNum(t1.angle));
        t = this.originTransform;
        r = t.rotation;
        p = t.position;
        r.col1.set$x(c);
        r.col2.set$x(-s);
        r.col1.set$y(s);
        r.col2.set$y(c);
        t2 = r.col1.get$x();
      case 1:
        state0 = 0;
        t4 = t1.localCenter;
        t5 = t4.x;
      case 2:
        state0 = 0;
        t5 = $.$$mul(t2, t5);
        t2 = r.col2.get$x();
      case 3:
        state0 = 0;
        t8 = t4.y;
      case 4:
        state0 = 0;
        t10 = $.$$mul($.$$add(t5, $.$$mul(t2, t8)), -1);
        t1 = t1.center;
        t11 = t1.x;
      case 5:
        state0 = 0;
        p.set$x($.$$add(t10, t11));
        t13 = r.col1.get$y();
      case 6:
        state0 = 0;
        t15 = t4.x;
      case 7:
        state0 = 0;
        t15 = $.$$mul(t13, t15);
        t13 = r.col2.get$y();
      case 8:
        state0 = 0;
        t18 = t4.y;
      case 9:
        state0 = 0;
        t20 = $.$$mul($.$$add(t15, $.$$mul(t13, t18)), -1);
        t1 = t1.y;
      case 10:
        var c, s, t;
        state0 = 0;
        p.set$y($.$$add(t20, t1));
    }
  },
  shouldCollide$1: function(other) {
    var t1, t3;
    t1 = this._type;
    if (typeof t1 !== "number")
      return this.shouldCollide$1$bailout(1, other, t1);
    if (!(t1 === 2)) {
      t1 = other.get$_type();
      if (typeof t1 !== "number")
        return this.shouldCollide$1$bailout(2, 0, t1);
      t3 = !(t1 === 2);
      t1 = t3;
    } else
      t1 = false;
    return !t1;
  },
  shouldCollide$1$bailout: function(state0, other, t1) {
    switch (state0) {
      case 0:
        t1 = this._type;
      case 1:
        state0 = 0;
      case 2:
        var t3;
        if (state0 === 2 || state0 === 0 && $.$$eq(t1, 2) !== true)
          switch (state0) {
            case 0:
              t1 = other.get$_type();
            case 2:
              state0 = 0;
              t3 = $.$$eq(t1, 2) !== true;
              t1 = t3;
          }
        else
          t1 = false;
        return !t1;
    }
  },
  advance$1: function(t) {
    var t1 = this.sweep;
    t1.advance$1(t);
    t1.center.setFrom$1(t1.centerZero);
    t1.angle = t1.angleZero;
    this.synchronizeTransform$0();
  },
  Body$2: function(bd, world) {
    var t1, t2, t3, t4;
    if (bd.get$bullet() === true)
      this.flags = $.$$or(this.flags, 8);
    if (bd.get$fixedRotation() === true)
      this.flags = $.$$or(this.flags, 16);
    if (bd.get$allowSleep() === true)
      this.flags = $.$$or(this.flags, 4);
    if (bd.get$awake() === true)
      this.flags = $.$$or(this.flags, 2);
    if (bd.get$active() === true)
      this.flags = $.$$or(this.flags, 32);
    t1 = this.originTransform;
    t1.position.setFrom$1(bd.get$position());
    t1.rotation.setAngle$1(bd.get$angle());
    t2 = this.sweep;
    t3 = t2.localCenter;
    t3.setZero$0();
    t4 = t2.centerZero;
    $.Transform_mulToOut(t1, t3, t4);
    t2.center.setFrom$1(t4);
    t2.angle = bd.get$angle();
    t2.angleZero = bd.get$angle();
    if ($.$$eq(this._type, 2) === true) {
      this.mass = 1;
      this.invMass = 1;
    } else {
      this.mass = 0;
      this.invMass = 0;
    }
  }
};

$$.BodyDef = {"": "Object;type=,angle=,userData=,position=,linearVelocity=,angularVelocity=,fixedRotation>,isSleeping,bullet>,allowSleep>,linearDamping>,angularDamping>,awake=,active>"};

$$.ContactManager = {"": "Object;broadPhase>,contactList=,contactCount>,contactFilter,contactListener>,pool",
  addPair$2: function(fixtureA, fixtureB) {
    var bodyA, bodyB, edge, t1, fA, fB, c;
    bodyA = fixtureA.get$body();
    bodyB = fixtureB.get$body();
    if ($.$$eq(bodyA, bodyB) === true)
      return;
    edge = bodyB.get$contactList();
    for (; !(edge == null);) {
      if ($.$$eq(edge.get$other(), bodyA) === true) {
        t1 = edge.get$contact();
        fA = t1.get$fixtureA();
        fB = t1.get$fixtureB();
        t1 = $.getInterceptor(fA);
        if (t1.$eq(fA, fixtureA) === true && $.$$eq(fB, fixtureB) === true)
          return;
        if (t1.$eq(fA, fixtureB) === true && $.$$eq(fB, fixtureA) === true)
          return;
      }
      edge = edge.get$next();
    }
    t1 = bodyB.shouldCollide$1(bodyA);
    if (typeof t1 !== "boolean")
      return this.addPair$2$bailout(1, fixtureA, fixtureB, t1);
    if (!t1)
      return;
    t1 = this.contactFilter;
    t1 = t1.shouldCollide$2(fixtureA, fixtureB);
    if (typeof t1 !== "boolean")
      return this.addPair$2$bailout(2, fixtureA, fixtureB, t1);
    t1 = !t1;
    if (t1)
      return;
    c = this.pool.popContact$2(fixtureA, fixtureB);
    fixtureA = c.get$fixtureA();
    fixtureB = c.get$fixtureB();
    bodyA = fixtureA.get$body();
    bodyB = fixtureB.get$body();
    c.set$prev(null);
    c.set$next(this.contactList);
    t1 = this.contactList;
    if (!(t1 == null))
      t1.set$prev(c);
    this.contactList = c;
    c.get$edge1().set$contact(c);
    c.get$edge1().set$other(bodyB);
    c.get$edge1().set$prev(null);
    t1 = bodyA.get$contactList();
    c.get$edge1().set$next(t1);
    if (!(bodyA.get$contactList() == null)) {
      t1 = c.get$edge1();
      bodyA.get$contactList().set$prev(t1);
    }
    bodyA.set$contactList(c.get$edge1());
    c.get$edge2().set$contact(c);
    c.get$edge2().set$other(bodyA);
    c.get$edge2().set$prev(null);
    t1 = bodyB.get$contactList();
    c.get$edge2().set$next(t1);
    if (!(bodyB.get$contactList() == null)) {
      t1 = c.get$edge2();
      bodyB.get$contactList().set$prev(t1);
    }
    bodyB.set$contactList(c.get$edge2());
    this.contactCount = this.contactCount + 1;
  },
  addPair$2$bailout: function(state0, fixtureA, fixtureB, t1) {
    switch (state0) {
      case 0:
        bodyA = fixtureA.get$body();
        bodyB = fixtureB.get$body();
        if ($.$$eq(bodyA, bodyB) === true)
          return;
        edge = bodyB.get$contactList();
        for (; !(edge == null);) {
          if ($.$$eq(edge.get$other(), bodyA) === true) {
            t1 = edge.get$contact();
            fA = t1.get$fixtureA();
            fB = t1.get$fixtureB();
            t1 = $.getInterceptor(fA);
            if (t1.$eq(fA, fixtureA) === true && $.$$eq(fB, fixtureB) === true)
              return;
            if (t1.$eq(fA, fixtureB) === true && $.$$eq(fB, fixtureA) === true)
              return;
          }
          edge = edge.get$next();
        }
        t1 = bodyB.shouldCollide$1(bodyA);
      case 1:
        state0 = 0;
        if ($.$$eq(t1, false) === true)
          return;
        t1 = this.contactFilter;
        t1 = t1.shouldCollide$2(fixtureA, fixtureB);
      case 2:
        var bodyA, bodyB, edge, fA, fB, t3, c;
        state0 = 0;
        t3 = $.$$eq(t1, false) === true;
        t1 = t3;
        if (t1)
          return;
        c = this.pool.popContact$2(fixtureA, fixtureB);
        fixtureA = c.get$fixtureA();
        fixtureB = c.get$fixtureB();
        bodyA = fixtureA.get$body();
        bodyB = fixtureB.get$body();
        c.set$prev(null);
        c.set$next(this.contactList);
        t1 = this.contactList;
        if (!(t1 == null))
          t1.set$prev(c);
        this.contactList = c;
        c.get$edge1().set$contact(c);
        c.get$edge1().set$other(bodyB);
        c.get$edge1().set$prev(null);
        t1 = bodyA.get$contactList();
        c.get$edge1().set$next(t1);
        if (!(bodyA.get$contactList() == null)) {
          t1 = c.get$edge1();
          bodyA.get$contactList().set$prev(t1);
        }
        bodyA.set$contactList(c.get$edge1());
        c.get$edge2().set$contact(c);
        c.get$edge2().set$other(bodyA);
        c.get$edge2().set$prev(null);
        t1 = bodyB.get$contactList();
        c.get$edge2().set$next(t1);
        if (!(bodyB.get$contactList() == null)) {
          t1 = c.get$edge2();
          bodyB.get$contactList().set$prev(t1);
        }
        bodyB.set$contactList(c.get$edge2());
        this.contactCount = this.contactCount + 1;
    }
  },
  findNewContacts$0: function() {
    this.broadPhase.updatePairs$1(this);
  },
  destroy$1: function(c) {
    var fixtureA, fixtureB, bodyA, bodyB, t1, t2;
    fixtureA = c.get$fixtureA();
    fixtureB = c.get$fixtureB();
    bodyA = fixtureA.get$body();
    bodyB = fixtureB.get$body();
    t1 = this.contactListener;
    if (!(t1 == null) && c.get$touching() === true)
      t1.endContact$1(c);
    t1 = c.get$prev();
    if (!(t1 == null))
      t1.set$next(c.get$next());
    t1 = c.get$next();
    if (!(t1 == null))
      t1.set$prev(c.get$prev());
    if ($.$$eq(c, this.contactList) === true)
      this.contactList = c.get$next();
    t1 = c.get$edge1();
    t2 = t1.get$prev();
    if (!(t2 == null))
      t2.set$next(t1.get$next());
    t1 = c.get$edge1();
    t2 = t1.get$next();
    if (!(t2 == null))
      t2.set$prev(t1.get$prev());
    if ($.$$eq(c.get$edge1(), bodyA.get$contactList()) === true)
      bodyA.set$contactList(c.get$edge1().get$next());
    t1 = c.get$edge2();
    t2 = t1.get$prev();
    if (!(t2 == null))
      t2.set$next(t1.get$next());
    t1 = c.get$edge2();
    t2 = t1.get$next();
    if (!(t2 == null))
      t2.set$prev(t1.get$prev());
    if ($.$$eq(c.get$edge2(), bodyB.get$contactList()) === true)
      bodyB.set$contactList(c.get$edge2().get$next());
    this.pool.pushContact$1(c);
    this.contactCount = this.contactCount - 1;
  },
  collide$0: function() {
    var c, t1, t2, fixtureA, fixtureB, bodyA, bodyB, c0, proxyIdA, proxyIdB;
    c = this.contactList;
    for (t1 = this.contactFilter, t2 = this.contactListener; !(c == null);) {
      fixtureA = c.get$fixtureA();
      fixtureB = c.get$fixtureB();
      bodyA = fixtureA.get$body();
      bodyB = fixtureB.get$body();
      if ($.$$eq(bodyA.get$awake(), false) === true && $.$$eq(bodyB.get$awake(), false) === true) {
        c = c.get$next();
        continue;
      }
      if ($.$$eq($.$$and(c.get$flags(), 8), 8) === true) {
        if ($.$$eq(bodyB.shouldCollide$1(bodyA), false) === true) {
          c0 = c.get$next();
          this.destroy$1(c);
          c = c0;
          continue;
        }
        if ($.$$eq(t1.shouldCollide$2(fixtureA, fixtureB), false) === true) {
          c0 = c.get$next();
          this.destroy$1(c);
          c = c0;
          continue;
        }
        c.set$flags($.$$and(c.get$flags(), 4294967287));
      }
      proxyIdA = fixtureA.get$proxy();
      proxyIdB = fixtureB.get$proxy();
      if ($.$$eq(this.broadPhase.testOverlap$2(proxyIdA, proxyIdB), false) === true) {
        c0 = c.get$next();
        this.destroy$1(c);
        c = c0;
        continue;
      }
      c.update$1(t2);
      c = c.get$next();
    }
  }
};

$$.Filter = {"": "Object;categoryBits>,maskBits>,groupIndex>",
  setFrom$1: function(other) {
    this.categoryBits = other.get$categoryBits();
    this.maskBits = other.get$maskBits();
    this.groupIndex = other.get$groupIndex();
  }
};

$$.Fixture = {"": "Object;box>,density=,next=,body>,shape=,friction=,restitution=,proxy>,filter>,isSensor>,userData=,_poolOne,_poolTwo",
  create$2: function(b, def) {
    this.userData = def.get$userData();
    this.friction = def.get$friction();
    this.restitution = def.get$restitution();
    this.body = b;
    this.next = null;
    this.filter.setFrom$1(def.get$filter());
    this.isSensor = def.get$isSensor();
    this.shape = def.get$shape().clone$0();
    this.density = def.get$density();
  },
  destroy$0: function() {
    this.shape = null;
  },
  createProxy$2: function(broadPhase, xf) {
    var t1, t2;
    t1 = this.shape;
    t2 = this.box;
    t1.computeAxisAlignedBox$2(t2, xf);
    this.proxy = broadPhase.createProxy$2(t2, this);
  },
  destroyProxy$1: function(broadPhase) {
    var t1 = this.proxy;
    if (t1 == null)
      return;
    broadPhase.destroyProxy$1(t1);
    this.proxy = null;
  },
  synchronize$3: function(broadPhase, transformOne, transformTwo) {
    var t1, t2, t3, t5, t4, t6, disp, t8;
    if (this.proxy == null)
      return;
    t1 = this.shape;
    t2 = this._poolOne;
    t1.computeAxisAlignedBox$2(t2, transformOne);
    t1 = this.shape;
    t3 = this._poolTwo;
    t1.computeAxisAlignedBox$2(t3, transformTwo);
    t1 = t2.lowerBound.get$x();
    t5 = t3.lowerBound.get$x();
    if (typeof t1 !== "number")
      return this.synchronize$3$bailout(1, broadPhase, transformOne, transformTwo, t1, t2, t3);
    if (typeof t5 !== "number")
      return this.synchronize$3$bailout(2, broadPhase, transformOne, transformTwo, t1, t2, t3, t5);
    if (t1 < t5)
      ;
    else
      t1 = t5;
    t4 = this.box;
    t4.lowerBound.set$x(t1);
    t1 = t2.lowerBound.get$y();
    t6 = t3.lowerBound.get$y();
    if (typeof t1 !== "number")
      return this.synchronize$3$bailout(3, broadPhase, transformOne, transformTwo, t1, t2, t3, 0, t4);
    if (typeof t6 !== "number")
      return this.synchronize$3$bailout(4, broadPhase, transformOne, transformTwo, t1, t2, t3, 0, t4, t6);
    if (t1 < t6)
      ;
    else
      t1 = t6;
    t4.lowerBound.set$y(t1);
    t1 = t2.upperBound.get$x();
    t6 = t3.upperBound.get$x();
    if (typeof t1 !== "number")
      return this.synchronize$3$bailout(5, broadPhase, transformOne, transformTwo, t1, t2, t3, 0, t4);
    if (typeof t6 !== "number")
      return this.synchronize$3$bailout(6, broadPhase, transformOne, transformTwo, t1, t2, t3, 0, t4, t6);
    if (t1 > t6)
      ;
    else
      t1 = t6;
    t4.upperBound.set$x(t1);
    t1 = t2.upperBound.get$y();
    t6 = t3.upperBound.get$y();
    if (typeof t1 !== "number")
      return this.synchronize$3$bailout(7, broadPhase, transformOne, transformTwo, t1, t2, t3, 0, t4);
    if (typeof t6 !== "number")
      return this.synchronize$3$bailout(8, broadPhase, transformOne, transformTwo, t1, t2, t3, 0, t4, t6);
    if (t1 > t6)
      ;
    else
      t1 = t6;
    t4.upperBound.set$y(t1);
    disp = t2.lowerBound;
    t2 = transformTwo.get$position().get$x();
    t3 = transformOne.get$position().get$x();
    if (typeof t2 !== "number")
      return this.synchronize$3$bailout(9, broadPhase, transformOne, transformTwo, 0, t2, 0, 0, t4, 0, disp);
    if (typeof t3 !== "number")
      return this.synchronize$3$bailout(10, broadPhase, transformOne, transformTwo, 0, t2, t3, 0, t4, 0, disp);
    disp.set$x(t2 - t3);
    t6 = transformTwo.get$position().get$y();
    t8 = transformOne.get$position().get$y();
    if (typeof t6 !== "number")
      return this.synchronize$3$bailout(11, broadPhase, transformOne, 0, 0, 0, 0, 0, t4, t6, disp);
    if (typeof t8 !== "number")
      return this.synchronize$3$bailout(12, broadPhase, 0, 0, 0, 0, 0, 0, t4, t6, disp, t8);
    disp.set$y(t6 - t8);
    broadPhase.moveProxy$3(this.proxy, t4, disp);
  },
  synchronize$3$bailout: function(state0, broadPhase, transformOne, transformTwo, t1, t2, t3, t5, t4, t6, disp, t8) {
    switch (state0) {
      case 0:
        if (this.proxy == null)
          return;
        t1 = this.shape;
        t2 = this._poolOne;
        t1.computeAxisAlignedBox$2(t2, transformOne);
        t1 = this.shape;
        t3 = this._poolTwo;
        t1.computeAxisAlignedBox$2(t3, transformTwo);
        t1 = t2.lowerBound.get$x();
      case 1:
        state0 = 0;
        t5 = t3.lowerBound.get$x();
      case 2:
        state0 = 0;
        t1 = $.$$lt(t1, t5) === true ? t2.lowerBound.get$x() : t3.lowerBound.get$x();
        t4 = this.box;
        t4.lowerBound.set$x(t1);
        t1 = t2.lowerBound.get$y();
      case 3:
        state0 = 0;
        t6 = t3.lowerBound.get$y();
      case 4:
        state0 = 0;
        t1 = $.$$lt(t1, t6) === true ? t2.lowerBound.get$y() : t3.lowerBound.get$y();
        t4.lowerBound.set$y(t1);
        t1 = t2.upperBound.get$x();
      case 5:
        state0 = 0;
        t6 = t3.upperBound.get$x();
      case 6:
        state0 = 0;
        t1 = $.$$gt(t1, t6) === true ? t2.upperBound.get$x() : t3.upperBound.get$x();
        t4.upperBound.set$x(t1);
        t1 = t2.upperBound.get$y();
      case 7:
        state0 = 0;
        t6 = t3.upperBound.get$y();
      case 8:
        state0 = 0;
        t1 = $.$$gt(t1, t6) === true ? t2.upperBound.get$y() : t3.upperBound.get$y();
        t4.upperBound.set$y(t1);
        disp = t2.lowerBound;
        t2 = transformTwo.get$position().get$x();
      case 9:
        state0 = 0;
        t3 = transformOne.get$position().get$x();
      case 10:
        state0 = 0;
        disp.set$x($.$$sub(t2, t3));
        t6 = transformTwo.get$position().get$y();
      case 11:
        state0 = 0;
        t8 = transformOne.get$position().get$y();
      case 12:
        state0 = 0;
        disp.set$y($.$$sub(t6, t8));
        broadPhase.moveProxy$3(this.proxy, t4, disp);
    }
  },
  getMassData$1: function(massData) {
    this.shape.computeMass$2(massData, this.density);
  },
  get$type: function() {
    return this.shape.get$type();
  }
};

$$.FixtureDef = {"": "Object;shape=,userData=,friction=,restitution=,density=,isSensor>,filter>",
  FixtureDef$0: function() {
    var t1 = this.filter;
    t1.categoryBits = 1;
    t1.maskBits = 65535;
    t1.groupIndex = 0;
  }
};

$$.Island = {"": "Object;listener,bodies,contacts,joints,positions,velocities,bodyCount,jointCount,contactCount>,bodyCapacity,contactCapacity,jointCapacity,positionIterationCount,_contactSolver,_translation,impulse",
  init$4: function(argBodyCapacity, argContactCapacity, argJointCapacity, argListener) {
    var t1, old, i;
    this.bodyCapacity = argBodyCapacity;
    this.contactCapacity = argContactCapacity;
    this.jointCapacity = argJointCapacity;
    this.bodyCount = 0;
    this.contactCount = 0;
    this.listener = argListener;
    t1 = this.bodies;
    if (t1 == null || $.$$gt(this.bodyCapacity, $.length(t1)))
      this.bodies = $.List_List(this.bodyCapacity);
    t1 = this.contacts;
    if (t1 == null || $.$$gt(this.contactCapacity, $.length(t1)) === true)
      this.contacts = $.List_List(this.contactCapacity);
    t1 = this.joints;
    if (t1 == null || $.$$gt(this.jointCapacity, $.length(t1)))
      this.joints = $.List_List(this.jointCapacity);
    t1 = this.velocities;
    if (t1 == null || $.$$gt(this.bodyCapacity, $.length(t1))) {
      old = this.velocities;
      if (old == null)
        old = $.List_List(0);
      this.velocities = $.List_List(this.bodyCapacity);
      t1 = $.getInterceptor$JSStringJSArray(old);
      $.setRange(this.velocities, 0, t1.get$length(old), old);
      i = t1.get$length(old);
      if (typeof i !== "number")
        return this.init$4$bailout(1, i);
      for (; $.CONSTANT4.$lt(i, $.length(this.velocities)); ++i)
        $.$$indexSet(this.velocities, i, $.Velocity$());
    }
    t1 = this.positions;
    if (t1 == null || $.$$gt(this.bodyCapacity, $.length(t1))) {
      old = this.positions;
      if (old == null)
        old = $.List_List(0);
      this.positions = $.List_List(this.bodyCapacity);
      t1 = $.getInterceptor$JSStringJSArray(old);
      $.setRange(this.positions, 0, t1.get$length(old), old);
      i = t1.get$length(old);
      if (typeof i !== "number")
        return this.init$4$bailout(2, i);
      for (; $.CONSTANT4.$lt(i, $.length(this.positions)); ++i)
        $.$$indexSet(this.positions, i, $.Position$());
    }
  },
  init$4$bailout: function(state0, i) {
    switch (state0) {
      case 0:
        this.bodyCapacity = argBodyCapacity;
        this.contactCapacity = argContactCapacity;
        this.jointCapacity = argJointCapacity;
        this.bodyCount = 0;
        this.contactCount = 0;
        this.listener = argListener;
        t1 = this.bodies;
        if (t1 == null || $.$$gt(this.bodyCapacity, $.length(t1)))
          this.bodies = $.List_List(this.bodyCapacity);
        t1 = this.contacts;
        if (t1 == null || $.$$gt(this.contactCapacity, $.length(t1)) === true)
          this.contacts = $.List_List(this.contactCapacity);
        t1 = this.joints;
        if (t1 == null || $.$$gt(this.jointCapacity, $.length(t1)))
          this.joints = $.List_List(this.jointCapacity);
        t1 = this.velocities;
      case 1:
        if (state0 === 1 || state0 === 0 && (t1 == null || $.$$gt(this.bodyCapacity, $.length(t1))))
          switch (state0) {
            case 0:
              old = this.velocities;
              if (old == null)
                old = $.List_List(0);
              this.velocities = $.List_List(this.bodyCapacity);
              t1 = $.getInterceptor$JSStringJSArray(old);
              $.setRange(this.velocities, 0, t1.get$length(old), old);
              i = t1.get$length(old);
            case 1:
              state0 = 0;
              for (; t1 = $.getInterceptor$JSNumber(i), t1.$lt(i, $.length(this.velocities)) === true; i = t1.$add(i, 1))
                $.$$indexSet(this.velocities, i, $.Velocity$());
          }
        t1 = this.positions;
      case 2:
        var t1, old;
        if (state0 === 2 || state0 === 0 && (t1 == null || $.$$gt(this.bodyCapacity, $.length(t1))))
          switch (state0) {
            case 0:
              old = this.positions;
              if (old == null)
                old = $.List_List(0);
              this.positions = $.List_List(this.bodyCapacity);
              t1 = $.getInterceptor$JSStringJSArray(old);
              $.setRange(this.positions, 0, t1.get$length(old), old);
              i = t1.get$length(old);
            case 2:
              state0 = 0;
              for (; t1 = $.getInterceptor$JSNumber(i), t1.$lt(i, $.length(this.positions)) === true; i = t1.$add(i, 1))
                $.$$indexSet(this.positions, i, $.Position$());
          }
    }
  },
  clear$0: function() {
    this.bodyCount = 0;
    this.contactCount = 0;
    this.jointCount = 0;
  },
  solve$3: function(step, gravity, allowSleep) {
    var i, t1, b, t2, t4, t6, t8, t9, velocityDelta, t13, t14, t15, t16, t17, a, a1, a2, b1, t3, i1, i2, fixtureA, fixtureB, bodyA, bodyB, nonStatic, temp, t5, j, rotation, ratio, contactsOkay, jointsOkay, jointOkay, minSleepTime, t7;
    i = 0;
    while (true) {
      t1 = this.bodyCount;
      if (typeof t1 !== "number")
        return this.solve$3$bailout(1, step, gravity, allowSleep, i, t1);
      if (!(i < t1))
        break;
      c$0: {
        t1 = this.bodies;
        if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior())
          return this.solve$3$bailout(2, step, gravity, allowSleep, i, t1);
        if (i >= t1.length)
          throw $.ioore(i);
        b = t1[i];
        t1 = b.get$type();
        if (typeof t1 !== "number")
          return this.solve$3$bailout(3, step, gravity, allowSleep, i, t1, b);
        if (!(t1 === 2))
          break c$0;
        t1 = b.get$_force();
        t2 = t1.get$x();
        t4 = b.get$invMass();
        if (typeof t2 !== "number")
          return this.solve$3$bailout(4, step, gravity, allowSleep, i, t2, b);
        if (typeof t4 !== "number")
          return this.solve$3$bailout(5, step, gravity, allowSleep, i, t2, b, t4);
        t2 *= t4;
        t6 = gravity.x;
        if (typeof t6 !== "number")
          return this.solve$3$bailout(6, step, gravity, allowSleep, i, t6, b, t2);
        t8 = step.dt;
        t9 = (t2 + t6) * t8;
        t1 = t1.get$y();
        if (typeof t1 !== "number")
          return this.solve$3$bailout(7, step, gravity, allowSleep, i, 0, b, 0, t9, t1);
        t4 = t1 * t4;
        t1 = gravity.y;
        if (typeof t1 !== "number")
          return this.solve$3$bailout(9, step, gravity, allowSleep, i, 0, b, 0, t9, t1, t4);
        velocityDelta = $.Vector$(t9, (t4 + t1) * t8);
        b.get$linearVelocity().addLocal$1(velocityDelta);
        t9 = b.get$angularVelocity();
        t13 = step.dt;
        t14 = b.get$invInertia();
        if (typeof t14 !== "number")
          throw $.iae(t14);
        t15 = b.get$_torque();
        if (typeof t15 !== "number")
          throw $.iae(t15);
        if (typeof t9 !== "number")
          return this.solve$3$bailout(10, step, gravity, allowSleep, i, 0, b, 0, t9);
        b.set$angularVelocity(t9 + t13 * t14 * t15);
        t16 = step.dt;
        t17 = b.get$linearDamping();
        if (typeof t17 !== "number")
          throw $.iae(t17);
        a = 1 - t16 * t17;
        t1 = a < 1;
        if (0 > (t1 ? a : 1))
          a1 = 0;
        else
          a1 = t1 ? a : 1;
        b.get$linearVelocity().mulLocal$1(a1);
        t1 = step.dt;
        t2 = b.get$angularDamping();
        if (typeof t2 !== "number")
          throw $.iae(t2);
        a2 = 1 - t1 * t2;
        b1 = a2 < 1 ? a2 : 1;
        t1 = b.get$angularVelocity();
        t3 = 0 > b1 ? 0 : b1;
        if (typeof t1 !== "number")
          return this.solve$3$bailout(11, step, gravity, allowSleep, i, t1, b, 0, 0, 0, 0, b1);
        b.set$angularVelocity(t1 * t3);
      }
      ++i;
    }
    i1 = -1;
    i2 = 0;
    while (true) {
      t1 = this.contactCount;
      if (typeof t1 !== "number")
        return this.solve$3$bailout(12, step, 0, allowSleep, 0, t1, 0, 0, 0, 0, 0, 0, i2, i1);
      t3 = i2 < t1;
      t4 = this.contacts;
      if (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !t4.$isJavaScriptIndexingBehavior())
        return this.solve$3$bailout(13, step, 0, allowSleep, 0, t3, 0, t4, 0, 0, 0, 0, i2, i1);
      if (!t3)
        break;
      if (i2 >= t4.length)
        throw $.ioore(i2);
      fixtureA = t4[i2].get$fixtureA();
      if (i2 >= t4.length)
        throw $.ioore(i2);
      fixtureB = t4[i2].get$fixtureB();
      bodyA = fixtureA.get$body();
      bodyB = fixtureB.get$body();
      t1 = bodyA.get$type();
      if (typeof t1 !== "number")
        return this.solve$3$bailout(15, step, 0, allowSleep, 0, t1, 0, 0, 0, 0, 0, 0, i2, i1, 0, bodyB);
      if (!(t1 === 0)) {
        t1 = bodyB.get$type();
        if (typeof t1 !== "number")
          return this.solve$3$bailout(16, step, 0, allowSleep, 0, t1, 0, 0, 0, 0, 0, 0, i2, i1);
        nonStatic = !(t1 === 0);
      } else
        nonStatic = false;
      if (nonStatic) {
        ++i1;
        t1 = this.contacts;
        if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior())
          return this.solve$3$bailout(17, step, 0, allowSleep, 0, t1, 0, 0, 0, 0, 0, 0, i2, i1);
        if (i1 >= t1.length)
          throw $.ioore(i1);
        temp = t1[i1];
        if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
          return this.solve$3$bailout(18, step, 0, allowSleep, 0, t1, 0, 0, 0, 0, 0, 0, i2, i1, 0, 0, temp);
        t4 = t1.length;
        if (i2 >= t4)
          throw $.ioore(i2);
        t5 = t1[i2];
        if (i1 >= t4)
          throw $.ioore(i1);
        t1[i1] = t5;
        if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
          return this.solve$3$bailout(19, step, 0, allowSleep, 0, t1, 0, 0, 0, 0, 0, 0, i2, i1, 0, 0, temp);
        if (i2 >= t1.length)
          throw $.ioore(i2);
        t1[i2] = temp;
      }
      ++i2;
    }
    t2 = this._contactSolver;
    t2.init$3(t4, t1, step.dtRatio);
    t2.warmStart$0();
    i = 0;
    while (true) {
      t1 = this.jointCount;
      if (typeof t1 !== "number")
        return this.solve$3$bailout(20, step, 0, allowSleep, i, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1);
      if (!(i < t1))
        break;
      t1 = this.joints;
      if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior())
        return this.solve$3$bailout(21, step, 0, allowSleep, i, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].initVelocityConstraints$1(step);
      ++i;
    }
    for (i = 0; i < step.velocityIterations; ++i) {
      j = 0;
      while (true) {
        t1 = this.jointCount;
        if (typeof t1 !== "number")
          return this.solve$3$bailout(22, step, 0, allowSleep, i, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, j);
        if (!(j < t1))
          break;
        t1 = this.joints;
        if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior())
          return this.solve$3$bailout(23, step, 0, allowSleep, i, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, j);
        if (j >= t1.length)
          throw $.ioore(j);
        t1[j].solveVelocityConstraints$1(step);
        ++j;
      }
      t2.solveVelocityConstraints$0();
    }
    t2.storeImpulses$0();
    temp = $.Vector$(0, 0);
    t1 = this._translation;
    t3 = $.getInterceptor$JSStringJSArray(t1);
    i = 0;
    while (true) {
      t4 = this.bodyCount;
      if (typeof t4 !== "number")
        return this.solve$3$bailout(24, step, 0, allowSleep, i, t2, 0, t3, 0, 0, 0, 0, 0, 0, 0, 0, temp, t1, 0, t4);
      if (!(i < t4))
        break;
      c$0: {
        t4 = this.bodies;
        if (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !t4.$isJavaScriptIndexingBehavior())
          return this.solve$3$bailout(25, step, 0, allowSleep, i, t2, 0, t3, 0, 0, 0, 0, 0, 0, 0, 0, temp, t1, 0, t4);
        if (i >= t4.length)
          throw $.ioore(i);
        b = t4[i];
        t4 = b.get$type();
        if (typeof t4 !== "number")
          return this.solve$3$bailout(26, step, 0, allowSleep, i, t2, b, t3, 0, 0, 0, 0, 0, 0, 0, 0, temp, t1, 0, t4);
        if (t4 === 0)
          break c$0;
        t1.setFrom$1(b.get$linearVelocity());
        t1.mulLocal$1(step.dt);
        t4 = t1.x;
        if (typeof t4 !== "number")
          return this.solve$3$bailout(27, step, 0, allowSleep, i, t2, b, t3, 0, 0, 0, 0, 0, 0, 0, 0, temp, t1, 0, t4);
        t4 *= t4;
        t6 = t1.y;
        if (typeof t6 !== "number")
          return this.solve$3$bailout(28, step, 0, allowSleep, i, t2, b, t3, t6, 0, 0, 0, 0, 0, 0, 0, temp, t1, 0, t4);
        if (t4 + t6 * t6 > 4) {
          t4 = t3.get$length(t1);
          if (typeof t4 !== "number")
            throw $.iae(t4);
          b.get$linearVelocity().mulLocal$1(2 / t4);
        }
        t4 = step.dt;
        t5 = b.get$angularVelocity();
        if (typeof t5 !== "number")
          throw $.iae(t5);
        rotation = t4 * t5;
        if (rotation * rotation > 2.4674011002723395) {
          t4 = $.CONSTANT4.abs$0(rotation);
          if (typeof t4 !== "number")
            throw $.iae(t4);
          ratio = 1.5707963267948966 / t4;
          t4 = b.get$angularVelocity();
          if (typeof t4 !== "number")
            return this.solve$3$bailout(30, step, 0, allowSleep, i, t2, b, t3, 0, 0, 0, 0, 0, 0, 0, 0, temp, t1, 0, t4, ratio);
          b.set$angularVelocity(t4 * ratio);
        }
        t4 = b.get$sweep();
        t4.get$centerZero().setFrom$1(t4.get$center());
        t5 = b.get$sweep().get$angle();
        b.get$sweep().set$angleZero(t5);
        temp.setFrom$1(b.get$linearVelocity());
        temp.mulLocal$1(step.dt);
        b.get$sweep().get$center().addLocal$1(temp);
        t5 = b.get$sweep();
        t6 = t5.get$angle();
        t8 = step.dt;
        t9 = b.get$angularVelocity();
        if (typeof t9 !== "number")
          throw $.iae(t9);
        if (typeof t6 !== "number")
          return this.solve$3$bailout(31, step, 0, allowSleep, i, t2, b, t3, t6, 0, 0, 0, 0, 0, 0, 0, temp, t1, 0, 0, 0, t5);
        t5.set$angle(t6 + t8 * t9);
        b.synchronizeTransform$0();
      }
      ++i;
    }
    for (i = 0; i < step.positionIterations; ++i) {
      contactsOkay = t2.solvePositionConstraints$1(0.2);
      jointsOkay = true;
      j = 0;
      while (true) {
        t1 = this.jointCount;
        if (typeof t1 !== "number")
          return this.solve$3$bailout(32, step, 0, allowSleep, i, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, j, 0, 0, 0, jointsOkay, contactsOkay);
        if (!(j < t1))
          break;
        t1 = this.joints;
        if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior())
          return this.solve$3$bailout(33, step, 0, allowSleep, i, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, j, 0, 0, 0, jointsOkay, contactsOkay);
        if (j >= t1.length)
          throw $.ioore(j);
        jointOkay = t1[j].solvePositionConstraints$1(0.2);
        jointsOkay = jointsOkay && jointOkay === true;
        ++j;
      }
      if (contactsOkay === true && jointsOkay)
        break;
    }
    this.report$1(t2.constraints);
    if (allowSleep) {
      minSleepTime = 99999999999999;
      i = 0;
      while (true) {
        t1 = this.bodyCount;
        if (typeof t1 !== "number")
          return this.solve$3$bailout(34, step, 0, 0, i, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
        if (!(i < t1))
          break;
        c$0: {
          t1 = this.bodies;
          if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior())
            return this.solve$3$bailout(35, step, 0, 0, i, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if (i >= t1.length)
            throw $.ioore(i);
          b = t1[i];
          t1 = b.get$type();
          if (typeof t1 !== "number")
            return this.solve$3$bailout(36, step, 0, 0, i, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if (t1 === 0)
            break c$0;
          t1 = b.get$flags();
          if (t1 !== (t1 | 0))
            return this.solve$3$bailout(37, step, 0, 0, i, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if ((t1 & 4) === 0) {
            b.set$sleepTime(0);
            minSleepTime = 0;
          }
          t1 = b.get$flags();
          if (t1 !== (t1 | 0))
            return this.solve$3$bailout(38, step, 0, 0, i, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if ((t1 & 4) !== 0) {
            t1 = b.get$angularVelocity();
            t3 = b.get$angularVelocity();
            if (typeof t1 !== "number")
              return this.solve$3$bailout(39, step, 0, 0, i, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
            if (typeof t3 !== "number")
              return this.solve$3$bailout(40, step, 0, 0, i, t1, b, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
            if (!(t1 * t3 > 0.0012184696791468343)) {
              t1 = b.get$linearVelocity();
              t2 = b.get$linearVelocity();
              t3 = t1.get$x();
              t5 = t2.get$x();
              if (typeof t3 !== "number")
                return this.solve$3$bailout(41, step, 0, 0, i, t1, b, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, 0, 0, minSleepTime);
              if (typeof t5 !== "number")
                return this.solve$3$bailout(42, step, 0, 0, i, t1, b, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, t5, 0, 0, minSleepTime);
              t5 = t3 * t5;
              t1 = t1.get$y();
              t7 = t2.get$y();
              if (typeof t1 !== "number")
                return this.solve$3$bailout(43, step, 0, 0, i, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, t5, 0, 0, minSleepTime);
              if (typeof t7 !== "number")
                return this.solve$3$bailout(44, step, 0, 0, i, t1, b, 0, 0, t7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5, 0, 0, minSleepTime);
              t9 = t5 + t1 * t7 > 0.0001;
              t1 = t9;
            } else
              t1 = true;
          } else
            t1 = true;
          if (t1) {
            b.set$sleepTime(0);
            minSleepTime = 0;
          } else {
            t1 = b.get$sleepTime();
            t3 = step.dt;
            if (typeof t1 !== "number")
              return this.solve$3$bailout(45, step, 0, 0, i, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
            b.set$sleepTime(t1 + t3);
            minSleepTime = $.min(minSleepTime, b.get$sleepTime());
            if (minSleepTime !== (minSleepTime | 0))
              return this.solve$3$bailout(46, step, 0, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          }
        }
        ++i;
      }
      if (minSleepTime >= 0.5) {
        i = 0;
        while (true) {
          t1 = this.bodyCount;
          if (typeof t1 !== "number")
            return this.solve$3$bailout(47, 0, 0, 0, i, t1);
          if (!(i < t1))
            break;
          t1 = this.bodies;
          if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior())
            return this.solve$3$bailout(48, 0, 0, 0, i, t1);
          if (i >= t1.length)
            throw $.ioore(i);
          t1[i].set$awake(false);
          ++i;
        }
      }
    }
  },
  solve$3$bailout: function(state0, step, gravity, allowSleep, i, t1, b, t3, t6, t7, t9, b1, i2, i1, fixtureA, bodyB, temp, t2, j, t4, ratio, t5, jointsOkay, contactsOkay, minSleepTime) {
    switch (state0) {
      case 0:
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.bodyCount;
              case 1:
                state0 = 0;
                if (!$.CONSTANT2.$lt(i, t1))
                  break L0;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t1 = this.bodies;
                    case 2:
                      state0 = 0;
                      b = $.$$index(t1, i);
                      t1 = b.get$type();
                    case 3:
                      state0 = 0;
                      if ($.$$eq(t1, 2) !== true)
                        break c$0;
                      t1 = b.get$_force().get$x();
                    case 4:
                      state0 = 0;
                      t3 = b.get$invMass();
                    case 5:
                      state0 = 0;
                      t3 = $.$$mul(t1, t3);
                      t1 = gravity.x;
                    case 6:
                      state0 = 0;
                      t6 = $.$$mul($.$$add(t3, t1), step.dt);
                      t7 = b.get$_force().get$y();
                    case 7:
                      state0 = 0;
                      t9 = b.get$invMass();
                    case 8:
                      state0 = 0;
                      t9 = $.$$mul(t7, t9);
                      t7 = gravity.y;
                    case 9:
                      state0 = 0;
                      velocityDelta = $.Vector$(t6, $.$$mul($.$$add(t9, t7), step.dt));
                      b.get$linearVelocity().addLocal$1(velocityDelta);
                      t6 = b.get$angularVelocity();
                    case 10:
                      state0 = 0;
                      t13 = step.dt;
                      t14 = b.get$invInertia();
                      if (typeof t14 !== "number")
                        throw $.iae(t14);
                      t15 = b.get$_torque();
                      if (typeof t15 !== "number")
                        throw $.iae(t15);
                      b.set$angularVelocity($.$$add(t6, t13 * t14 * t15));
                      t16 = step.dt;
                      t17 = b.get$linearDamping();
                      if (typeof t17 !== "number")
                        throw $.iae(t17);
                      a = 1 - t16 * t17;
                      t1 = a < 1;
                      if (0 > (t1 ? a : 1))
                        a1 = 0;
                      else
                        a1 = t1 ? a : 1;
                      b.get$linearVelocity().mulLocal$1(a1);
                      t1 = step.dt;
                      t2 = b.get$angularDamping();
                      if (typeof t2 !== "number")
                        throw $.iae(t2);
                      a2 = 1 - t1 * t2;
                      b1 = a2 < 1 ? a2 : 1;
                      t1 = b.get$angularVelocity();
                    case 11:
                      state0 = 0;
                      t3 = 0 > b1 ? 0 : b1;
                      b.set$angularVelocity($.$$mul(t1, t3));
                  }
                }
                ++i;
            }
        i1 = -1;
        i2 = 0;
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
        L1:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.contactCount;
              case 12:
                state0 = 0;
                t1 = $.CONSTANT2.$lt(i2, t1);
                t3 = this.contacts;
              case 13:
                state0 = 0;
                if (!t1)
                  break L1;
                fixtureA = $.$$index(t3, i2).get$fixtureA();
                t1 = this.contacts;
              case 14:
                state0 = 0;
                fixtureB = $.$$index(t1, i2).get$fixtureB();
                bodyA = fixtureA.get$body();
                bodyB = fixtureB.get$body();
                t1 = bodyA.get$type();
              case 15:
                state0 = 0;
              case 16:
                if (state0 === 16 || state0 === 0 && $.$$eq(t1, 0) !== true)
                  switch (state0) {
                    case 0:
                      t1 = bodyB.get$type();
                    case 16:
                      state0 = 0;
                      nonStatic = $.$$eq(t1, 0) !== true;
                  }
                else
                  nonStatic = false;
              default:
                if (state0 === 19 || state0 === 18 || state0 === 17 || state0 === 0 && nonStatic)
                  switch (state0) {
                    case 0:
                      ++i1;
                      t1 = this.contacts;
                    case 17:
                      state0 = 0;
                      temp = $.$$index(t1, i1);
                      t1 = this.contacts;
                    case 18:
                      state0 = 0;
                      $.$$indexSet(t1, i1, $.$$index(t1, i2));
                      t1 = this.contacts;
                    case 19:
                      state0 = 0;
                      $.$$indexSet(t1, i2, temp);
                  }
                ++i2;
            }
        t1 = this._contactSolver;
        t1.init$3(t3, this.contactCount, step.dtRatio);
        t1.warmStart$0();
        i = 0;
      case 20:
      case 21:
        L2:
          while (true)
            switch (state0) {
              case 0:
                t2 = this.jointCount;
              case 20:
                state0 = 0;
                if (!$.CONSTANT2.$lt(i, t2))
                  break L2;
                t2 = this.joints;
              case 21:
                state0 = 0;
                $.$$index(t2, i).initVelocityConstraints$1(step);
                ++i;
            }
        i = 0;
      case 22:
      case 23:
        L3:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < step.velocityIterations))
                  break L3;
                j = 0;
              default:
                L4:
                  while (true)
                    switch (state0) {
                      case 0:
                        t2 = this.jointCount;
                      case 22:
                        state0 = 0;
                        if (!$.CONSTANT2.$lt(j, t2))
                          break L4;
                        t2 = this.joints;
                      case 23:
                        state0 = 0;
                        $.$$index(t2, j).solveVelocityConstraints$1(step);
                        ++j;
                    }
                t1.solveVelocityConstraints$0();
                ++i;
            }
        t1.storeImpulses$0();
        temp = $.Vector$(0, 0);
        t2 = this._translation;
        t3 = $.getInterceptor$JSStringJSArray(t2);
        i = 0;
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
        L5:
          while (true)
            switch (state0) {
              case 0:
                t4 = this.bodyCount;
              case 24:
                state0 = 0;
                if (!$.CONSTANT2.$lt(i, t4))
                  break L5;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t4 = this.bodies;
                    case 25:
                      state0 = 0;
                      b = $.$$index(t4, i);
                      t4 = b.get$type();
                    case 26:
                      state0 = 0;
                      if ($.$$eq(t4, 0) === true)
                        break c$0;
                      t2.setFrom$1(b.get$linearVelocity());
                      t2.mulLocal$1(step.dt);
                      t4 = t2.x;
                    case 27:
                      state0 = 0;
                      t4 = $.$$mul(t4, t4);
                      t6 = t2.y;
                    case 28:
                      state0 = 0;
                    case 29:
                      if (state0 === 29 || state0 === 0 && $.$$gt($.$$add(t4, $.$$mul(t6, t6)), 4) === true)
                        switch (state0) {
                          case 0:
                            t4 = t3.get$length(t2);
                            if (typeof t4 !== "number")
                              throw $.iae(t4);
                            ratio = 2 / t4;
                          case 29:
                            state0 = 0;
                            b.get$linearVelocity().mulLocal$1(ratio);
                        }
                      t4 = step.dt;
                      t5 = b.get$angularVelocity();
                      if (typeof t5 !== "number")
                        throw $.iae(t5);
                      rotation = t4 * t5;
                    case 30:
                      if (state0 === 30 || state0 === 0 && rotation * rotation > 2.4674011002723395)
                        switch (state0) {
                          case 0:
                            t4 = $.CONSTANT4.abs$0(rotation);
                            if (typeof t4 !== "number")
                              throw $.iae(t4);
                            ratio = 1.5707963267948966 / t4;
                            t4 = b.get$angularVelocity();
                          case 30:
                            state0 = 0;
                            b.set$angularVelocity($.$$mul(t4, ratio));
                        }
                      t4 = b.get$sweep();
                      t4.get$centerZero().setFrom$1(t4.get$center());
                      t5 = b.get$sweep().get$angle();
                      b.get$sweep().set$angleZero(t5);
                      temp.setFrom$1(b.get$linearVelocity());
                      temp.mulLocal$1(step.dt);
                      b.get$sweep().get$center().addLocal$1(temp);
                      t5 = b.get$sweep();
                      t6 = t5.get$angle();
                    case 31:
                      state0 = 0;
                      t8 = step.dt;
                      t9 = b.get$angularVelocity();
                      if (typeof t9 !== "number")
                        throw $.iae(t9);
                      t5.set$angle($.$$add(t6, t8 * t9));
                      b.synchronizeTransform$0();
                  }
                }
                ++i;
            }
        i = 0;
      case 32:
      case 33:
        L6:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < step.positionIterations))
                  break L6;
                contactsOkay = t1.solvePositionConstraints$1(0.2);
                jointsOkay = true;
                j = 0;
              default:
                L7:
                  while (true)
                    switch (state0) {
                      case 0:
                        t2 = this.jointCount;
                      case 32:
                        state0 = 0;
                        if (!$.CONSTANT2.$lt(j, t2))
                          break L7;
                        t2 = this.joints;
                      case 33:
                        state0 = 0;
                        jointOkay = $.$$index(t2, j).solvePositionConstraints$1(0.2);
                        jointsOkay = jointsOkay && jointOkay === true;
                        ++j;
                    }
                if (contactsOkay === true && jointsOkay)
                  break L6;
                ++i;
            }
        this.report$1(t1.constraints);
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
        var velocityDelta, t13, t14, t15, t16, t17, a, a1, a2, fixtureB, bodyA, nonStatic, rotation, t8, jointOkay;
        if (state0 === 48 || state0 === 47 || state0 === 46 || state0 === 45 || state0 === 44 || state0 === 43 || state0 === 42 || state0 === 41 || state0 === 40 || state0 === 39 || state0 === 38 || state0 === 37 || state0 === 36 || state0 === 35 || state0 === 34 || state0 === 0 && allowSleep)
          switch (state0) {
            case 0:
              minSleepTime = 99999999999999;
              i = 0;
            default:
              L8:
                while (true)
                  switch (state0) {
                    case 0:
                      t1 = this.bodyCount;
                    case 34:
                      state0 = 0;
                      if (!$.CONSTANT2.$lt(i, t1))
                        break L8;
                    default:
                      c$0: {
                        switch (state0) {
                          case 0:
                            t1 = this.bodies;
                          case 35:
                            state0 = 0;
                            b = $.$$index(t1, i);
                            t1 = b.get$type();
                          case 36:
                            state0 = 0;
                            if ($.$$eq(t1, 0) === true)
                              break c$0;
                            t1 = b.get$flags();
                          case 37:
                            state0 = 0;
                            if ($.$$eq($.$$and(t1, 4), 0) === true) {
                              b.set$sleepTime(0);
                              minSleepTime = 0;
                            }
                            t1 = b.get$flags();
                          case 38:
                            state0 = 0;
                          default:
                            if (state0 === 44 || state0 === 43 || state0 === 42 || state0 === 41 || state0 === 40 || state0 === 39 || state0 === 0 && $.$$eq($.$$and(t1, 4), 0) !== true)
                              switch (state0) {
                                case 0:
                                  t1 = b.get$angularVelocity();
                                case 39:
                                  state0 = 0;
                                  t3 = b.get$angularVelocity();
                                case 40:
                                  state0 = 0;
                                default:
                                  if (state0 === 44 || state0 === 43 || state0 === 42 || state0 === 41 || state0 === 0 && $.$$gt($.$$mul(t1, t3), 0.0012184696791468343) !== true)
                                    switch (state0) {
                                      case 0:
                                        t1 = b.get$linearVelocity();
                                        t2 = b.get$linearVelocity();
                                        t3 = t1.get$x();
                                      case 41:
                                        state0 = 0;
                                        t5 = t2.get$x();
                                      case 42:
                                        state0 = 0;
                                        t5 = $.$$mul(t3, t5);
                                        t1 = t1.get$y();
                                      case 43:
                                        state0 = 0;
                                        t7 = t2.get$y();
                                      case 44:
                                        state0 = 0;
                                        t9 = $.$$gt($.$$add(t5, $.$$mul(t1, t7)), 0.0001) === true;
                                        t1 = t9;
                                    }
                                  else
                                    t1 = true;
                              }
                            else
                              t1 = true;
                          case 45:
                          case 46:
                            if (state0 === 0 && t1) {
                              b.set$sleepTime(0);
                              minSleepTime = 0;
                            } else
                              switch (state0) {
                                case 0:
                                  t1 = b.get$sleepTime();
                                case 45:
                                  state0 = 0;
                                  b.set$sleepTime($.$$add(t1, step.dt));
                                  minSleepTime = $.min(minSleepTime, b.get$sleepTime());
                                case 46:
                                  state0 = 0;
                              }
                        }
                      }
                      ++i;
                  }
            case 47:
            case 48:
              if (state0 === 48 || state0 === 47 || state0 === 0 && minSleepTime >= 0.5)
                switch (state0) {
                  case 0:
                    i = 0;
                  default:
                    L9:
                      while (true)
                        switch (state0) {
                          case 0:
                            t1 = this.bodyCount;
                          case 47:
                            state0 = 0;
                            if (!$.CONSTANT2.$lt(i, t1))
                              break L9;
                            t1 = this.bodies;
                          case 48:
                            state0 = 0;
                            $.$$index(t1, i).set$awake(false);
                            ++i;
                        }
                }
          }
    }
  },
  addBody$1: function(body) {
    var t1, t3;
    body.set$islandIndex(this.bodyCount);
    t1 = this.bodies;
    t3 = this.bodyCount;
    if (typeof t3 !== "number")
      return this.addBody$1$bailout(2, body, t1, t3);
    this.bodyCount = t3 + 1;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.addBody$1$bailout(1, body, t1);
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = body;
  },
  addBody$1$bailout: function(state0, body, t1, t3) {
    switch (state0) {
      case 0:
        body.set$islandIndex(this.bodyCount);
        t1 = this.bodies;
      case 1:
        state0 = 0;
        t3 = this.bodyCount;
      case 2:
        state0 = 0;
        this.bodyCount = $.$$add(t3, 1);
        $.$$indexSet(t1, t3, body);
    }
  },
  addContact$1: function(contact) {
    var t1, t3;
    t1 = this.contacts;
    t3 = this.contactCount;
    if (typeof t3 !== "number")
      return this.addContact$1$bailout(2, contact, t1, t3);
    this.contactCount = t3 + 1;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.addContact$1$bailout(1, contact, t1);
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = contact;
  },
  addContact$1$bailout: function(state0, contact, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.contacts;
      case 1:
        state0 = 0;
        t3 = this.contactCount;
      case 2:
        state0 = 0;
        this.contactCount = $.$$add(t3, 1);
        $.$$indexSet(t1, t3, contact);
    }
  },
  addJoint$1: function(joint) {
    var t1, t3;
    t1 = this.joints;
    t3 = this.jointCount;
    if (typeof t3 !== "number")
      return this.addJoint$1$bailout(2, joint, t1, t3);
    this.jointCount = t3 + 1;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.addJoint$1$bailout(1, joint, t1);
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = joint;
  },
  addJoint$1$bailout: function(state0, joint, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.joints;
      case 1:
        state0 = 0;
        t3 = this.jointCount;
      case 2:
        state0 = 0;
        this.jointCount = $.$$add(t3, 1);
        $.$$indexSet(t1, t3, joint);
    }
  },
  report$1: function(constraints) {
    var t1, t2, t3, i, c, cc, j, t4;
    if (this.listener == null)
      return;
    for (t1 = this.impulse, t2 = t1.normalImpulses, t3 = t1.tangentImpulses, i = 0; $.CONSTANT2.$lt(i, this.contactCount); ++i) {
      c = $.$$index(this.contacts, i);
      if (i >= constraints.length)
        throw $.ioore(i);
      cc = constraints[i];
      for (j = 0; $.CONSTANT2.$lt(j, cc.get$pointCount()); ++j) {
        t4 = $.$$index(cc.get$points(), j).get$normalImpulse();
        if (j >= t2.length)
          throw $.ioore(j);
        t2[j] = t4;
        t4 = $.$$index(cc.get$points(), j).get$tangentImpulse();
        if (j >= t3.length)
          throw $.ioore(j);
        t3[j] = t4;
      }
      this.listener.postSolve$2(c, t1);
    }
  }
};

$$.Position = {"": "Object;x=,a=",
  Position$0: function() {
    this.x = $.Vector$(0, 0);
    this.a = 0;
  }
};

$$.Velocity = {"": "Object;v>,a=",
  Velocity$0: function() {
    this.v = $.Vector$(0, 0);
    this.a = 0;
  }
};

$$.TimeStep = {"": "Object;dt,inv_dt,dtRatio,velocityIterations,positionIterations,warmStarting"};

$$.World = {"": "Object;_flags=,_contactManager>,_bodyList,_jointList,_bodyCount,_jointCount,_gravity,_allowSleep,_debugDraw,_fixtureDestructionListener,_jointDestructionListener,_pool,_inverseTimestep,_warmStarting,_continuousPhysics,_contactStacks,center>,axis,timestep,cA,cB,wqwrapper,toiInput,toiOutput,backup,toiSolver,contacts,island,stack",
  _fixtureDestructionListener$1: function(arg0) {
    return this._fixtureDestructionListener.call$1(arg0);
  },
  _jointDestructionListener$1: function(arg0) {
    return this._jointDestructionListener.call$1(arg0);
  },
  _addType$3: function(creatorStack, type1, type2) {
    var register, t1, register2;
    register = $.ContactRegister$();
    register.creator = creatorStack;
    register.primary = true;
    t1 = this._contactStacks;
    if (type1 < 0 || type1 >= t1.length)
      throw $.ioore(type1);
    $.$$indexSet(t1[type1], type2, register);
    if (type1 !== type2) {
      register2 = $.ContactRegister$();
      register2.creator = creatorStack;
      register2.primary = false;
      if (type2 < 0 || type2 >= t1.length)
        throw $.ioore(type2);
      $.$$indexSet(t1[type2], type1, register2);
    }
  },
  _initializeRegisters$0: function() {
    var t1 = this._pool;
    this._addType$3(t1.getCircleContactStack$0(), 0, 0);
    this._addType$3(t1.getPolyCircleContactStack$0(), 1, 0);
    this._addType$3(t1.getPolyContactStack$0(), 1, 1);
  },
  popContact$2: function(fixtureA, fixtureB) {
    var type1, type2, t1, reg, creator, c;
    type1 = fixtureA.get$type();
    type2 = fixtureB.get$type();
    t1 = this._contactStacks;
    if (type1 !== (type1 | 0))
      throw $.iae(type1);
    if (type1 < 0 || type1 >= t1.length)
      throw $.ioore(type1);
    reg = $.$$index(t1[type1], type2);
    creator = reg.get$creator();
    if (!(creator == null)) {
      if ($.isEmpty(creator) === true)
        creator = this._getFreshContactStack$2(type1, type2);
      if (reg.get$primary() === true) {
        c = creator.removeFirst$0();
        c.init$2(fixtureA, fixtureB);
        return c;
      } else {
        c = creator.removeFirst$0();
        c.init$2(fixtureB, fixtureA);
        return c;
      }
    } else
      return;
  },
  _getFreshContactStack$2: function(type1, type2) {
    var t1, t2;
    if (type1 === 0 && $.$$eq(type2, 0) === true)
      return this._pool.getCircleContactStack$0();
    else {
      t1 = type1 === 1 && $.$$eq(type2, 1) === true;
      t2 = this._pool;
      if (t1)
        return t2.getPolyContactStack$0();
      else
        return t2.getPolyCircleContactStack$0();
    }
  },
  pushContact$1: function(contact) {
    var type1, type2, t1;
    if ($.$$gt(contact.get$manifold().get$pointCount(), 0) === true) {
      contact.get$fixtureA().get$body().set$awake(true);
      contact.get$fixtureB().get$body().set$awake(true);
    }
    type1 = contact.get$fixtureA().get$type();
    type2 = contact.get$fixtureB().get$type();
    t1 = this._contactStacks;
    if (type1 !== (type1 | 0))
      throw $.iae(type1);
    if (type1 < 0 || type1 >= t1.length)
      throw $.ioore(type1);
    $.$$index(t1[type1], type2).get$creator().addFirst$1(contact);
  },
  get$contactListener: function() {
    return this._contactManager.get$contactListener();
  },
  set$debugDraw: function(debugDraw) {
    this._debugDraw = debugDraw;
  },
  createBody$1: function(def) {
    var b, t1;
    if (this.get$locked() === true)
      return;
    b = $.Body$(def, this);
    b.prev = null;
    b.next = this._bodyList;
    t1 = this._bodyList;
    if (!(t1 == null))
      t1.set$prev(b);
    this._bodyList = b;
    this._bodyCount = this._bodyCount + 1;
    return b;
  },
  destroyJoint$1: function(joint) {
    var collideConnected, t2, bodyA, bodyB, t3, edge;
    if (this.get$locked() === true)
      return;
    collideConnected = joint.get$collideConnected();
    t2 = joint.get$_prev();
    if (!(t2 == null))
      t2.set$_liblib2$_next(joint.get$_liblib2$_next());
    t2 = joint.get$_liblib2$_next();
    if (!(t2 == null))
      t2.set$_prev(joint.get$_prev());
    if ($.$$eq(joint, this._jointList) === true)
      this._jointList = joint.get$_liblib2$_next();
    bodyA = joint.get$bodyA();
    bodyB = joint.get$bodyB();
    bodyA.set$awake(true);
    bodyB.set$awake(true);
    t2 = joint.get$edgeA();
    t3 = t2.get$prev();
    if (!(t3 == null))
      t3.set$next(t2.get$next());
    t2 = joint.get$edgeA();
    t3 = t2.get$next();
    if (!(t3 == null))
      t3.set$prev(t2.get$prev());
    if ($.$$eq(joint.get$edgeA(), bodyA.get$jointList()) === true)
      bodyA.set$jointList(joint.get$edgeA().get$next());
    joint.get$edgeA().set$prev(null);
    joint.get$edgeA().set$next(null);
    t2 = joint.get$edgeB();
    t3 = t2.get$prev();
    if (!(t3 == null))
      t3.set$next(t2.get$next());
    t2 = joint.get$edgeB();
    t3 = t2.get$next();
    if (!(t3 == null))
      t3.set$prev(t2.get$prev());
    if ($.$$eq(joint.get$edgeB(), bodyB.get$jointList()) === true)
      bodyB.set$jointList(joint.get$edgeB().get$next());
    joint.get$edgeB().set$prev(null);
    joint.get$edgeB().set$next(null);
    joint.destructor$0();
    this._jointCount = this._jointCount - 1;
    if (typeof collideConnected !== "boolean")
      return this.destroyJoint$1$bailout(1, joint, collideConnected);
    if (!collideConnected) {
      edge = bodyB.get$contactList();
      for (; !(edge == null);) {
        if ($.$$eq(edge.get$other(), bodyA) === true)
          edge.get$contact().flagForFiltering$0();
        edge = edge.get$next();
      }
    }
  },
  destroyJoint$1$bailout: function(state0, joint, collideConnected) {
    var t2, bodyA, bodyB, t3, edge;
    t2 = joint.get$_prev();
    if (!(t2 == null))
      t2.set$_liblib2$_next(joint.get$_liblib2$_next());
    t2 = joint.get$_liblib2$_next();
    if (!(t2 == null))
      t2.set$_prev(joint.get$_prev());
    if ($.$$eq(joint, this._jointList) === true)
      this._jointList = joint.get$_liblib2$_next();
    bodyA = joint.get$bodyA();
    bodyB = joint.get$bodyB();
    bodyA.set$awake(true);
    bodyB.set$awake(true);
    t2 = joint.get$edgeA();
    t3 = t2.get$prev();
    if (!(t3 == null))
      t3.set$next(t2.get$next());
    t2 = joint.get$edgeA();
    t3 = t2.get$next();
    if (!(t3 == null))
      t3.set$prev(t2.get$prev());
    if ($.$$eq(joint.get$edgeA(), bodyA.get$jointList()) === true)
      bodyA.set$jointList(joint.get$edgeA().get$next());
    joint.get$edgeA().set$prev(null);
    joint.get$edgeA().set$next(null);
    t2 = joint.get$edgeB();
    t3 = t2.get$prev();
    if (!(t3 == null))
      t3.set$next(t2.get$next());
    t2 = joint.get$edgeB();
    t3 = t2.get$next();
    if (!(t3 == null))
      t3.set$prev(t2.get$prev());
    if ($.$$eq(joint.get$edgeB(), bodyB.get$jointList()) === true)
      bodyB.set$jointList(joint.get$edgeB().get$next());
    joint.get$edgeB().set$prev(null);
    joint.get$edgeB().set$next(null);
    joint.destructor$0();
    this._jointCount = this._jointCount - 1;
    if ($.$$eq(collideConnected, false) === true) {
      edge = bodyB.get$contactList();
      for (; !(edge == null);) {
        if ($.$$eq(edge.get$other(), bodyA) === true)
          edge.get$contact().flagForFiltering$0();
        edge = edge.get$next();
      }
    }
  },
  destroyBody$1: function(body) {
    var je, t1, je0, ce, ce0, f, f0;
    if (this.get$locked() === true)
      return;
    je = body.get$jointList();
    for (t1 = !(this._jointDestructionListener == null); !(je == null); je = je0) {
      je0 = je.get$next();
      if (t1)
        this._jointDestructionListener$1(je.get$joint());
      this.destroyJoint$1(je.get$joint());
    }
    body.set$jointList(null);
    ce = body.get$contactList();
    for (; !(ce == null); ce = ce0) {
      ce0 = ce.get$next();
      this._contactManager.destroy$1(ce.get$contact());
    }
    body.set$contactList(null);
    f = body.get$fixtureList();
    for (t1 = !(this._fixtureDestructionListener == null); !(f == null); f = f0) {
      f0 = f.get$next();
      if (t1)
        this._fixtureDestructionListener$1(f);
      f.destroyProxy$1(this._contactManager.get$broadPhase());
      f.destroy$0();
    }
    body.set$fixtureList(null);
    body.set$fixtureCount(0);
    t1 = body.get$prev();
    if (!(t1 == null))
      t1.set$next(body.get$next());
    t1 = body.get$next();
    if (!(t1 == null))
      t1.set$prev(body.get$prev());
    if ($.$$eq(body, this._bodyList) === true)
      this._bodyList = body.get$next();
    this._bodyCount = this._bodyCount - 1;
  },
  step$3: function(dt, velocityIterations, positionIterations) {
    var t1;
    if ($.$$eq($.$$and(this._flags, 1), 1) === true) {
      this._contactManager.findNewContacts$0();
      this._flags = $.$$and(this._flags, 4294967294);
    }
    this._flags = $.$$or(this._flags, 2);
    t1 = this.timestep;
    t1.dt = dt;
    t1.velocityIterations = velocityIterations;
    t1.positionIterations = positionIterations;
    if (dt > 0)
      t1.inv_dt = 1 / dt;
    else
      t1.inv_dt = 0;
    t1.dtRatio = this._inverseTimestep * dt;
    t1.warmStarting = this._warmStarting;
    this._contactManager.collide$0();
    if (t1.dt > 0)
      this.solve$1(t1);
    if (this._continuousPhysics && t1.dt > 0)
      this.solveTimeOfImpact$0();
    if (t1.dt > 0)
      this._inverseTimestep = t1.inv_dt;
    if ($.$$eq($.$$and(this._flags, 4), 4) === true)
      this.clearForces$0();
    this._flags = $.$$and(this._flags, 4294967293);
  },
  clearForces$0: function() {
    var body;
    for (var body = this._bodyList; !(body == null); body = body.get$next()) {
      body.get$_force().setZero$0();
      body.set$_torque(0);
    }
  },
  queryAABB$2: function(callback, aabb) {
    var t1, t2;
    t1 = this._contactManager.get$broadPhase();
    t2 = this.wqwrapper;
    t2.broadPhase = t1;
    t2.callback = callback;
    this._contactManager.get$broadPhase().query$2(t2, aabb);
  },
  get$contactList: function() {
    return this._contactManager.get$contactList();
  },
  get$contactCount: function() {
    return this._contactManager.get$contactCount();
  },
  get$locked: function() {
    return $.$$eq($.$$and(this._flags, 2), 2);
  },
  get$jointList: function() {
    return this._jointList;
  },
  solve$1: function(timeStep) {
    var t1, b, c, j, stackSize, seed, t2, t3, t4, stackCount, ce, contact, sensorA, sensorB, other, stackCount0, je, i;
    t1 = this.island;
    t1.init$4(this._bodyCount, this._contactManager.get$contactCount(), this._jointCount, this._contactManager.get$contactListener());
    for (b = this._bodyList; !(b == null); b = b.get$next())
      b.set$flags($.$$and(b.get$flags(), 4294967294));
    for (c = this._contactManager.get$contactList(); !(c == null); c = c.get$next())
      c.set$flags($.$$and(c.get$flags(), 4294967294));
    for (j = this.get$jointList(); !(j == null); j = j.get$_liblib2$_next())
      j.set$islandFlag(false);
    stackSize = this._bodyCount;
    if (this.stack.length < stackSize)
      this.stack = $.List_List(stackSize);
    for (seed = this._bodyList, t2 = this._gravity, t3 = this._allowSleep; !(seed == null); seed = seed.get$next()) {
      if ($.$$eq($.$$and(seed.get$flags(), 1), 1) === true)
        continue;
      if ($.$$eq(seed.get$awake(), false) === true || $.$$eq(seed.get$active(), false) === true)
        continue;
      if ($.$$eq(seed.get$type(), 0) === true)
        continue;
      t1.clear$0();
      t4 = this.stack;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4[0] = seed;
      seed.set$flags($.$$or(seed.get$flags(), 1));
      for (stackCount = 1; stackCount > 0;) {
        t4 = this.stack;
        --stackCount;
        if (stackCount >= t4.length)
          throw $.ioore(stackCount);
        b = t4[stackCount];
        t1.addBody$1(b);
        b.set$awake(true);
        if ($.$$eq(b.get$type(), 0) === true)
          continue;
        for (ce = b.get$contactList(); !(ce == null); ce = ce.get$next()) {
          contact = ce.get$contact();
          if ($.$$eq($.$$and(contact.get$flags(), 1), 1) === true)
            continue;
          if ($.$$eq(contact.get$enabled(), false) === true || $.$$eq(contact.get$touching(), false) === true)
            continue;
          sensorA = contact.get$fixtureA().get$isSensor();
          sensorB = contact.get$fixtureB().get$isSensor();
          if (sensorA === true || sensorB === true)
            continue;
          t1.addContact$1(contact);
          contact.set$flags($.$$or(contact.get$flags(), 1));
          other = ce.get$other();
          if ($.$$eq($.$$and(other.get$flags(), 1), 1) === true)
            continue;
          t4 = this.stack;
          stackCount0 = stackCount + 1;
          if (stackCount >= t4.length)
            throw $.ioore(stackCount);
          t4[stackCount] = other;
          other.set$flags($.$$or(other.get$flags(), 1));
          stackCount = stackCount0;
        }
        for (je = b.get$jointList(); !(je == null); je = je.get$next()) {
          if ($.$$eq(je.get$joint().get$islandFlag(), true) === true)
            continue;
          other = je.get$other();
          if ($.$$eq(other.get$active(), false) === true)
            continue;
          t1.addJoint$1(je.get$joint());
          je.get$joint().set$islandFlag(true);
          if ($.$$eq($.$$and(other.get$flags(), 1), 1) === true)
            continue;
          t4 = this.stack;
          stackCount0 = stackCount + 1;
          if (stackCount >= t4.length)
            throw $.ioore(stackCount);
          t4[stackCount] = other;
          other.set$flags($.$$or(other.get$flags(), 1));
          stackCount = stackCount0;
        }
      }
      t1.solve$3(timeStep, t2, t3);
      for (i = 0; $.CONSTANT2.$lt(i, t1.bodyCount); ++i) {
        b = $.$$index(t1.bodies, i);
        if ($.$$eq(b.get$type(), 0) === true)
          b.set$flags($.$$and(b.get$flags(), 4294967294));
      }
    }
    for (b = this._bodyList; !(b == null); b = b.get$next()) {
      if ($.$$eq($.$$and(b.get$flags(), 1), 0) === true)
        continue;
      if ($.$$eq(b.get$type(), 0) === true)
        continue;
      b.synchronizeFixtures$0();
    }
    this._contactManager.findNewContacts$0();
  },
  solveTimeOfImpact$0: function() {
    var c, body, t1, t2;
    for (c = this._contactManager.get$contactList(); !(c == null); c = c.get$next()) {
      c.set$flags($.$$or(c.get$flags(), 4));
      c.set$toiCount(0);
    }
    for (body = this._bodyList; !(body == null); body = body.get$next()) {
      t1 = $.$$eq($.$$and(body.get$flags(), 1), 0) === true || $.$$eq(body.get$type(), 1) === true || $.$$eq(body.get$type(), 0) === true;
      t2 = body.get$flags();
      if (t1)
        body.set$flags($.$$or(t2, 64));
      else
        body.set$flags($.$$and(t2, 4294967231));
    }
    for (body = this._bodyList; !(body == null); body = body.get$next()) {
      if ($.$$eq($.$$and(body.get$flags(), 64), 64) === true)
        continue;
      if ($.$$eq(body.get$bullet(), true) === true)
        continue;
      this.solveTimeOfImpactGivenBody$1(body);
      body.set$flags($.$$or(body.get$flags(), 64));
    }
    for (body = this._bodyList; !(body == null); body = body.get$next()) {
      if ($.$$eq($.$$and(body.get$flags(), 64), 64) === true)
        continue;
      if ($.$$eq(body.get$bullet(), false) === true)
        continue;
      this.solveTimeOfImpactGivenBody$1(body);
      body.set$flags($.$$or(body.get$flags(), 64));
    }
  },
  solveTimeOfImpactGivenBody$1: function(body) {
    var bullet, t2, t3, t4, t5, t6, t7, t8, toiContact, toi, toiOther, iter, ce, found, count, other, type, t1, t10, contact, fixtureA, fixtureB, bodyA, bodyB, i;
    bullet = body.get$bullet();
    if (typeof bullet !== "boolean")
      return this.solveTimeOfImpactGivenBody$1$bailout(1, body, bullet);
    t2 = this.toiOutput;
    t3 = this.toiInput;
    t4 = t3.proxyA;
    t5 = t3.proxyB;
    t6 = t3.sweepA;
    t7 = t3.sweepB;
    t8 = this._pool;
    toiContact = null;
    toi = 1;
    toiOther = null;
    iter = 0;
    do {
      for (ce = body.get$contactList(), found = false, count = 0; !(ce == null); ce = ce.get$next()) {
        if ($.$$eq(ce.get$contact(), toiContact) === true)
          continue;
        other = ce.get$other();
        type = other.get$type();
        if (typeof type !== "number")
          return this.solveTimeOfImpactGivenBody$1$bailout(2, body, bullet, other, type, t3, t4, $.CONSTANT13, t5, iter, t6, t7, toiContact, toi, toiOther, found, count, t8, ce, t2);
        if (bullet) {
          t1 = other.get$flags();
          if (t1 !== (t1 | 0))
            return this.solveTimeOfImpactGivenBody$1$bailout(3, body, bullet, other, type, t3, t4, $.CONSTANT13, t5, iter, t6, t7, toiContact, toi, toiOther, found, count, t8, ce, t2, t1);
          if ((t1 & 64) === 0)
            continue;
          if (!(type === 0)) {
            t1 = ce.get$contact().get$flags();
            if (t1 !== (t1 | 0))
              return this.solveTimeOfImpactGivenBody$1$bailout(4, body, bullet, other, 0, t3, t4, $.CONSTANT13, t5, iter, t6, t7, toiContact, toi, toiOther, found, count, t8, ce, t2, t1);
            t10 = (t1 & 16) !== 0;
            t1 = t10;
          } else
            t1 = false;
          if (t1)
            continue;
        } else if (type === 2)
          continue;
        contact = ce.get$contact();
        t1 = contact.get$enabled();
        if (typeof t1 !== "boolean")
          return this.solveTimeOfImpactGivenBody$1$bailout(5, body, bullet, other, 0, t3, t4, $.CONSTANT13, t5, iter, t6, t7, toiContact, toi, toiOther, found, count, t8, ce, t2, t1, contact);
        if (!t1)
          continue;
        t1 = contact.get$toiCount();
        if (typeof t1 !== "number")
          return this.solveTimeOfImpactGivenBody$1$bailout(6, body, bullet, other, 0, t3, t4, $.CONSTANT13, t5, iter, t6, t7, toiContact, toi, toiOther, found, count, t8, ce, t2, t1, contact);
        if (t1 > 10)
          continue;
        fixtureA = contact.get$fixtureA();
        fixtureB = contact.get$fixtureB();
        if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
          continue;
        bodyA = fixtureA.get$body();
        bodyB = fixtureB.get$body();
        t4.setFromShape$1(fixtureA.get$shape());
        t5.setFromShape$1(fixtureB.get$shape());
        t6.setFrom$1(bodyA.get$sweep());
        t7.setFrom$1(bodyB.get$sweep());
        t3.tMax = toi;
        t8.timeOfImpact.timeOfImpact$2(t2, t3);
        t1 = t2.state;
        if (typeof t1 !== "number")
          return this.solveTimeOfImpactGivenBody$1$bailout(7, body, bullet, other, 0, t3, t4, $.CONSTANT13, t5, iter, t6, t7, toiContact, toi, toiOther, found, count, t8, ce, t2, t1, contact);
        if (t1 === 3) {
          t1 = t2.t;
          if (typeof t1 !== "number")
            return this.solveTimeOfImpactGivenBody$1$bailout(8, body, bullet, other, 0, t3, t4, $.CONSTANT13, t5, iter, t6, t7, toiContact, toi, toiOther, found, count, t8, ce, t2, t1, contact);
          t1 = t1 < toi;
        } else
          t1 = false;
        if (t1) {
          toi = t2.t;
          if (toi !== (toi | 0))
            return this.solveTimeOfImpactGivenBody$1$bailout(9, body, bullet, other, 0, t3, t4, $.CONSTANT13, t5, iter, t6, t7, 0, toi, 0, 0, count, t8, ce, t2, 0, contact);
          toiOther = other;
          toiContact = contact;
          found = true;
        }
        ++count;
      }
      ++iter;
    } while (found && count > 1 && iter < 50);
    if (toiContact == null) {
      body.advance$1(1);
      return;
    }
    t1 = this.backup;
    t1.setFrom$1(body.get$sweep());
    body.advance$1(toi);
    toiContact.update$1(this._contactManager.get$contactListener());
    t2 = toiContact.get$enabled();
    if (typeof t2 !== "boolean")
      return this.solveTimeOfImpactGivenBody$1$bailout(10, body, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, toiContact, 0, toiOther, 0, 0, 0, 0, 0, t1);
    if (!t2) {
      body.get$sweep().setFrom$1(t1);
      this.solveTimeOfImpactGivenBody$1(body);
    }
    t1 = toiContact.get$toiCount();
    if (typeof t1 !== "number")
      return this.solveTimeOfImpactGivenBody$1$bailout(11, body, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, 0, 0, 0, 0, t1);
    toiContact.set$toiCount(t1 + 1);
    t1 = this.contacts;
    if (t1.length < 32)
      this.contacts = $.List_List(32);
    ce = body.get$contactList();
    count = 0;
    while (true) {
      if (!(!(ce == null) && count < 32))
        break;
      c$0: {
        type = ce.get$other().get$type();
        if (typeof type !== "number")
          return this.solveTimeOfImpactGivenBody$1$bailout(12, body, 0, 0, type, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, count, 0, ce);
        if (type === 2)
          break c$0;
        contact = ce.get$contact();
        t1 = contact.get$enabled();
        if (typeof t1 !== "boolean")
          return this.solveTimeOfImpactGivenBody$1$bailout(13, body, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, count, 0, ce, 0, t1, contact);
        if (!t1)
          break c$0;
        fixtureA = contact.get$fixtureA();
        fixtureB = contact.get$fixtureB();
        if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
          break c$0;
        if ($.$$eq(contact, toiContact) !== true)
          contact.update$1(this._contactManager.get$contactListener());
        t1 = contact.get$enabled();
        if (typeof t1 !== "boolean")
          return this.solveTimeOfImpactGivenBody$1$bailout(14, body, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, count, 0, ce, 0, t1, contact);
        if (!t1)
          break c$0;
        t1 = contact.get$touching();
        if (typeof t1 !== "boolean")
          return this.solveTimeOfImpactGivenBody$1$bailout(15, body, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, count, 0, ce, 0, t1, contact);
        if (!t1)
          break c$0;
        t1 = this.contacts;
        if (count >= t1.length)
          throw $.ioore(count);
        t1[count] = contact;
        ++count;
      }
      ce = ce.get$next();
    }
    t1 = this.toiSolver;
    t1.initialize$3(this.contacts, count, body);
    for (i = 0; i < 20; ++i)
      if (t1.solve$1(0.75) === true)
        break;
    t1 = toiOther.get$type();
    if (typeof t1 !== "number")
      return this.solveTimeOfImpactGivenBody$1$bailout(16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, 0, 0, 0, 0, 0, 0, t1);
    if (!(t1 === 0)) {
      t1 = toiContact.get$flags();
      if (t1 !== (t1 | 0))
        return this.solveTimeOfImpactGivenBody$1$bailout(17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, 0, 0, 0, 0, 0, 0, t1);
      toiContact.set$flags((t1 | 16) >>> 0);
    }
  },
  solveTimeOfImpactGivenBody$1$bailout: function(state0, body, bullet, other, type, t4, t5, t2, t6, iter, t7, t8, toiContact, toi, toiOther, found, count, t9, ce, t3, t1, contact) {
    switch (state0) {
      case 0:
        bullet = body.get$bullet();
      case 1:
        state0 = 0;
        t2 = $.getInterceptor(bullet);
        t3 = this.toiOutput;
        t4 = this.toiInput;
        t5 = t4.proxyA;
        t6 = t4.proxyB;
        t7 = t4.sweepA;
        t8 = t4.sweepB;
        t9 = this._pool;
        toiContact = null;
        toi = 1;
        toiOther = null;
        iter = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                ce = body.get$contactList();
                found = false;
                count = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!!(ce == null))
                          break L1;
                      default:
                        c$1: {
                          switch (state0) {
                            case 0:
                              if ($.$$eq(ce.get$contact(), toiContact) === true)
                                break c$1;
                              other = ce.get$other();
                              type = other.get$type();
                            case 2:
                              state0 = 0;
                            default:
                              if (state0 === 4 || state0 === 3 || state0 === 0 && t2.$eq(bullet, true) === true)
                                switch (state0) {
                                  case 0:
                                    t1 = other.get$flags();
                                  case 3:
                                    state0 = 0;
                                    if ($.$$eq($.$$and(t1, 64), 0) === true)
                                      break c$1;
                                  case 4:
                                    if (state0 === 4 || state0 === 0 && $.$$eq(type, 0) !== true)
                                      switch (state0) {
                                        case 0:
                                          t1 = ce.get$contact().get$flags();
                                        case 4:
                                          state0 = 0;
                                          t11 = $.$$eq($.$$and(t1, 16), 0) !== true;
                                          t1 = t11;
                                      }
                                    else
                                      t1 = false;
                                    if (t1)
                                      break c$1;
                                }
                              else if ($.$$eq(type, 2) === true)
                                break c$1;
                              contact = ce.get$contact();
                              t1 = contact.get$enabled();
                            case 5:
                              state0 = 0;
                              if ($.$$eq(t1, false) === true)
                                break c$1;
                              t1 = contact.get$toiCount();
                            case 6:
                              state0 = 0;
                              if ($.$$gt(t1, 10) === true)
                                break c$1;
                              fixtureA = contact.get$fixtureA();
                              fixtureB = contact.get$fixtureB();
                              if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
                                break c$1;
                              bodyA = fixtureA.get$body();
                              bodyB = fixtureB.get$body();
                              t5.setFromShape$1(fixtureA.get$shape());
                              t6.setFromShape$1(fixtureB.get$shape());
                              t7.setFrom$1(bodyA.get$sweep());
                              t8.setFrom$1(bodyB.get$sweep());
                              t4.tMax = toi;
                              t9.timeOfImpact.timeOfImpact$2(t3, t4);
                              t1 = t3.state;
                            case 7:
                              state0 = 0;
                            case 8:
                              if (state0 === 8 || state0 === 0 && $.$$eq(t1, 3) === true)
                                switch (state0) {
                                  case 0:
                                    t1 = t3.t;
                                  case 8:
                                    state0 = 0;
                                    t11 = $.$$lt(t1, toi) === true;
                                    t1 = t11;
                                }
                              else
                                t1 = false;
                            case 9:
                              if (state0 === 9 || state0 === 0 && t1)
                                switch (state0) {
                                  case 0:
                                    toi = t3.t;
                                  case 9:
                                    state0 = 0;
                                    toiOther = other;
                                    toiContact = contact;
                                    found = true;
                                }
                              ++count;
                          }
                        }
                        ce = ce.get$next();
                    }
                ++iter;
                if (!(found && count > 1 && iter < 50))
                  break L0;
            }
        if (toiContact == null) {
          body.advance$1(1);
          return;
        }
        t1 = this.backup;
        t1.setFrom$1(body.get$sweep());
        body.advance$1(toi);
        toiContact.update$1(this._contactManager.get$contactListener());
        t2 = toiContact.get$enabled();
      case 10:
        state0 = 0;
        if ($.$$eq(t2, false) === true) {
          body.get$sweep().setFrom$1(t1);
          this.solveTimeOfImpactGivenBody$1(body);
        }
        t1 = toiContact.get$toiCount();
      case 11:
        state0 = 0;
        toiContact.set$toiCount($.$$add(t1, 1));
        t1 = this.contacts;
        if (t1.length < 32)
          this.contacts = $.List_List(32);
        ce = body.get$contactList();
        count = 0;
      case 12:
      case 13:
      case 14:
      case 15:
        L2:
          while (true)
            switch (state0) {
              case 0:
                if (!(!(ce == null) && count < 32))
                  break L2;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      type = ce.get$other().get$type();
                    case 12:
                      state0 = 0;
                      if ($.$$eq(type, 2) === true)
                        break c$0;
                      contact = ce.get$contact();
                      t1 = contact.get$enabled();
                    case 13:
                      state0 = 0;
                      if ($.$$eq(t1, false) === true)
                        break c$0;
                      fixtureA = contact.get$fixtureA();
                      fixtureB = contact.get$fixtureB();
                      if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
                        break c$0;
                      if ($.$$eq(contact, toiContact) !== true)
                        contact.update$1(this._contactManager.get$contactListener());
                      t1 = contact.get$enabled();
                    case 14:
                      state0 = 0;
                      if ($.$$eq(t1, false) === true)
                        break c$0;
                      t1 = contact.get$touching();
                    case 15:
                      state0 = 0;
                      if ($.$$eq(t1, false) === true)
                        break c$0;
                      t1 = this.contacts;
                      if (count >= t1.length)
                        throw $.ioore(count);
                      t1[count] = contact;
                      ++count;
                  }
                }
                ce = ce.get$next();
            }
        t1 = this.toiSolver;
        t1.initialize$3(this.contacts, count, body);
        for (i = 0; i < 20; ++i)
          if (t1.solve$1(0.75) === true)
            break;
        t1 = toiOther.get$type();
      case 16:
        state0 = 0;
      case 17:
        var t11, fixtureA, fixtureB, bodyA, bodyB, i;
        if (state0 === 17 || state0 === 0 && $.$$eq(t1, 0) !== true)
          switch (state0) {
            case 0:
              t1 = toiContact.get$flags();
            case 17:
              state0 = 0;
              toiContact.set$flags($.$$or(t1, 16));
          }
    }
  },
  World$3: function(gravity, doSleep, argPool) {
    var t1, i, t2;
    this._contactManager = $.ContactManager$(this);
    for (t1 = this._contactStacks, i = 0; i < t1.length; ++i) {
      t2 = $.List_List(2);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
    this._initializeRegisters$0();
  }
};

$$.WorldQueryWrapper = {"": "Object;broadPhase>,callback",
  treeCallback$1: function(node) {
    var fixture = node.get$userData();
    return this.callback.reportFixture$1(fixture);
  }
};

$$.Contact = {"": "Object;flags=,prev=,next=,edge1>,edge2>,fixtureA>,fixtureB>,manifold=,toiCount=",
  init$2: function(fixA, fixB) {
    var t1;
    this.flags = 0;
    this.fixtureA = fixA;
    this.fixtureB = fixB;
    this.manifold.set$pointCount(0);
    this.prev = null;
    this.next = null;
    t1 = this.edge1;
    t1.contact = null;
    t1.prev = null;
    t1.next = null;
    t1.other = null;
    t1 = this.edge2;
    t1.contact = null;
    t1.prev = null;
    t1.next = null;
    t1.other = null;
    this.toiCount = 0;
  },
  get$touching: function() {
    var t1 = this.flags;
    if (t1 !== (t1 | 0))
      return this.get$touching$bailout(1, t1);
    return (t1 & 2) === 2;
  },
  get$touching$bailout: function(state0, t1) {
    return $.$$eq($.$$and(t1, 2), 2);
  },
  get$enabled: function() {
    var t1 = this.flags;
    if (t1 !== (t1 | 0))
      return this.get$enabled$bailout(1, t1);
    return (t1 & 4) === 4;
  },
  get$enabled$bailout: function(state0, t1) {
    return $.$$eq($.$$and(t1, 4), 4);
  },
  flagForFiltering$0: function() {
    var t1 = this.flags;
    if (t1 !== (t1 | 0))
      return this.flagForFiltering$0$bailout(1, t1);
    this.flags = (t1 | 8) >>> 0;
  },
  flagForFiltering$0$bailout: function(state0, t1) {
    this.flags = $.$$or(t1, 8);
  },
  update$1: function(listener) {
    var t1, t2, t4, wasTouching, t6, sensorA, sensorB, sensor, bodyA, bodyB, xfA, xfB, shapeA, shapeB, touching, i, t3, mp2, id2, j, mp1;
    t1 = this._oldManifold;
    t1.setFrom$1(this.manifold);
    t2 = this.flags;
    if (t2 !== (t2 | 0))
      return this.update$1$bailout(1, listener, t1, t2);
    this.flags = (t2 | 4) >>> 0;
    t4 = this.flags;
    if (t4 !== (t4 | 0))
      return this.update$1$bailout(2, listener, t1, 0, t4);
    wasTouching = (t4 & 2) === 2;
    t6 = this.fixtureA;
    sensorA = t6.get$isSensor();
    sensorB = this.fixtureB.get$isSensor();
    sensor = sensorA === true || sensorB === true;
    bodyA = t6.get$body();
    bodyB = this.fixtureB.get$body();
    xfA = bodyA.get$originTransform();
    xfB = bodyB.get$originTransform();
    if (sensor) {
      shapeA = this.fixtureA.get$shape();
      shapeB = this.fixtureB.get$shape();
      touching = this.pool.collision.testOverlap$4(shapeA, shapeB, xfA, xfB);
      if (typeof touching !== "boolean")
        return this.update$1$bailout(3, listener, t1, 0, 0, touching, wasTouching, sensor);
      this.manifold.set$pointCount(0);
    } else {
      this.evaluate$3(this.manifold, xfA, xfB);
      t2 = this.manifold.get$pointCount();
      if (typeof t2 !== "number")
        return this.update$1$bailout(4, listener, t1, t2, 0, 0, wasTouching, sensor, bodyA, bodyB);
      touching = t2 > 0;
      t2 = t1.points;
      i = 0;
      while (true) {
        t3 = this.manifold;
        t4 = t3.get$pointCount();
        if (typeof t4 !== "number")
          return this.update$1$bailout(5, listener, t1, t2, 0, touching, wasTouching, sensor, bodyA, bodyB, i, t4);
        if (!(i < t4))
          break;
        t3 = t3.get$points();
        if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
          return this.update$1$bailout(6, listener, t1, t2, 0, touching, wasTouching, sensor, bodyA, bodyB, i, t3);
        if (i >= t3.length)
          throw $.ioore(i);
        mp2 = t3[i];
        mp2.set$normalImpulse(0);
        mp2.set$tangentImpulse(0);
        id2 = mp2.get$id();
        j = 0;
        while (true) {
          t3 = t1.pointCount;
          if (typeof t3 !== "number")
            return this.update$1$bailout(7, listener, t1, t2, 0, touching, wasTouching, sensor, bodyA, bodyB, i, t3, j, id2, mp2);
          if (!(j < t3))
            break;
          if (j >= t2.length)
            throw $.ioore(j);
          mp1 = t2[j];
          if (mp1.get$id().isEqual$1(id2) === true) {
            mp2.set$normalImpulse(mp1.get$normalImpulse());
            mp2.set$tangentImpulse(mp1.get$tangentImpulse());
            break;
          }
          ++j;
        }
        ++i;
      }
      if (!(touching === wasTouching)) {
        bodyA.set$awake(true);
        bodyB.set$awake(true);
      }
    }
    t2 = this.flags;
    if (t2 !== (t2 | 0))
      return this.update$1$bailout(8, listener, t1, touching, 0, touching, wasTouching, sensor, 0, 0, 0, t2);
    if (touching)
      this.flags = (t2 | 2) >>> 0;
    else
      this.flags = (t2 & 4294967293) >>> 0;
    if (listener == null)
      return;
    if (!wasTouching && touching)
      listener.beginContact$1(this);
    if (wasTouching && !touching)
      listener.endContact$1(this);
    if (!sensor && touching)
      listener.preSolve$2(this, t1);
  },
  update$1$bailout: function(state0, listener, t1, t2, t4, touching, wasTouching, sensor, bodyA, bodyB, i, t3, j, id2, mp2) {
    switch (state0) {
      case 0:
        t1 = this._oldManifold;
        t1.setFrom$1(this.manifold);
        t2 = this.flags;
      case 1:
        state0 = 0;
        this.flags = $.$$or(t2, 4);
        t4 = this.flags;
      case 2:
        state0 = 0;
        wasTouching = $.$$eq($.$$and(t4, 2), 2);
        t6 = this.fixtureA;
        sensorA = t6.get$isSensor();
        sensorB = this.fixtureB.get$isSensor();
        sensor = sensorA === true || sensorB === true;
        bodyA = t6.get$body();
        bodyB = this.fixtureB.get$body();
        xfA = bodyA.get$originTransform();
        xfB = bodyB.get$originTransform();
      default:
        if (state0 === 3 || state0 === 0 && sensor)
          switch (state0) {
            case 0:
              shapeA = this.fixtureA.get$shape();
              shapeB = this.fixtureB.get$shape();
              touching = this.pool.collision.testOverlap$4(shapeA, shapeB, xfA, xfB);
            case 3:
              state0 = 0;
              this.manifold.set$pointCount(0);
          }
        else
          switch (state0) {
            case 0:
              this.evaluate$3(this.manifold, xfA, xfB);
              t2 = this.manifold.get$pointCount();
            case 4:
              state0 = 0;
              touching = $.$$gt(t2, 0);
              t2 = t1.points;
              i = 0;
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      t3 = this.manifold.get$pointCount();
                    case 5:
                      state0 = 0;
                      if (!$.CONSTANT2.$lt(i, t3))
                        break L0;
                      t3 = this.manifold.get$points();
                    case 6:
                      state0 = 0;
                      mp2 = $.$$index(t3, i);
                      mp2.set$normalImpulse(0);
                      mp2.set$tangentImpulse(0);
                      id2 = mp2.get$id();
                      j = 0;
                    case 7:
                      L1:
                        while (true)
                          switch (state0) {
                            case 0:
                              t3 = t1.pointCount;
                            case 7:
                              state0 = 0;
                              if (!$.CONSTANT2.$lt(j, t3))
                                break L1;
                              if (j >= t2.length)
                                throw $.ioore(j);
                              mp1 = t2[j];
                              if (mp1.get$id().isEqual$1(id2) === true) {
                                mp2.set$normalImpulse(mp1.get$normalImpulse());
                                mp2.set$tangentImpulse(mp1.get$tangentImpulse());
                                break L1;
                              }
                              ++j;
                          }
                      ++i;
                  }
              if ($.$$eq(touching, wasTouching) !== true) {
                bodyA.set$awake(true);
                bodyB.set$awake(true);
              }
          }
        t2 = touching === true;
        t3 = this.flags;
      case 8:
        var t6, sensorA, sensorB, xfA, xfB, shapeA, shapeB, mp1;
        state0 = 0;
        if (t2)
          this.flags = $.$$or(t3, 2);
        else
          this.flags = $.$$and(t3, 4294967293);
        if (listener == null)
          return;
        t3 = $.getInterceptor(wasTouching);
        if (t3.$eq(wasTouching, false) === true && $.$$eq(touching, true) === true)
          listener.beginContact$1(this);
        if (t3.$eq(wasTouching, true) === true && $.$$eq(touching, false) === true)
          listener.endContact$1(this);
        if (!sensor && t2)
          listener.preSolve$2(this, t1);
    }
  }
};

$$.ContactConstraint = {"": "Object;points>,localNormal>,localPoint>,normal>,normalMass>,K>,bodyA=,bodyB=,type=,radius=,friction=,restitution=,pointCount=,manifold=",
  setFrom$1: function(cp) {
    var t1, i, t2, t3;
    this.pointCount = cp.get$pointCount();
    this.localNormal.setFrom$1(cp.get$localNormal());
    this.localPoint.setFrom$1(cp.get$localPoint());
    this.normal.setFrom$1(cp.get$normal());
    this.normalMass.setFrom$1(cp.get$normalMass());
    this.K.setFrom$1(cp.get$K());
    this.bodyA = cp.get$bodyA();
    this.bodyB = cp.get$bodyB();
    this.type = cp.get$type();
    this.radius = cp.get$radius();
    this.friction = cp.get$friction();
    this.restitution = cp.get$restitution();
    this.manifold = cp.get$manifold();
    t1 = this.points;
    i = 0;
    while (true) {
      t2 = cp.get$pointCount();
      if (typeof t2 !== "number")
        return this.setFrom$1$bailout1(1, cp, t1, i, t2);
      if (!(i < t2))
        break;
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = t1[i];
      t3 = cp.get$points();
      if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
        return this.setFrom$1$bailout1(2, cp, t1, i, t2, t3);
      if (i >= t3.length)
        throw $.ioore(i);
      t2.setFrom$1(t3[i]);
      ++i;
    }
  },
  setFrom$1$bailout1: function(state0, cp, t1, i, t2, t3) {
    switch (state0) {
      case 0:
        this.pointCount = cp.get$pointCount();
        this.localNormal.setFrom$1(cp.get$localNormal());
        this.localPoint.setFrom$1(cp.get$localPoint());
        this.normal.setFrom$1(cp.get$normal());
        this.normalMass.setFrom$1(cp.get$normalMass());
        this.K.setFrom$1(cp.get$K());
        this.bodyA = cp.get$bodyA();
        this.bodyB = cp.get$bodyB();
        this.type = cp.get$type();
        this.radius = cp.get$radius();
        this.friction = cp.get$friction();
        this.restitution = cp.get$restitution();
        this.manifold = cp.get$manifold();
        t1 = this.points;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = cp.get$pointCount();
              case 1:
                state0 = 0;
                if (!$.CONSTANT2.$lt(i, t2))
                  break L0;
                if (i >= t1.length)
                  throw $.ioore(i);
                t2 = t1[i];
                t3 = cp.get$points();
              case 2:
                state0 = 0;
                t2.setFrom$1($.$$index(t3, i));
                ++i;
            }
    }
  },
  toString$0: function() {
    return "localNormal: \"" + $.S(this.localNormal) + "\", localPoint: \"" + $.S(this.localPoint) + "\" " + "normal: \"" + $.S(this.normal) + "\", radius: \"" + $.S(this.radius) + "\" friction: \"" + $.S(this.friction) + "\" " + "restitution: \"" + $.S(this.restitution) + "\", pointCount: \"" + $.S(this.pointCount) + "\"";
  },
  ContactConstraint$0: function() {
    var t1, i, t2;
    for (t1 = this.points, i = 0; i < 2; ++i) {
      t2 = $.ContactConstraintPoint$();
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.ContactConstraintPoint = {"": "Object;localPoint>,rA>,rB>,normalImpulse=,tangentImpulse=,normalMass=,tangentMass=,velocityBias=",
  setFrom$1: function(cp) {
    this.localPoint.setFrom$1(cp.get$localPoint());
    this.rA.setFrom$1(cp.get$rA());
    this.rB.setFrom$1(cp.get$rB());
    this.normalImpulse = cp.get$normalImpulse();
    this.tangentImpulse = cp.get$tangentImpulse();
    this.normalMass = cp.get$normalMass();
    this.tangentMass = cp.get$tangentMass();
    this.velocityBias = cp.get$velocityBias();
  },
  toString$0: function() {
    return "normal impulse: " + $.S(this.normalImpulse) + ", tangentImpulse: " + $.S(this.tangentImpulse) + ", normalMass: " + $.S(this.normalMass) + ", tangentMass: " + $.S(this.tangentMass) + ", velocityBias: " + $.S(this.velocityBias) + ", localPoint: " + $.S(this.localPoint) + ", rA: " + $.S(this.rA) + ", rB: " + $.S(this.rB);
  }
};

$$.ContactEdge = {"": "Object;other=,contact=,prev=,next="};

$$.CircleContact = {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Expect_equals(0, fA.get$type(), null);
    $.Expect_equals(0, fB.get$type(), null);
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collideCircles$5(argManifold, this.fixtureA.get$shape(), xfA, this.fixtureB.get$shape(), xfB);
  }
};

$$.ContactRegister = {"": "Object;creator>,primary>"};

$$.ContactSolver = {"": "Object;constraints,constraintCount,worldManifold,tangent,temp1,temp2,P,dv,dv1,dv2,x>,d,P1,P2,psolver,rA>,rB>",
  init$3: function(contacts, contactCount, impulseRatio) {
    var old, i, t1, t2, t3, t4, t5, t6, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, friction, restitution, vA, vB, wA, wB, t10, cc, t7, t8, t9, j, cp, ccp, t11, t12, rnA, rnB, kNormal, t13, rtA, rtB, kTangent, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, a, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, rn2B, k11, k22, k12;
    if (typeof contacts !== "object" || contacts === null || contacts.constructor !== Array && !contacts.$isJavaScriptIndexingBehavior())
      return this.init$3$bailout(1, contacts, contactCount, impulseRatio);
    this.constraintCount = contactCount;
    if ($.CONSTANT2.$lt(this.constraints.length, contactCount)) {
      old = this.constraints;
      this.constraints = $.List_List($.max(old.length * 2, this.constraintCount));
      $.CONSTANT1.setRange$3(this.constraints, 0, old.length, old);
      for (i = old.length; t1 = this.constraints, i < t1.length; ++i) {
        t2 = $.ContactConstraint$();
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = t2;
      }
    }
    for (t1 = this.worldManifold, t2 = t1.points, t3 = this.tangent, t4 = this.temp2, t5 = this.temp1, t6 = t1.normal, i = 0; $.CONSTANT2.$lt(i, this.constraintCount); ++i) {
      if (i >= contacts.length)
        throw $.ioore(i);
      contact = contacts[i];
      fixtureA = contact.get$fixtureA();
      fixtureB = contact.get$fixtureB();
      shapeA = fixtureA.get$shape();
      shapeB = fixtureB.get$shape();
      radiusA = shapeA.get$radius();
      radiusB = shapeB.get$radius();
      bodyA = fixtureA.get$body();
      bodyB = fixtureB.get$body();
      manifold = contact.get$manifold();
      friction = Math.sqrt($.checkNum($.$$mul(fixtureA.get$friction(), fixtureB.get$friction())));
      restitution = $.Settings_mixRestitution(fixtureA.get$restitution(), fixtureB.get$restitution());
      if (typeof restitution !== "number")
        return this.init$3$bailout(2, contacts, 0, impulseRatio, restitution, i, t3, $.CONSTANT1, radiusA, radiusB, bodyA, bodyB, manifold, t4, t6, t5, friction, t1, t2);
      vA = bodyA.get$linearVelocity();
      vB = bodyB.get$linearVelocity();
      wA = bodyA.get$angularVelocity();
      if (typeof wA !== "number")
        return this.init$3$bailout(3, contacts, 0, impulseRatio, restitution, i, t3, $.CONSTANT1, radiusA, radiusB, bodyA, bodyB, manifold, t4, t6, t5, friction, t1, t2, vA, vB, wA);
      wB = bodyB.get$angularVelocity();
      if (typeof wB !== "number")
        return this.init$3$bailout(4, contacts, 0, impulseRatio, restitution, i, t3, $.CONSTANT1, radiusA, radiusB, bodyA, bodyB, manifold, t4, t6, t5, friction, t1, t2, vA, vB, wA, wB);
      t1.initialize$5(manifold, bodyA.get$originTransform(), radiusA, bodyB.get$originTransform(), radiusB);
      t10 = this.constraints;
      if (i >= t10.length)
        throw $.ioore(i);
      cc = t10[i];
      cc.set$bodyA(bodyA);
      cc.set$bodyB(bodyB);
      cc.set$manifold(manifold);
      t10 = t6.x;
      cc.get$normal().set$x(t10);
      t10 = t6.y;
      cc.get$normal().set$y(t10);
      cc.set$pointCount(manifold.get$pointCount());
      cc.set$friction(friction);
      cc.set$restitution(restitution);
      t10 = manifold.get$localNormal().get$x();
      cc.get$localNormal().set$x(t10);
      t10 = manifold.get$localNormal().get$y();
      cc.get$localNormal().set$y(t10);
      t10 = manifold.get$localPoint().get$x();
      cc.get$localPoint().set$x(t10);
      t10 = manifold.get$localPoint().get$y();
      cc.get$localPoint().set$y(t10);
      cc.set$radius($.$$add(radiusA, radiusB));
      cc.set$type(manifold.get$type());
      for (t7 = -restitution, t8 = -wA, t9 = -wB, j = 0; $.CONSTANT2.$lt(j, cc.get$pointCount()); ++j) {
        cp = $.$$index(manifold.get$points(), j);
        ccp = $.$$index(cc.get$points(), j);
        t10 = cp.get$normalImpulse();
        if (typeof t10 !== "number")
          throw $.iae(t10);
        ccp.set$normalImpulse(impulseRatio * t10);
        t11 = cp.get$tangentImpulse();
        if (typeof t11 !== "number")
          throw $.iae(t11);
        ccp.set$tangentImpulse(impulseRatio * t11);
        t12 = cp.get$localPoint().get$x();
        ccp.get$localPoint().set$x(t12);
        t12 = cp.get$localPoint().get$y();
        ccp.get$localPoint().set$y(t12);
        if (j >= t2.length)
          throw $.ioore(j);
        t12 = $.$$sub(t2[j].get$x(), bodyA.get$sweep().get$center().get$x());
        ccp.get$rA().set$x(t12);
        if (j >= t2.length)
          throw $.ioore(j);
        t12 = $.$$sub(t2[j].get$y(), bodyA.get$sweep().get$center().get$y());
        ccp.get$rA().set$y(t12);
        if (j >= t2.length)
          throw $.ioore(j);
        t12 = $.$$sub(t2[j].get$x(), bodyB.get$sweep().get$center().get$x());
        ccp.get$rB().set$x(t12);
        if (j >= t2.length)
          throw $.ioore(j);
        t12 = $.$$sub(t2[j].get$y(), bodyB.get$sweep().get$center().get$y());
        ccp.get$rB().set$y(t12);
        rnA = $.$$sub($.$$mul(ccp.get$rA().get$x(), cc.get$normal().get$y()), $.$$mul(ccp.get$rA().get$y(), cc.get$normal().get$x()));
        rnB = $.$$sub($.$$mul(ccp.get$rB().get$x(), cc.get$normal().get$y()), $.$$mul(ccp.get$rB().get$y(), cc.get$normal().get$x()));
        rnA = $.$$mul(rnA, rnA);
        rnB = $.$$mul(rnB, rnB);
        kNormal = $.$$add($.$$add($.$$add(bodyA.get$invMass(), bodyB.get$invMass()), $.$$mul(bodyA.get$invInertia(), rnA)), $.$$mul(bodyB.get$invInertia(), rnB));
        if (typeof kNormal !== "number")
          throw $.iae(kNormal);
        ccp.set$normalMass(1 / kNormal);
        t12 = cc.get$normal().get$y();
        if (typeof t12 !== "number")
          throw $.iae(t12);
        t3.x = 1 * t12;
        t13 = cc.get$normal().get$x();
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t3.y = -1 * t13;
        rtA = $.$$sub($.$$mul(ccp.get$rA().get$x(), t3.y), $.$$mul(ccp.get$rA().get$y(), t3.x));
        rtB = $.$$sub($.$$mul(ccp.get$rB().get$x(), t3.y), $.$$mul(ccp.get$rB().get$y(), t3.x));
        rtA = $.$$mul(rtA, rtA);
        rtB = $.$$mul(rtB, rtB);
        kTangent = $.$$add($.$$add($.$$add(bodyA.get$invMass(), bodyB.get$invMass()), $.$$mul(bodyA.get$invInertia(), rtA)), $.$$mul(bodyB.get$invInertia(), rtB));
        if (typeof kTangent !== "number")
          throw $.iae(kTangent);
        ccp.set$tangentMass(1 / kTangent);
        ccp.set$velocityBias(0);
        t14 = ccp.get$rA().get$y();
        if (typeof t14 !== "number")
          throw $.iae(t14);
        t4.x = t8 * t14;
        t15 = ccp.get$rA().get$x();
        if (typeof t15 !== "number")
          throw $.iae(t15);
        t4.y = wA * t15;
        t16 = ccp.get$rB().get$y();
        if (typeof t16 !== "number")
          throw $.iae(t16);
        t17 = vB.get$x();
        if (typeof t17 !== "number")
          throw $.iae(t17);
        t18 = vA.get$x();
        if (typeof t18 !== "number")
          throw $.iae(t18);
        t19 = t4.x;
        if (typeof t19 !== "number")
          throw $.iae(t19);
        t5.x = t9 * t16 + t17 - t18 - t19;
        t20 = ccp.get$rB().get$x();
        if (typeof t20 !== "number")
          throw $.iae(t20);
        t21 = vB.get$y();
        if (typeof t21 !== "number")
          throw $.iae(t21);
        t22 = vA.get$y();
        if (typeof t22 !== "number")
          throw $.iae(t22);
        t23 = t4.y;
        if (typeof t23 !== "number")
          throw $.iae(t23);
        t5.y = wB * t20 + t21 - t22 - t23;
        a = cc.get$normal();
        vRel = $.$$add($.$$mul(a.get$x(), t5.x), $.$$mul(a.get$y(), t5.y));
        if ($.$$lt(vRel, -1) === true) {
          if (typeof vRel !== "number")
            throw $.iae(vRel);
          ccp.set$velocityBias(t7 * vRel);
        }
      }
      if ($.$$eq(cc.get$pointCount(), 2) === true) {
        ccp1 = $.$$index(cc.get$points(), 0);
        ccp2 = $.$$index(cc.get$points(), 1);
        invMassA = bodyA.get$invMass();
        invIA = bodyA.get$invInertia();
        invMassB = bodyB.get$invMass();
        invIB = bodyB.get$invInertia();
        t7 = ccp1.get$rA();
        t8 = cc.get$normal();
        rn1A = $.$$sub($.$$mul(t7.get$x(), t8.get$y()), $.$$mul(t7.get$y(), t8.get$x()));
        t9 = ccp1.get$rB();
        t10 = cc.get$normal();
        rn1B = $.$$sub($.$$mul(t9.get$x(), t10.get$y()), $.$$mul(t9.get$y(), t10.get$x()));
        t11 = ccp2.get$rA();
        t12 = cc.get$normal();
        rn2A = $.$$sub($.$$mul(t11.get$x(), t12.get$y()), $.$$mul(t11.get$y(), t12.get$x()));
        t13 = ccp2.get$rB();
        t14 = cc.get$normal();
        rn2B = $.$$sub($.$$mul(t13.get$x(), t14.get$y()), $.$$mul(t13.get$y(), t14.get$x()));
        t15 = $.getInterceptor$JSNumber(invMassA);
        t16 = $.getInterceptor$JSNumber(invIA);
        t17 = $.getInterceptor$JSNumber(invIB);
        k11 = $.$$add($.$$add(t15.$add(invMassA, invMassB), $.$$mul(t16.$mul(invIA, rn1A), rn1A)), $.$$mul(t17.$mul(invIB, rn1B), rn1B));
        k22 = $.$$add($.$$add(t15.$add(invMassA, invMassB), $.$$mul(t16.$mul(invIA, rn2A), rn2A)), $.$$mul(t17.$mul(invIB, rn2B), rn2B));
        k12 = $.$$add($.$$add(t15.$add(invMassA, invMassB), $.$$mul(t16.$mul(invIA, rn1A), rn2A)), $.$$mul(t17.$mul(invIB, rn1B), rn2B));
        t7 = $.getInterceptor$JSNumber(k11);
        t8 = t7.$mul(k11, k11);
        t9 = $.$$sub(t7.$mul(k11, k22), $.$$mul(k12, k12));
        if (typeof t9 !== "number")
          throw $.iae(t9);
        if ($.$$lt(t8, 100 * t9) === true) {
          cc.get$K().get$col1().set$x(k11);
          cc.get$K().get$col1().set$y(k12);
          cc.get$K().get$col2().set$x(k12);
          cc.get$K().get$col2().set$y(k22);
          t7 = cc.get$K().get$col1().get$x();
          cc.get$normalMass().get$col1().set$x(t7);
          t7 = cc.get$K().get$col1().get$y();
          cc.get$normalMass().get$col1().set$y(t7);
          t7 = cc.get$K().get$col2().get$x();
          cc.get$normalMass().get$col2().set$x(t7);
          t7 = cc.get$K().get$col2().get$y();
          cc.get$normalMass().get$col2().set$y(t7);
          cc.get$normalMass().invertLocal$0();
        } else
          cc.set$pointCount(1);
      }
    }
  },
  init$3$bailout: function(state0, contacts, contactCount, impulseRatio, restitution, i, t3, t6, radiusA, radiusB, bodyA, bodyB, manifold, t4, t7, t5, friction, t1, t2, vA, vB, wA, wB) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        this.constraintCount = contactCount;
        if ($.CONSTANT2.$lt(this.constraints.length, contactCount)) {
          old = this.constraints;
          this.constraints = $.List_List($.max(old.length * 2, this.constraintCount));
          $.CONSTANT1.setRange$3(this.constraints, 0, old.length, old);
          for (i = old.length; t1 = this.constraints, i < t1.length; ++i) {
            t2 = $.ContactConstraint$();
            if (i >= t1.length)
              throw $.ioore(i);
            t1[i] = t2;
          }
        }
        t1 = this.worldManifold;
        t2 = t1.points;
        t3 = this.tangent;
        t4 = this.temp2;
        t5 = this.temp1;
        t6 = $.getInterceptor$JSStringJSArray(contacts);
        t7 = t1.normal;
        i = 0;
      default:
        var old, contact, fixtureA, fixtureB, shapeA, shapeB, t11, cc, t8, t9, t10, j, cp, ccp, t12, t13, rnA, rnB, kNormal, t14, rtA, rtB, kTangent, a, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, t15, rn2B, t16, t17, t18, k11, k22, k12;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT2.$lt(i, this.constraintCount))
                  break L0;
                contact = t6.$index(contacts, i);
                fixtureA = contact.get$fixtureA();
                fixtureB = contact.get$fixtureB();
                shapeA = fixtureA.get$shape();
                shapeB = fixtureB.get$shape();
                radiusA = shapeA.get$radius();
                radiusB = shapeB.get$radius();
                bodyA = fixtureA.get$body();
                bodyB = fixtureB.get$body();
                manifold = contact.get$manifold();
                friction = Math.sqrt($.checkNum($.$$mul(fixtureA.get$friction(), fixtureB.get$friction())));
                restitution = $.Settings_mixRestitution(fixtureA.get$restitution(), fixtureB.get$restitution());
              case 2:
                state0 = 0;
                vA = bodyA.get$linearVelocity();
                vB = bodyB.get$linearVelocity();
                wA = bodyA.get$angularVelocity();
              case 3:
                state0 = 0;
                wB = bodyB.get$angularVelocity();
              case 4:
                state0 = 0;
                t1.initialize$5(manifold, bodyA.get$originTransform(), radiusA, bodyB.get$originTransform(), radiusB);
                t11 = this.constraints;
                if (i >= t11.length)
                  throw $.ioore(i);
                cc = t11[i];
                cc.set$bodyA(bodyA);
                cc.set$bodyB(bodyB);
                cc.set$manifold(manifold);
                t11 = t7.x;
                cc.get$normal().set$x(t11);
                t11 = t7.y;
                cc.get$normal().set$y(t11);
                cc.set$pointCount(manifold.get$pointCount());
                cc.set$friction(friction);
                cc.set$restitution(restitution);
                t11 = manifold.get$localNormal().get$x();
                cc.get$localNormal().set$x(t11);
                t11 = manifold.get$localNormal().get$y();
                cc.get$localNormal().set$y(t11);
                t11 = manifold.get$localPoint().get$x();
                cc.get$localPoint().set$x(t11);
                t11 = manifold.get$localPoint().get$y();
                cc.get$localPoint().set$y(t11);
                cc.set$radius($.$$add(radiusA, radiusB));
                cc.set$type(manifold.get$type());
                for (t8 = $.getInterceptor$JSNumber(restitution), t9 = $.getInterceptor$JSNumber(wA), t10 = $.getInterceptor$JSNumber(wB), j = 0; $.CONSTANT2.$lt(j, cc.get$pointCount()); ++j) {
                  cp = $.$$index(manifold.get$points(), j);
                  ccp = $.$$index(cc.get$points(), j);
                  t11 = cp.get$normalImpulse();
                  if (typeof t11 !== "number")
                    throw $.iae(t11);
                  ccp.set$normalImpulse(impulseRatio * t11);
                  t12 = cp.get$tangentImpulse();
                  if (typeof t12 !== "number")
                    throw $.iae(t12);
                  ccp.set$tangentImpulse(impulseRatio * t12);
                  t13 = cp.get$localPoint().get$x();
                  ccp.get$localPoint().set$x(t13);
                  t13 = cp.get$localPoint().get$y();
                  ccp.get$localPoint().set$y(t13);
                  if (j >= t2.length)
                    throw $.ioore(j);
                  t13 = $.$$sub(t2[j].get$x(), bodyA.get$sweep().get$center().get$x());
                  ccp.get$rA().set$x(t13);
                  if (j >= t2.length)
                    throw $.ioore(j);
                  t13 = $.$$sub(t2[j].get$y(), bodyA.get$sweep().get$center().get$y());
                  ccp.get$rA().set$y(t13);
                  if (j >= t2.length)
                    throw $.ioore(j);
                  t13 = $.$$sub(t2[j].get$x(), bodyB.get$sweep().get$center().get$x());
                  ccp.get$rB().set$x(t13);
                  if (j >= t2.length)
                    throw $.ioore(j);
                  t13 = $.$$sub(t2[j].get$y(), bodyB.get$sweep().get$center().get$y());
                  ccp.get$rB().set$y(t13);
                  rnA = $.$$sub($.$$mul(ccp.get$rA().get$x(), cc.get$normal().get$y()), $.$$mul(ccp.get$rA().get$y(), cc.get$normal().get$x()));
                  rnB = $.$$sub($.$$mul(ccp.get$rB().get$x(), cc.get$normal().get$y()), $.$$mul(ccp.get$rB().get$y(), cc.get$normal().get$x()));
                  rnA = $.$$mul(rnA, rnA);
                  rnB = $.$$mul(rnB, rnB);
                  kNormal = $.$$add($.$$add($.$$add(bodyA.get$invMass(), bodyB.get$invMass()), $.$$mul(bodyA.get$invInertia(), rnA)), $.$$mul(bodyB.get$invInertia(), rnB));
                  if (typeof kNormal !== "number")
                    throw $.iae(kNormal);
                  ccp.set$normalMass(1 / kNormal);
                  t13 = cc.get$normal().get$y();
                  if (typeof t13 !== "number")
                    throw $.iae(t13);
                  t3.x = 1 * t13;
                  t14 = cc.get$normal().get$x();
                  if (typeof t14 !== "number")
                    throw $.iae(t14);
                  t3.y = -1 * t14;
                  rtA = $.$$sub($.$$mul(ccp.get$rA().get$x(), t3.y), $.$$mul(ccp.get$rA().get$y(), t3.x));
                  rtB = $.$$sub($.$$mul(ccp.get$rB().get$x(), t3.y), $.$$mul(ccp.get$rB().get$y(), t3.x));
                  rtA = $.$$mul(rtA, rtA);
                  rtB = $.$$mul(rtB, rtB);
                  kTangent = $.$$add($.$$add($.$$add(bodyA.get$invMass(), bodyB.get$invMass()), $.$$mul(bodyA.get$invInertia(), rtA)), $.$$mul(bodyB.get$invInertia(), rtB));
                  if (typeof kTangent !== "number")
                    throw $.iae(kTangent);
                  ccp.set$tangentMass(1 / kTangent);
                  ccp.set$velocityBias(0);
                  t4.x = $.$$mul(t9.$negate(wA), ccp.get$rA().get$y());
                  t4.y = t9.$mul(wA, ccp.get$rA().get$x());
                  t5.x = $.$$sub($.$$sub($.$$add($.$$mul(t10.$negate(wB), ccp.get$rB().get$y()), vB.get$x()), vA.get$x()), t4.x);
                  t5.y = $.$$sub($.$$sub($.$$add(t10.$mul(wB, ccp.get$rB().get$x()), vB.get$y()), vA.get$y()), t4.y);
                  a = cc.get$normal();
                  vRel = $.$$add($.$$mul(a.get$x(), t5.x), $.$$mul(a.get$y(), t5.y));
                  if ($.$$lt(vRel, -1) === true)
                    ccp.set$velocityBias($.$$mul(t8.$negate(restitution), vRel));
                }
                if ($.$$eq(cc.get$pointCount(), 2) === true) {
                  ccp1 = $.$$index(cc.get$points(), 0);
                  ccp2 = $.$$index(cc.get$points(), 1);
                  invMassA = bodyA.get$invMass();
                  invIA = bodyA.get$invInertia();
                  invMassB = bodyB.get$invMass();
                  invIB = bodyB.get$invInertia();
                  t8 = ccp1.get$rA();
                  t9 = cc.get$normal();
                  rn1A = $.$$sub($.$$mul(t8.get$x(), t9.get$y()), $.$$mul(t8.get$y(), t9.get$x()));
                  t10 = ccp1.get$rB();
                  t11 = cc.get$normal();
                  rn1B = $.$$sub($.$$mul(t10.get$x(), t11.get$y()), $.$$mul(t10.get$y(), t11.get$x()));
                  t12 = ccp2.get$rA();
                  t13 = cc.get$normal();
                  rn2A = $.$$sub($.$$mul(t12.get$x(), t13.get$y()), $.$$mul(t12.get$y(), t13.get$x()));
                  t14 = ccp2.get$rB();
                  t15 = cc.get$normal();
                  rn2B = $.$$sub($.$$mul(t14.get$x(), t15.get$y()), $.$$mul(t14.get$y(), t15.get$x()));
                  t16 = $.getInterceptor$JSNumber(invMassA);
                  t17 = $.getInterceptor$JSNumber(invIA);
                  t18 = $.getInterceptor$JSNumber(invIB);
                  k11 = $.$$add($.$$add(t16.$add(invMassA, invMassB), $.$$mul(t17.$mul(invIA, rn1A), rn1A)), $.$$mul(t18.$mul(invIB, rn1B), rn1B));
                  k22 = $.$$add($.$$add(t16.$add(invMassA, invMassB), $.$$mul(t17.$mul(invIA, rn2A), rn2A)), $.$$mul(t18.$mul(invIB, rn2B), rn2B));
                  k12 = $.$$add($.$$add(t16.$add(invMassA, invMassB), $.$$mul(t17.$mul(invIA, rn1A), rn2A)), $.$$mul(t18.$mul(invIB, rn1B), rn2B));
                  t8 = $.getInterceptor$JSNumber(k11);
                  t9 = t8.$mul(k11, k11);
                  t10 = $.$$sub(t8.$mul(k11, k22), $.$$mul(k12, k12));
                  if (typeof t10 !== "number")
                    throw $.iae(t10);
                  if ($.$$lt(t9, 100 * t10) === true) {
                    cc.get$K().get$col1().set$x(k11);
                    cc.get$K().get$col1().set$y(k12);
                    cc.get$K().get$col2().set$x(k12);
                    cc.get$K().get$col2().set$y(k22);
                    t8 = cc.get$K().get$col1().get$x();
                    cc.get$normalMass().get$col1().set$x(t8);
                    t8 = cc.get$K().get$col1().get$y();
                    cc.get$normalMass().get$col1().set$y(t8);
                    t8 = cc.get$K().get$col2().get$x();
                    cc.get$normalMass().get$col2().set$x(t8);
                    t8 = cc.get$K().get$col2().get$y();
                    cc.get$normalMass().get$col2().set$y(t8);
                    cc.get$normalMass().invertLocal$0();
                  } else
                    cc.set$pointCount(1);
                }
                ++i;
            }
    }
  },
  warmStart$0: function() {
    var t1, i, t2, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, normal, j, ccp, Px, Py, t3, t4, t5, t6, t7, t8;
    for (t1 = this.tangent, i = 0; $.CONSTANT2.$lt(i, this.constraintCount); ++i) {
      t2 = this.constraints;
      if (i >= t2.length)
        throw $.ioore(i);
      c = t2[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      invMassA = bodyA.get$invMass();
      if (typeof invMassA !== "number")
        return this.warmStart$0$bailout(1, invMassA, bodyA, i, c, t1, bodyB);
      invIA = bodyA.get$invInertia();
      if (typeof invIA !== "number")
        return this.warmStart$0$bailout(2, invMassA, bodyA, i, c, t1, bodyB, invIA);
      invMassB = bodyB.get$invMass();
      if (typeof invMassB !== "number")
        return this.warmStart$0$bailout(3, invMassA, bodyA, i, c, t1, bodyB, invIA, invMassB);
      invIB = bodyB.get$invInertia();
      if (typeof invIB !== "number")
        return this.warmStart$0$bailout(4, invMassA, bodyA, i, c, t1, bodyB, invIA, invMassB, invIB);
      normal = c.get$normal();
      $.Vector_crossVectorAndNumToOut(normal, 1, t1);
      for (j = 0; $.CONSTANT2.$lt(j, c.get$pointCount()); ++j) {
        ccp = $.$$index(c.get$points(), j);
        Px = $.$$add($.$$mul(ccp.get$normalImpulse(), normal.get$x()), $.$$mul(ccp.get$tangentImpulse(), t1.x));
        Py = $.$$add($.$$mul(ccp.get$normalImpulse(), normal.get$y()), $.$$mul(ccp.get$tangentImpulse(), t1.y));
        t2 = bodyA.get$angularVelocity();
        t3 = $.$$sub($.$$mul(ccp.get$rA().get$x(), Py), $.$$mul(ccp.get$rA().get$y(), Px));
        if (typeof t3 !== "number")
          throw $.iae(t3);
        bodyA.set$angularVelocity($.$$sub(t2, invIA * t3));
        t4 = bodyA.get$linearVelocity();
        t5 = $.getInterceptor$JSNumber(Px);
        t4.set$x($.$$sub(t4.get$x(), t5.$mul(Px, invMassA)));
        t4 = bodyA.get$linearVelocity();
        t6 = $.getInterceptor$JSNumber(Py);
        t4.set$y($.$$sub(t4.get$y(), t6.$mul(Py, invMassA)));
        t4 = bodyB.get$angularVelocity();
        t7 = $.$$sub($.$$mul(ccp.get$rB().get$x(), Py), $.$$mul(ccp.get$rB().get$y(), Px));
        if (typeof t7 !== "number")
          throw $.iae(t7);
        bodyB.set$angularVelocity($.$$add(t4, invIB * t7));
        t8 = bodyB.get$linearVelocity();
        t8.set$x($.$$add(t8.get$x(), t5.$mul(Px, invMassB)));
        t8 = bodyB.get$linearVelocity();
        t8.set$y($.$$add(t8.get$y(), t6.$mul(Py, invMassB)));
      }
    }
  },
  warmStart$0$bailout: function(state0, invMassA, bodyA, i, c, t1, bodyB, invIA, invMassB, invIB) {
    switch (state0) {
      case 0:
        t1 = this.tangent;
        i = 0;
      default:
        var t2, normal, t3, j, ccp, Px, Py, t4, t5, t6;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT2.$lt(i, this.constraintCount))
                  break L0;
                t2 = this.constraints;
                if (i >= t2.length)
                  throw $.ioore(i);
                c = t2[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                invMassA = bodyA.get$invMass();
              case 1:
                state0 = 0;
                invIA = bodyA.get$invInertia();
              case 2:
                state0 = 0;
                invMassB = bodyB.get$invMass();
              case 3:
                state0 = 0;
                invIB = bodyB.get$invInertia();
              case 4:
                state0 = 0;
                normal = c.get$normal();
                $.Vector_crossVectorAndNumToOut(normal, 1, t1);
                for (t2 = $.getInterceptor$JSNumber(invIA), t3 = $.getInterceptor$JSNumber(invIB), j = 0; $.CONSTANT2.$lt(j, c.get$pointCount()); ++j) {
                  ccp = $.$$index(c.get$points(), j);
                  Px = $.$$add($.$$mul(ccp.get$normalImpulse(), normal.get$x()), $.$$mul(ccp.get$tangentImpulse(), t1.x));
                  Py = $.$$add($.$$mul(ccp.get$normalImpulse(), normal.get$y()), $.$$mul(ccp.get$tangentImpulse(), t1.y));
                  bodyA.set$angularVelocity($.$$sub(bodyA.get$angularVelocity(), t2.$mul(invIA, $.$$sub($.$$mul(ccp.get$rA().get$x(), Py), $.$$mul(ccp.get$rA().get$y(), Px)))));
                  t4 = bodyA.get$linearVelocity();
                  t5 = $.getInterceptor$JSNumber(Px);
                  t4.set$x($.$$sub(t4.get$x(), t5.$mul(Px, invMassA)));
                  t4 = bodyA.get$linearVelocity();
                  t6 = $.getInterceptor$JSNumber(Py);
                  t4.set$y($.$$sub(t4.get$y(), t6.$mul(Py, invMassA)));
                  bodyB.set$angularVelocity($.$$add(bodyB.get$angularVelocity(), t3.$mul(invIB, $.$$sub($.$$mul(ccp.get$rB().get$x(), Py), $.$$mul(ccp.get$rB().get$y(), Px)))));
                  t4 = bodyB.get$linearVelocity();
                  t4.set$x($.$$add(t4.get$x(), t5.$mul(Px, invMassB)));
                  t4 = bodyB.get$linearVelocity();
                  t4.set$y($.$$add(t4.get$y(), t6.$mul(Py, invMassB)));
                }
                ++i;
            }
    }
  },
  solveVelocityConstraints$0: function() {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, i, t11, c, bodyA, bodyB, wA, wB, vA, vB, invMassA, invIA, invMassB, invIB, t17, t18, friction, j, ccp, a, t13, t20, t24, t26, t29, vt, lambda, maxFriction, newImpulse, t34, lambda0, Px, Py, t38, t40, t41, t44, t46, t48, t49, t12, t14, t15, a1, b, t28, t30, vn, t33, t16, t19, t21, t23, cp1, cp2, t25, t32, t36, t39, vn1, vn2, t47, t51, t54, t56, t57, t59, t62, t64, t66, t68, t70, t22, t27, t31;
    t1 = this.dv;
    t2 = this.tangent;
    t3 = this.d;
    t4 = this.x;
    t5 = this.P1;
    t6 = this.P2;
    t7 = this.temp1;
    t8 = this.temp2;
    t9 = this.dv1;
    t10 = this.dv2;
    i = 0;
    while (true) {
      t11 = this.constraintCount;
      if (typeof t11 !== "number")
        return this.solveVelocityConstraints$0$bailout(1, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9);
      if (!(i < t11))
        break;
      t11 = this.constraints;
      if (i >= t11.length)
        throw $.ioore(i);
      c = t11[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      wA = bodyA.get$angularVelocity();
      if (typeof wA !== "number")
        return this.solveVelocityConstraints$0$bailout(2, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c);
      wB = bodyB.get$angularVelocity();
      if (typeof wB !== "number")
        return this.solveVelocityConstraints$0$bailout(3, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB);
      vA = bodyA.get$linearVelocity();
      vB = bodyB.get$linearVelocity();
      invMassA = bodyA.get$invMass();
      if (typeof invMassA !== "number")
        return this.solveVelocityConstraints$0$bailout(4, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA);
      invIA = bodyA.get$invInertia();
      if (typeof invIA !== "number")
        return this.solveVelocityConstraints$0$bailout(5, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA);
      invMassB = bodyB.get$invMass();
      if (typeof invMassB !== "number")
        return this.solveVelocityConstraints$0$bailout(6, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB);
      invIB = bodyB.get$invInertia();
      if (typeof invIB !== "number")
        return this.solveVelocityConstraints$0$bailout(7, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB);
      t17 = c.get$normal().get$y();
      if (typeof t17 !== "number")
        throw $.iae(t17);
      t2.x = 1 * t17;
      t18 = c.get$normal().get$x();
      if (typeof t18 !== "number")
        throw $.iae(t18);
      t2.y = -1 * t18;
      friction = c.get$friction();
      if (typeof friction !== "number")
        return this.solveVelocityConstraints$0$bailout(8, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction);
      j = 0;
      while (true) {
        t11 = c.get$pointCount();
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(9, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, t11, $.CONSTANT4);
        if (!(j < t11))
          break;
        t11 = c.get$points();
        if (typeof t11 !== "string" && (typeof t11 !== "object" || t11 === null || t11.constructor !== Array && !t11.$isJavaScriptIndexingBehavior()))
          return this.solveVelocityConstraints$0$bailout(10, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, t11, $.CONSTANT4);
        if (j >= t11.length)
          throw $.ioore(j);
        ccp = t11[j];
        a = ccp.get$rA();
        t11 = -wB;
        t13 = ccp.get$rB().get$y();
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(11, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, a, t11, t13, ccp);
        t13 = t11 * t13;
        t11 = vB.get$x();
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(12, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, a, t11, t13, ccp);
        t11 = t13 + t11;
        t13 = vA.get$x();
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(13, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, a, t11, t13, ccp);
        t13 = t11 - t13;
        t11 = a.get$y();
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(14, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, a, t11, t13, ccp);
        t1.x = t13 + wA * t11;
        t18 = ccp.get$rB().get$x();
        if (typeof t18 !== "number")
          return this.solveVelocityConstraints$0$bailout(15, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, a, 0, 0, ccp, $.CONSTANT4, t18);
        t18 = wB * t18;
        t20 = vB.get$y();
        if (typeof t20 !== "number")
          return this.solveVelocityConstraints$0$bailout(16, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, a, 0, 0, ccp, $.CONSTANT4, t18, t20);
        t20 = t18 + t20;
        t18 = vA.get$y();
        if (typeof t18 !== "number")
          return this.solveVelocityConstraints$0$bailout(17, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, a, 0, 0, ccp, $.CONSTANT4, t18, t20);
        t18 = t20 - t18;
        t20 = a.get$x();
        if (typeof t20 !== "number")
          return this.solveVelocityConstraints$0$bailout(18, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, t18, t20);
        t1.y = t18 - wA * t20;
        t24 = t1.x;
        t26 = t2.x;
        if (typeof t24 !== "number")
          return this.solveVelocityConstraints$0$bailout(19, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, t24);
        if (typeof t26 !== "number")
          return this.solveVelocityConstraints$0$bailout(20, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, t24, t26);
        t26 = t24 * t26;
        t24 = t1.y;
        t29 = t2.y;
        if (typeof t24 !== "number")
          return this.solveVelocityConstraints$0$bailout(21, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, t24, t26);
        if (typeof t29 !== "number")
          return this.solveVelocityConstraints$0$bailout(22, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, t24, t26, t29);
        vt = t26 + t24 * t29;
        t26 = ccp.get$tangentMass();
        if (typeof t26 !== "number")
          return this.solveVelocityConstraints$0$bailout(23, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, t26, 0, vt);
        lambda = t26 * -vt;
        t26 = ccp.get$normalImpulse();
        if (typeof t26 !== "number")
          return this.solveVelocityConstraints$0$bailout(24, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, t26, 0, 0, lambda);
        maxFriction = friction * t26;
        t26 = ccp.get$tangentImpulse();
        if (typeof t26 !== "number")
          return this.solveVelocityConstraints$0$bailout(25, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, t26, 0, 0, lambda, maxFriction);
        newImpulse = $.max(-maxFriction, $.min(t26 + lambda, maxFriction));
        t34 = ccp.get$tangentImpulse();
        if (typeof t34 !== "number")
          throw $.iae(t34);
        lambda0 = newImpulse - t34;
        t34 = t2.x;
        if (typeof t34 !== "number")
          return this.solveVelocityConstraints$0$bailout(26, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, 0, 0, 0, lambda0, 0, newImpulse, t34);
        Px = t34 * lambda0;
        t34 = t2.y;
        if (typeof t34 !== "number")
          return this.solveVelocityConstraints$0$bailout(27, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, 0, 0, 0, lambda0, 0, newImpulse, t34, Px);
        Py = t34 * lambda0;
        t34 = vA.get$x();
        if (typeof t34 !== "number")
          return this.solveVelocityConstraints$0$bailout(28, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, t34, Px, Py);
        vA.set$x(t34 - Px * invMassA);
        t38 = vA.get$y();
        if (typeof t38 !== "number")
          return this.solveVelocityConstraints$0$bailout(29, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, $.CONSTANT4, t38);
        vA.set$y(t38 - Py * invMassA);
        t40 = ccp.get$rA();
        t41 = t40.get$x();
        if (typeof t41 !== "number")
          return this.solveVelocityConstraints$0$bailout(30, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, $.CONSTANT4, 0, $.CONSTANT4, t41);
        t41 *= Py;
        t40 = t40.get$y();
        if (typeof t40 !== "number")
          return this.solveVelocityConstraints$0$bailout(31, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, $.CONSTANT4, 0, $.CONSTANT4, t41, t40);
        wA -= invIA * (t41 - t40 * Px);
        t44 = vB.get$x();
        if (typeof t44 !== "number")
          return this.solveVelocityConstraints$0$bailout(32, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, t44, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, $.CONSTANT4, 0, $.CONSTANT4);
        vB.set$x(t44 + Px * invMassB);
        t46 = vB.get$y();
        if (typeof t46 !== "number")
          return this.solveVelocityConstraints$0$bailout(33, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, 0, 0, $.CONSTANT4, 0, 0, t46);
        vB.set$y(t46 + Py * invMassB);
        t48 = ccp.get$rB();
        t49 = t48.get$x();
        if (typeof t49 !== "number")
          return this.solveVelocityConstraints$0$bailout(34, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, 0, 0, 0, 0, 0, 0, t49);
        t49 *= Py;
        t48 = t48.get$y();
        if (typeof t48 !== "number")
          return this.solveVelocityConstraints$0$bailout(35, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, 0, 0, 0, 0, 0, 0, 0, t49, t48);
        wB += invIB * (t49 - t48 * Px);
        ccp.set$tangentImpulse(newImpulse);
        ++j;
      }
      t11 = t11 === 1;
      t12 = c.get$points();
      if (typeof t12 !== "string" && (typeof t12 !== "object" || t12 === null || t12.constructor !== Array && !t12.$isJavaScriptIndexingBehavior()))
        return this.solveVelocityConstraints$0$bailout(37, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, t12);
      t14 = -wB;
      t15 = t12.length;
      if (t11) {
        if (0 >= t15)
          throw $.ioore(0);
        ccp = t12[0];
        a1 = ccp.get$rA();
        t11 = ccp.get$rB().get$y();
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(38, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t14, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, t11, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a1);
        t11 = t14 * t11;
        t14 = vB.get$x();
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(39, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t14, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, t11, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a1);
        t14 = t11 + t14;
        t11 = vA.get$x();
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(40, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t14, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, t11, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a1);
        t11 = t14 - t11;
        t14 = a1.get$y();
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(41, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t14, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, t11, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a1);
        t1.x = t11 + wA * t14;
        t18 = ccp.get$rB().get$x();
        if (typeof t18 !== "number")
          return this.solveVelocityConstraints$0$bailout(42, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a1, t18);
        t18 = wB * t18;
        t20 = vB.get$y();
        if (typeof t20 !== "number")
          return this.solveVelocityConstraints$0$bailout(43, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a1, t18);
        t20 = t18 + t20;
        t18 = vA.get$y();
        if (typeof t18 !== "number")
          return this.solveVelocityConstraints$0$bailout(44, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a1, t18);
        t18 = t20 - t18;
        t20 = a1.get$x();
        if (typeof t20 !== "number")
          return this.solveVelocityConstraints$0$bailout(45, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18);
        t1.y = t18 - wA * t20;
        b = c.get$normal();
        t24 = t1.x;
        t26 = b.get$x();
        if (typeof t24 !== "number")
          return this.solveVelocityConstraints$0$bailout(46, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, t24);
        if (typeof t26 !== "number")
          return this.solveVelocityConstraints$0$bailout(47, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, t26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, t24);
        t24 *= t26;
        t28 = t1.y;
        t30 = b.get$y();
        if (typeof t28 !== "number")
          return this.solveVelocityConstraints$0$bailout(48, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, t24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, t28);
        if (typeof t30 !== "number")
          return this.solveVelocityConstraints$0$bailout(49, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, t24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, t30);
        vn = t24 + t28 * t30;
        t24 = ccp.get$normalMass();
        if (typeof t24 !== "number")
          return this.solveVelocityConstraints$0$bailout(50, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, t24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, vn);
        t24 = -t24;
        t33 = ccp.get$velocityBias();
        if (typeof t33 !== "number")
          return this.solveVelocityConstraints$0$bailout(51, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, t24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, vn, t33);
        lambda = t24 * (vn - t33);
        t24 = ccp.get$normalImpulse();
        if (typeof t24 !== "number")
          return this.solveVelocityConstraints$0$bailout(52, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, t24, 0, 0, 0, lambda);
        a = t24 + lambda;
        newImpulse = a > 0 ? a : 0;
        lambda = newImpulse - t24;
        Px = t26 * lambda;
        Py = t30 * lambda;
        t11 = vA.get$x();
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(56, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py);
        vA.set$x(t11 - Px * invMassA);
        t13 = vA.get$y();
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(57, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, 0, 0, 0, 0, 0, $.CONSTANT4);
        vA.set$y(t13 - Py * invMassA);
        t15 = ccp.get$rA();
        t16 = t15.get$x();
        if (typeof t16 !== "number")
          return this.solveVelocityConstraints$0$bailout(58, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, t16);
        t16 *= Py;
        t15 = t15.get$y();
        if (typeof t15 !== "number")
          return this.solveVelocityConstraints$0$bailout(59, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, t16, t15);
        wA -= invIA * (t16 - t15 * Px);
        t19 = vB.get$x();
        if (typeof t19 !== "number")
          return this.solveVelocityConstraints$0$bailout(60, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, invMassB, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t19, $.CONSTANT4, ccp, 0, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4);
        vB.set$x(t19 + Px * invMassB);
        t21 = vB.get$y();
        if (typeof t21 !== "number")
          return this.solveVelocityConstraints$0$bailout(61, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, invMassB, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, ccp, 0, $.CONSTANT4, 0, t21, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py);
        vB.set$y(t21 + Py * invMassB);
        t23 = ccp.get$rB();
        t24 = t23.get$x();
        if (typeof t24 !== "number")
          return this.solveVelocityConstraints$0$bailout(62, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, ccp, 0, 0, 0, 0, t24, 0, 0, 0, 0, newImpulse, 0, Px, Py);
        t24 *= Py;
        t23 = t23.get$y();
        if (typeof t23 !== "number")
          return this.solveVelocityConstraints$0$bailout(63, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, ccp, 0, 0, 0, 0, t24, 0, 0, 0, 0, newImpulse, 0, Px, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23);
        wB += invIB * (t24 - t23 * Px);
        ccp.set$normalImpulse(newImpulse);
      } else {
        if (0 >= t15)
          throw $.ioore(0);
        cp1 = t12[0];
        if (1 >= t12.length)
          throw $.ioore(1);
        cp2 = t12[1];
        a = $.Vector$(cp1.get$normalImpulse(), cp2.get$normalImpulse());
        t11 = cp1.get$rB().get$y();
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(65, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t14, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
        t11 = t14 * t11;
        t13 = vB.get$x();
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(66, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t13, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
        t13 = t11 + t13;
        t11 = vA.get$x();
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(67, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t13, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
        t11 = t13 - t11;
        t13 = cp1.get$rA().get$y();
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(68, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t13, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
        t9.x = t11 + wA * t13;
        t19 = cp1.get$rB().get$x();
        if (typeof t19 !== "number")
          return this.solveVelocityConstraints$0$bailout(69, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
        t19 = wB * t19;
        t21 = vB.get$y();
        if (typeof t21 !== "number")
          return this.solveVelocityConstraints$0$bailout(70, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, 0, 0, cp1, cp2);
        t21 = t19 + t21;
        t19 = vA.get$y();
        if (typeof t19 !== "number")
          return this.solveVelocityConstraints$0$bailout(71, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, 0, 0, cp1, cp2);
        t19 = t21 - t19;
        t21 = cp1.get$rA().get$x();
        if (typeof t21 !== "number")
          return this.solveVelocityConstraints$0$bailout(72, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, 0, 0, cp1, cp2);
        t9.y = t19 - wA * t21;
        t25 = cp2.get$rB().get$y();
        if (typeof t25 !== "number")
          return this.solveVelocityConstraints$0$bailout(73, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, t14);
        t25 = t14 * t25;
        t14 = vB.get$x();
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(74, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, t14);
        t14 = t25 + t14;
        t25 = vA.get$x();
        if (typeof t25 !== "number")
          return this.solveVelocityConstraints$0$bailout(75, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, t14);
        t25 = t14 - t25;
        t14 = cp2.get$rA().get$y();
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(76, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, t14);
        t10.x = t25 + wA * t14;
        t30 = cp2.get$rB().get$x();
        if (typeof t30 !== "number")
          return this.solveVelocityConstraints$0$bailout(77, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
        t30 = wB * t30;
        t32 = vB.get$y();
        if (typeof t32 !== "number")
          return this.solveVelocityConstraints$0$bailout(78, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, t32);
        t32 = t30 + t32;
        t30 = vA.get$y();
        if (typeof t30 !== "number")
          return this.solveVelocityConstraints$0$bailout(79, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, t32);
        t30 = t32 - t30;
        t32 = cp2.get$rA().get$x();
        if (typeof t32 !== "number")
          return this.solveVelocityConstraints$0$bailout(80, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, t32);
        t10.y = t30 - wA * t32;
        t36 = t9.x;
        t38 = c.get$normal();
        t39 = t38.get$x();
        if (typeof t36 !== "number")
          return this.solveVelocityConstraints$0$bailout(81, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, t36);
        if (typeof t39 !== "number")
          return this.solveVelocityConstraints$0$bailout(82, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, t36, t39);
        t36 *= t39;
        t41 = t9.y;
        t38 = t38.get$y();
        if (typeof t41 !== "number")
          return this.solveVelocityConstraints$0$bailout(83, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, t41, t36);
        if (typeof t38 !== "number")
          return this.solveVelocityConstraints$0$bailout(84, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, t41, t36, t38);
        vn1 = t36 + t41 * t38;
        t36 = t10.x;
        if (typeof t36 !== "number")
          return this.solveVelocityConstraints$0$bailout(85, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, t36, 0, vn1);
        t39 = t36 * t39;
        t36 = t10.y;
        if (typeof t36 !== "number")
          return this.solveVelocityConstraints$0$bailout(87, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, t36, 0, vn1, t39);
        vn2 = t39 + t36 * t38;
        t39 = cp1.get$velocityBias();
        if (typeof t39 !== "number")
          return this.solveVelocityConstraints$0$bailout(89, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, vn1, t39, 0, vn2);
        t39 = vn1 - t39;
        t47 = cp2.get$velocityBias();
        if (typeof t47 !== "number")
          return this.solveVelocityConstraints$0$bailout(90, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, t39, 0, vn2);
        b = $.Vector$(t39, vn2 - t47);
        t39 = c.get$K();
        t49 = t39.get$col1().get$x();
        t51 = a.x;
        if (typeof t49 !== "number")
          return this.solveVelocityConstraints$0$bailout(91, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, t49);
        if (typeof t51 !== "number")
          return this.solveVelocityConstraints$0$bailout(92, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, t49, 0, 0, t51);
        t51 = t49 * t51;
        t49 = t39.get$col2().get$x();
        t54 = a.y;
        if (typeof t49 !== "number")
          return this.solveVelocityConstraints$0$bailout(93, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, t49, 0, 0, t51);
        if (typeof t54 !== "number")
          return this.solveVelocityConstraints$0$bailout(94, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, t49, 0, 0, t51, t54);
        t8.x = t51 + t49 * t54;
        t56 = c.get$K();
        t57 = t56.get$col1().get$y();
        t59 = a.x;
        if (typeof t57 !== "number")
          return this.solveVelocityConstraints$0$bailout(95, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57);
        if (typeof t59 !== "number")
          return this.solveVelocityConstraints$0$bailout(96, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, t59);
        t59 = t57 * t59;
        t57 = t56.get$col2().get$y();
        t62 = a.y;
        if (typeof t57 !== "number")
          return this.solveVelocityConstraints$0$bailout(97, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, t59);
        if (typeof t62 !== "number")
          return this.solveVelocityConstraints$0$bailout(98, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, t59, t62);
        t8.y = t59 + t57 * t62;
        t64 = b.x;
        t66 = t8.x;
        if (typeof t64 !== "number")
          return this.solveVelocityConstraints$0$bailout(99, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64);
        if (typeof t66 !== "number")
          return this.solveVelocityConstraints$0$bailout(100, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, t66);
        b.x = t64 - t66;
        t68 = b.y;
        t70 = t8.y;
        if (typeof t68 !== "number")
          return this.solveVelocityConstraints$0$bailout(101, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68);
        if (typeof t70 !== "number")
          return this.solveVelocityConstraints$0$bailout(102, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, t70);
        b.y = t68 - t70;
        $loop$1: {
          $.Matrix22_mulMatrixAndVectorToOut(c.get$normalMass(), b, t4);
          t4.mulLocal$1(-1);
          t11 = t4.get$x();
          if (typeof t11 !== "number")
            return this.solveVelocityConstraints$0$bailout(103, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
          if (t11 >= 0) {
            t11 = t4.get$y();
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(104, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t11 = t11 >= 0;
          } else
            t11 = false;
          if (t11) {
            t3.setFrom$1(t4).subLocal$1(a);
            t5.setFrom$1(c.get$normal()).mulLocal$1(t3.x);
            t6.setFrom$1(c.get$normal()).mulLocal$1(t3.y);
            t7.setFrom$1(t5).addLocal$1(t6);
            t8.setFrom$1(t7).mulLocal$1(invMassA);
            vA.subLocal$1(t8);
            t8.setFrom$1(t7).mulLocal$1(invMassB);
            vB.addLocal$1(t8);
            t11 = cp1.get$rA();
            t12 = t11.get$x();
            t14 = t5.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(105, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, t12, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t14 !== "number")
              return this.solveVelocityConstraints$0$bailout(106, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, t12, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t12 *= t14;
            t11 = t11.get$y();
            t17 = t5.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(107, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(108, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, t17, 0, 0, 0, cp1, cp2);
            t12 -= t11 * t17;
            t19 = cp2.get$rA();
            t20 = t19.get$x();
            t22 = t6.y;
            if (typeof t20 !== "number")
              return this.solveVelocityConstraints$0$bailout(109, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t22 !== "number")
              return this.solveVelocityConstraints$0$bailout(110, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, t20, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t20 *= t22;
            t19 = t19.get$y();
            t25 = t6.x;
            if (typeof t19 !== "number")
              return this.solveVelocityConstraints$0$bailout(111, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t25 !== "number")
              return this.solveVelocityConstraints$0$bailout(112, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            wA -= invIA * (t12 + (t20 - t19 * t25));
            t27 = cp1.get$rB();
            t28 = t27.get$x();
            if (typeof t28 !== "number")
              return this.solveVelocityConstraints$0$bailout(113, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t27, $.CONSTANT4, 0, 0, 0, 0, t28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t14 = t28 * t14;
            t27 = t27.get$y();
            if (typeof t27 !== "number")
              return this.solveVelocityConstraints$0$bailout(115, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t27, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t14 -= t27 * t17;
            t30 = cp2.get$rB();
            t31 = t30.get$x();
            if (typeof t31 !== "number")
              return this.solveVelocityConstraints$0$bailout(117, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, cp1, cp2, 0, t31);
            t22 = t31 * t22;
            t30 = t30.get$y();
            if (typeof t30 !== "number")
              return this.solveVelocityConstraints$0$bailout(119, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22);
            wB += invIB * (t14 + (t22 - t30 * t25));
            cp1.set$normalImpulse(t4.get$x());
            cp2.set$normalImpulse(t4.get$y());
            break $loop$1;
          }
          t11 = cp1.get$normalMass();
          if (typeof t11 !== "number")
            return this.solveVelocityConstraints$0$bailout(121, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
          t11 = -t11;
          t13 = b.x;
          if (typeof t13 !== "number")
            return this.solveVelocityConstraints$0$bailout(122, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
          t4.set$x(t11 * t13);
          t4.set$y(0);
          t15 = c.get$K().get$col1().get$y();
          t17 = t4.get$x();
          if (typeof t15 !== "number")
            return this.solveVelocityConstraints$0$bailout(123, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15);
          if (typeof t17 !== "number")
            return this.solveVelocityConstraints$0$bailout(124, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15);
          t15 *= t17;
          t19 = b.y;
          if (typeof t19 !== "number")
            return this.solveVelocityConstraints$0$bailout(125, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19);
          if (t17 >= 0 && t15 + t19 >= 0) {
            t3.setFrom$1(t4).subLocal$1(a);
            t5.setFrom$1(c.get$normal()).mulLocal$1(t3.x);
            t6.setFrom$1(c.get$normal()).mulLocal$1(t3.y);
            t7.setFrom$1(t5).addLocal$1(t6);
            t8.setFrom$1(t7).mulLocal$1(invMassA);
            vA.subLocal$1(t8);
            t8.setFrom$1(t7).mulLocal$1(invMassB);
            vB.addLocal$1(t8);
            t11 = cp1.get$rA();
            t12 = t11.get$x();
            t14 = t5.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(127, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, t12, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t14 !== "number")
              return this.solveVelocityConstraints$0$bailout(128, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, t12, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t12 *= t14;
            t11 = t11.get$y();
            t17 = t5.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(129, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(130, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, t17, 0, 0, 0, cp1, cp2);
            t12 -= t11 * t17;
            t19 = cp2.get$rA();
            t20 = t19.get$x();
            t22 = t6.y;
            if (typeof t20 !== "number")
              return this.solveVelocityConstraints$0$bailout(131, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t22 !== "number")
              return this.solveVelocityConstraints$0$bailout(132, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, t20, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t20 *= t22;
            t19 = t19.get$y();
            t25 = t6.x;
            if (typeof t19 !== "number")
              return this.solveVelocityConstraints$0$bailout(133, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t25 !== "number")
              return this.solveVelocityConstraints$0$bailout(134, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            wA -= invIA * (t12 + (t20 - t19 * t25));
            t27 = cp1.get$rB();
            t28 = t27.get$x();
            if (typeof t28 !== "number")
              return this.solveVelocityConstraints$0$bailout(135, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t27, $.CONSTANT4, 0, 0, 0, 0, t28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t14 = t28 * t14;
            t27 = t27.get$y();
            if (typeof t27 !== "number")
              return this.solveVelocityConstraints$0$bailout(137, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t27, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t14 -= t27 * t17;
            t30 = cp2.get$rB();
            t31 = t30.get$x();
            if (typeof t31 !== "number")
              return this.solveVelocityConstraints$0$bailout(139, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, cp1, cp2, 0, t31);
            t22 = t31 * t22;
            t30 = t30.get$y();
            if (typeof t30 !== "number")
              return this.solveVelocityConstraints$0$bailout(141, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22);
            wB += invIB * (t14 + (t22 - t30 * t25));
            cp1.set$normalImpulse(t4.get$x());
            cp2.set$normalImpulse(t4.get$y());
            break $loop$1;
          }
          t4.set$x(0);
          t11 = cp2.get$normalMass();
          if (typeof t11 !== "number")
            return this.solveVelocityConstraints$0$bailout(143, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
          t11 = -t11;
          t13 = b.y;
          if (typeof t13 !== "number")
            return this.solveVelocityConstraints$0$bailout(144, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
          t4.set$y(t11 * t13);
          t15 = c.get$K().get$col2().get$x();
          t17 = t4.get$y();
          if (typeof t15 !== "number")
            return this.solveVelocityConstraints$0$bailout(145, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15);
          if (typeof t17 !== "number")
            return this.solveVelocityConstraints$0$bailout(146, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15);
          t15 *= t17;
          t19 = b.x;
          if (typeof t19 !== "number")
            return this.solveVelocityConstraints$0$bailout(147, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19);
          if (t17 >= 0 && t15 + t19 >= 0) {
            t3.setFrom$1(t4).subLocal$1(a);
            t5.setFrom$1(c.get$normal()).mulLocal$1(t3.x);
            t6.setFrom$1(c.get$normal()).mulLocal$1(t3.y);
            t7.setFrom$1(t5).addLocal$1(t6);
            t8.setFrom$1(t7).mulLocal$1(invMassA);
            vA.subLocal$1(t8);
            t8.setFrom$1(t7).mulLocal$1(invMassB);
            vB.addLocal$1(t8);
            t11 = cp1.get$rA();
            t12 = t11.get$x();
            t14 = t5.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(149, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, t12, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t14 !== "number")
              return this.solveVelocityConstraints$0$bailout(150, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, t12, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t12 *= t14;
            t11 = t11.get$y();
            t17 = t5.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(151, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(152, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, t17, 0, 0, 0, cp1, cp2);
            t12 -= t11 * t17;
            t19 = cp2.get$rA();
            t20 = t19.get$x();
            t22 = t6.y;
            if (typeof t20 !== "number")
              return this.solveVelocityConstraints$0$bailout(153, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t22 !== "number")
              return this.solveVelocityConstraints$0$bailout(154, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, t20, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t20 *= t22;
            t19 = t19.get$y();
            t25 = t6.x;
            if (typeof t19 !== "number")
              return this.solveVelocityConstraints$0$bailout(155, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t25 !== "number")
              return this.solveVelocityConstraints$0$bailout(156, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            wA -= invIA * (t12 + (t20 - t19 * t25));
            t27 = cp1.get$rB();
            t28 = t27.get$x();
            if (typeof t28 !== "number")
              return this.solveVelocityConstraints$0$bailout(157, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t27, $.CONSTANT4, 0, 0, 0, 0, t28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t14 = t28 * t14;
            t27 = t27.get$y();
            if (typeof t27 !== "number")
              return this.solveVelocityConstraints$0$bailout(159, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t27, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t14 -= t27 * t17;
            t30 = cp2.get$rB();
            t31 = t30.get$x();
            if (typeof t31 !== "number")
              return this.solveVelocityConstraints$0$bailout(161, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, cp1, cp2, 0, t31);
            t22 = t31 * t22;
            t30 = t30.get$y();
            if (typeof t30 !== "number")
              return this.solveVelocityConstraints$0$bailout(163, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22);
            wB += invIB * (t14 + (t22 - t30 * t25));
            cp1.set$normalImpulse(t4.get$x());
            cp2.set$normalImpulse(t4.get$y());
            break $loop$1;
          }
          t4.set$x(0);
          t4.set$y(0);
          vn1 = b.x;
          vn2 = b.y;
          if (typeof vn1 !== "number")
            return this.solveVelocityConstraints$0$bailout(165, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, vn1);
          if (vn1 >= 0) {
            if (typeof vn2 !== "number")
              return this.solveVelocityConstraints$0$bailout(166, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, vn1, 0, 0, vn2);
            t11 = vn2 >= 0;
          } else
            t11 = false;
          if (t11) {
            t3.setFrom$1(t4).subLocal$1(a);
            t5.setFrom$1(c.get$normal()).mulLocal$1(t3.x);
            t6.setFrom$1(c.get$normal()).mulLocal$1(t3.y);
            t7.setFrom$1(t5).addLocal$1(t6);
            t8.setFrom$1(t7).mulLocal$1(invMassA);
            vA.subLocal$1(t8);
            t8.setFrom$1(t7).mulLocal$1(invMassB);
            vB.addLocal$1(t8);
            t11 = cp1.get$rA();
            t12 = t11.get$x();
            t14 = t5.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(167, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, t12, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t14 !== "number")
              return this.solveVelocityConstraints$0$bailout(168, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, t12, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t12 *= t14;
            t11 = t11.get$y();
            t17 = t5.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(169, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(170, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, t17, 0, 0, 0, cp1, cp2);
            t12 -= t11 * t17;
            t19 = cp2.get$rA();
            t20 = t19.get$x();
            t22 = t6.y;
            if (typeof t20 !== "number")
              return this.solveVelocityConstraints$0$bailout(171, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t22 !== "number")
              return this.solveVelocityConstraints$0$bailout(172, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, t20, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t20 *= t22;
            t19 = t19.get$y();
            t25 = t6.x;
            if (typeof t19 !== "number")
              return this.solveVelocityConstraints$0$bailout(173, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t25 !== "number")
              return this.solveVelocityConstraints$0$bailout(174, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            wA -= invIA * (t12 + (t20 - t19 * t25));
            t27 = cp1.get$rB();
            t28 = t27.get$x();
            if (typeof t28 !== "number")
              return this.solveVelocityConstraints$0$bailout(175, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t27, $.CONSTANT4, 0, 0, 0, 0, t28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t14 = t28 * t14;
            t27 = t27.get$y();
            if (typeof t27 !== "number")
              return this.solveVelocityConstraints$0$bailout(177, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t27, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t14 -= t27 * t17;
            t30 = cp2.get$rB();
            t31 = t30.get$x();
            if (typeof t31 !== "number")
              return this.solveVelocityConstraints$0$bailout(179, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, cp1, cp2, 0, t31);
            t22 = t31 * t22;
            t30 = t30.get$y();
            if (typeof t30 !== "number")
              return this.solveVelocityConstraints$0$bailout(181, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22);
            wB += invIB * (t14 + (t22 - t30 * t25));
            cp1.set$normalImpulse(t4.get$x());
            cp2.set$normalImpulse(t4.get$y());
            break $loop$1;
          }
          break $loop$1;
        }
      }
      bodyA.get$linearVelocity().setFrom$1(vA);
      bodyA.set$angularVelocity(wA);
      bodyB.get$linearVelocity().setFrom$1(vB);
      bodyB.set$angularVelocity(wB);
      ++i;
    }
  },
  solveVelocityConstraints$0$bailout: function(state0, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, t12, j, t14, t13, a, t16, t17, ccp, t22, t23, t25, t29, t31, t34, vt, lambda, maxFriction, newImpulse, t39, Px, Py, t43, t44, t46, t47, t49, t52, t54, t56, t15, t18, a1, t21, b, t27, t32, vn, t35, t20, t24, t26, t33, cp1, cp2, t28, t36, t40, t42, t45, vn1, t48, t51, vn2, t57, t60, t62, t64, t67, t69, t71, t73, t75, t38, t19) {
    switch (state0) {
      case 0:
        t1 = this.dv;
        t2 = this.tangent;
        t3 = this.d;
        t4 = this.x;
        t5 = this.P1;
        t6 = this.P2;
        t7 = this.temp1;
        t8 = this.temp2;
        t9 = this.dv1;
        t10 = this.dv2;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t11 = this.constraintCount;
              case 1:
                state0 = 0;
                if (!$.CONSTANT2.$lt(i, t11))
                  break L0;
                t11 = this.constraints;
                if (i >= t11.length)
                  throw $.ioore(i);
                c = t11[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                wA = bodyA.get$angularVelocity();
              case 2:
                state0 = 0;
                wB = bodyB.get$angularVelocity();
              case 3:
                state0 = 0;
                vA = bodyA.get$linearVelocity();
                vB = bodyB.get$linearVelocity();
                invMassA = bodyA.get$invMass();
              case 4:
                state0 = 0;
                invIA = bodyA.get$invInertia();
              case 5:
                state0 = 0;
                invMassB = bodyB.get$invMass();
              case 6:
                state0 = 0;
                invIB = bodyB.get$invInertia();
              case 7:
                state0 = 0;
                t17 = c.get$normal().get$y();
                if (typeof t17 !== "number")
                  throw $.iae(t17);
                t2.x = 1 * t17;
                t18 = c.get$normal().get$x();
                if (typeof t18 !== "number")
                  throw $.iae(t18);
                t2.y = -1 * t18;
                friction = c.get$friction();
              case 8:
                state0 = 0;
                t11 = $.getInterceptor$JSNumber(friction);
                t12 = $.getInterceptor$JSNumber(invIA);
                t13 = $.getInterceptor$JSNumber(invIB);
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t14 = c.get$pointCount();
                      case 9:
                        state0 = 0;
                        if (!$.CONSTANT2.$lt(j, t14))
                          break L1;
                        t14 = c.get$points();
                      case 10:
                        state0 = 0;
                        ccp = $.$$index(t14, j);
                        a = ccp.get$rA();
                        t14 = $.getInterceptor$JSNumber(wB);
                        t16 = t14.$negate(wB);
                        t17 = ccp.get$rB().get$y();
                      case 11:
                        state0 = 0;
                        t17 = $.$$mul(t16, t17);
                        t16 = vB.get$x();
                      case 12:
                        state0 = 0;
                        t16 = $.$$add(t17, t16);
                        t17 = vA.get$x();
                      case 13:
                        state0 = 0;
                        t17 = $.$$sub(t16, t17);
                        t16 = a.get$y();
                      case 14:
                        state0 = 0;
                        t22 = $.getInterceptor$JSNumber(wA);
                        t1.x = $.$$add(t17, t22.$mul(wA, t16));
                        t23 = ccp.get$rB().get$x();
                      case 15:
                        state0 = 0;
                        t23 = t14.$mul(wB, t23);
                        t25 = vB.get$y();
                      case 16:
                        state0 = 0;
                        t25 = $.$$add(t23, t25);
                        t23 = vA.get$y();
                      case 17:
                        state0 = 0;
                        t23 = $.$$sub(t25, t23);
                        t25 = a.get$x();
                      case 18:
                        state0 = 0;
                        t1.y = $.$$sub(t23, t22.$mul(wA, t25));
                        t29 = t1.x;
                      case 19:
                        state0 = 0;
                        t31 = t2.x;
                      case 20:
                        state0 = 0;
                        t31 = $.$$mul(t29, t31);
                        t29 = t1.y;
                      case 21:
                        state0 = 0;
                        t34 = t2.y;
                      case 22:
                        state0 = 0;
                        vt = $.$$add(t31, $.$$mul(t29, t34));
                        t31 = ccp.get$tangentMass();
                      case 23:
                        state0 = 0;
                        lambda = $.$$mul(t31, $.$$negate(vt));
                        t31 = ccp.get$normalImpulse();
                      case 24:
                        state0 = 0;
                        maxFriction = t11.$mul(friction, t31);
                        t31 = ccp.get$tangentImpulse();
                      case 25:
                        state0 = 0;
                        t31 = $.$$add(t31, lambda);
                        newImpulse = $.max($.$$negate(maxFriction), $.min(t31, maxFriction));
                        t39 = ccp.get$tangentImpulse();
                        if (typeof t39 !== "number")
                          throw $.iae(t39);
                        lambda = newImpulse - t39;
                        t39 = t2.x;
                      case 26:
                        state0 = 0;
                        Px = $.$$mul(t39, lambda);
                        t39 = t2.y;
                      case 27:
                        state0 = 0;
                        Py = $.$$mul(t39, lambda);
                        t39 = vA.get$x();
                      case 28:
                        state0 = 0;
                        t43 = $.getInterceptor$JSNumber(Px);
                        vA.set$x($.$$sub(t39, t43.$mul(Px, invMassA)));
                        t44 = vA.get$y();
                      case 29:
                        state0 = 0;
                        t46 = $.getInterceptor$JSNumber(Py);
                        vA.set$y($.$$sub(t44, t46.$mul(Py, invMassA)));
                        t47 = ccp.get$rA().get$x();
                      case 30:
                        state0 = 0;
                        t47 = $.$$mul(t47, Py);
                        t49 = ccp.get$rA().get$y();
                      case 31:
                        state0 = 0;
                        wA = t22.$sub(wA, t12.$mul(invIA, $.$$sub(t47, $.$$mul(t49, Px))));
                        t22 = vB.get$x();
                      case 32:
                        state0 = 0;
                        vB.set$x($.$$add(t22, t43.$mul(Px, invMassB)));
                        t52 = vB.get$y();
                      case 33:
                        state0 = 0;
                        vB.set$y($.$$add(t52, t46.$mul(Py, invMassB)));
                        t54 = ccp.get$rB().get$x();
                      case 34:
                        state0 = 0;
                        t54 = $.$$mul(t54, Py);
                        t56 = ccp.get$rB().get$y();
                      case 35:
                        state0 = 0;
                        wB = t14.$add(wB, t13.$mul(invIB, $.$$sub(t54, $.$$mul(t56, Px))));
                        ccp.set$tangentImpulse(newImpulse);
                        ++j;
                    }
                t11 = c.get$pointCount();
              case 36:
                state0 = 0;
                t15 = $.$$eq(t11, 1) === true;
                t16 = $.getInterceptor$JSNumber(wA);
                t17 = $.getInterceptor$JSNumber(wB);
                t18 = c.get$points();
              case 37:
                state0 = 0;
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 63:
              case 64:
              case 65:
              case 66:
              case 67:
              case 68:
              case 69:
              case 70:
              case 71:
              case 72:
              case 73:
              case 74:
              case 75:
              case 76:
              case 77:
              case 78:
              case 79:
              case 80:
              case 81:
              case 82:
              case 83:
              case 84:
              case 85:
              case 86:
              case 87:
              case 88:
              case 89:
              case 90:
              case 91:
              case 92:
              case 93:
              case 94:
              case 95:
              case 96:
              case 97:
              case 98:
              case 99:
              case 100:
              case 101:
              case 102:
              case 103:
              case 104:
              case 105:
              case 106:
              case 107:
              case 108:
              case 109:
              case 110:
              case 111:
              case 112:
              case 113:
              case 114:
              case 115:
              case 116:
              case 117:
              case 118:
              case 119:
              case 120:
              case 121:
              case 122:
              case 123:
              case 124:
              case 125:
              case 126:
              case 127:
              case 128:
              case 129:
              case 130:
              case 131:
              case 132:
              case 133:
              case 134:
              case 135:
              case 136:
              case 137:
              case 138:
              case 139:
              case 140:
              case 141:
              case 142:
              case 143:
              case 144:
              case 145:
              case 146:
              case 147:
              case 148:
              case 149:
              case 150:
              case 151:
              case 152:
              case 153:
              case 154:
              case 155:
              case 156:
              case 157:
              case 158:
              case 159:
              case 160:
              case 161:
              case 162:
              case 163:
              case 164:
              case 165:
              case 166:
              case 167:
              case 168:
              case 169:
              case 170:
              case 171:
              case 172:
              case 173:
              case 174:
              case 175:
              case 176:
              case 177:
              case 178:
              case 179:
              case 180:
              case 181:
              case 182:
                if (state0 === 63 || state0 === 62 || state0 === 61 || state0 === 60 || state0 === 59 || state0 === 58 || state0 === 57 || state0 === 56 || state0 === 55 || state0 === 54 || state0 === 53 || state0 === 52 || state0 === 51 || state0 === 50 || state0 === 49 || state0 === 48 || state0 === 47 || state0 === 46 || state0 === 45 || state0 === 44 || state0 === 43 || state0 === 42 || state0 === 41 || state0 === 40 || state0 === 39 || state0 === 38 || state0 === 0 && t15)
                  switch (state0) {
                    case 0:
                      ccp = $.$$index(t18, 0);
                      a1 = ccp.get$rA();
                      t11 = t17.$negate(wB);
                      t14 = ccp.get$rB().get$y();
                    case 38:
                      state0 = 0;
                      t14 = $.$$mul(t11, t14);
                      t11 = vB.get$x();
                    case 39:
                      state0 = 0;
                      t11 = $.$$add(t14, t11);
                      t14 = vA.get$x();
                    case 40:
                      state0 = 0;
                      t14 = $.$$sub(t11, t14);
                      t11 = a1.get$y();
                    case 41:
                      state0 = 0;
                      t1.x = $.$$add(t14, t16.$mul(wA, t11));
                      t21 = ccp.get$rB().get$x();
                    case 42:
                      state0 = 0;
                      t21 = t17.$mul(wB, t21);
                      t23 = vB.get$y();
                    case 43:
                      state0 = 0;
                      t23 = $.$$add(t21, t23);
                      t21 = vA.get$y();
                    case 44:
                      state0 = 0;
                      t21 = $.$$sub(t23, t21);
                      t23 = a1.get$x();
                    case 45:
                      state0 = 0;
                      t1.y = $.$$sub(t21, t16.$mul(wA, t23));
                      b = c.get$normal();
                      t27 = t1.x;
                    case 46:
                      state0 = 0;
                      t29 = b.get$x();
                    case 47:
                      state0 = 0;
                      t29 = $.$$mul(t27, t29);
                      t27 = t1.y;
                    case 48:
                      state0 = 0;
                      t32 = b.get$y();
                    case 49:
                      state0 = 0;
                      vn = $.$$add(t29, $.$$mul(t27, t32));
                      t29 = ccp.get$normalMass();
                    case 50:
                      state0 = 0;
                      t29 = $.$$negate(t29);
                      t35 = ccp.get$velocityBias();
                    case 51:
                      state0 = 0;
                      lambda = $.$$mul(t29, $.$$sub(vn, t35));
                      t29 = ccp.get$normalImpulse();
                    case 52:
                      state0 = 0;
                      a = $.$$add(t29, lambda);
                      newImpulse = $.$$gt(a, 0) === true ? a : 0;
                      t11 = ccp.get$normalImpulse();
                    case 53:
                      state0 = 0;
                      lambda = $.$$sub(newImpulse, t11);
                      t11 = c.get$normal().get$x();
                    case 54:
                      state0 = 0;
                      Px = $.$$mul(t11, lambda);
                      t11 = c.get$normal().get$y();
                    case 55:
                      state0 = 0;
                      Py = $.$$mul(t11, lambda);
                      t11 = vA.get$x();
                    case 56:
                      state0 = 0;
                      t20 = $.getInterceptor$JSNumber(Px);
                      vA.set$x($.$$sub(t11, t20.$mul(Px, invMassA)));
                      t21 = vA.get$y();
                    case 57:
                      state0 = 0;
                      t23 = $.getInterceptor$JSNumber(Py);
                      vA.set$y($.$$sub(t21, t23.$mul(Py, invMassA)));
                      t24 = ccp.get$rA().get$x();
                    case 58:
                      state0 = 0;
                      t24 = $.$$mul(t24, Py);
                      t26 = ccp.get$rA().get$y();
                    case 59:
                      state0 = 0;
                      wA = t16.$sub(wA, t12.$mul(invIA, $.$$sub(t24, $.$$mul(t26, Px))));
                      t16 = vB.get$x();
                    case 60:
                      state0 = 0;
                      vB.set$x($.$$add(t16, t20.$mul(Px, invMassB)));
                      t29 = vB.get$y();
                    case 61:
                      state0 = 0;
                      vB.set$y($.$$add(t29, t23.$mul(Py, invMassB)));
                      t31 = ccp.get$rB().get$x();
                    case 62:
                      state0 = 0;
                      t31 = $.$$mul(t31, Py);
                      t33 = ccp.get$rB().get$y();
                    case 63:
                      state0 = 0;
                      wB = t17.$add(wB, t13.$mul(invIB, $.$$sub(t31, $.$$mul(t33, Px))));
                      ccp.set$normalImpulse(newImpulse);
                  }
                else
                  switch (state0) {
                    case 0:
                      cp1 = $.$$index(t18, 0);
                      t11 = c.get$points();
                    case 64:
                      state0 = 0;
                      cp2 = $.$$index(t11, 1);
                      a = $.Vector$(cp1.get$normalImpulse(), cp2.get$normalImpulse());
                      t11 = t17.$negate(wB);
                      t15 = cp1.get$rB().get$y();
                    case 65:
                      state0 = 0;
                      t15 = $.$$mul(t11, t15);
                      t11 = vB.get$x();
                    case 66:
                      state0 = 0;
                      t11 = $.$$add(t15, t11);
                      t15 = vA.get$x();
                    case 67:
                      state0 = 0;
                      t15 = $.$$sub(t11, t15);
                      t11 = cp1.get$rA().get$y();
                    case 68:
                      state0 = 0;
                      t9.x = $.$$add(t15, t16.$mul(wA, t11));
                      t22 = cp1.get$rB().get$x();
                    case 69:
                      state0 = 0;
                      t22 = t17.$mul(wB, t22);
                      t24 = vB.get$y();
                    case 70:
                      state0 = 0;
                      t24 = $.$$add(t22, t24);
                      t22 = vA.get$y();
                    case 71:
                      state0 = 0;
                      t22 = $.$$sub(t24, t22);
                      t24 = cp1.get$rA().get$x();
                    case 72:
                      state0 = 0;
                      t9.y = $.$$sub(t22, t16.$mul(wA, t24));
                      t28 = t17.$negate(wB);
                      t29 = cp2.get$rB().get$y();
                    case 73:
                      state0 = 0;
                      t29 = $.$$mul(t28, t29);
                      t28 = vB.get$x();
                    case 74:
                      state0 = 0;
                      t28 = $.$$add(t29, t28);
                      t29 = vA.get$x();
                    case 75:
                      state0 = 0;
                      t29 = $.$$sub(t28, t29);
                      t28 = cp2.get$rA().get$y();
                    case 76:
                      state0 = 0;
                      t10.x = $.$$add(t29, t16.$mul(wA, t28));
                      t34 = cp2.get$rB().get$x();
                    case 77:
                      state0 = 0;
                      t34 = t17.$mul(wB, t34);
                      t36 = vB.get$y();
                    case 78:
                      state0 = 0;
                      t36 = $.$$add(t34, t36);
                      t34 = vA.get$y();
                    case 79:
                      state0 = 0;
                      t34 = $.$$sub(t36, t34);
                      t36 = cp2.get$rA().get$x();
                    case 80:
                      state0 = 0;
                      t10.y = $.$$sub(t34, t16.$mul(wA, t36));
                      t40 = t9.x;
                    case 81:
                      state0 = 0;
                      t42 = c.get$normal().get$x();
                    case 82:
                      state0 = 0;
                      t42 = $.$$mul(t40, t42);
                      t40 = t9.y;
                    case 83:
                      state0 = 0;
                      t45 = c.get$normal().get$y();
                    case 84:
                      state0 = 0;
                      vn1 = $.$$add(t42, $.$$mul(t40, t45));
                      t42 = t10.x;
                    case 85:
                      state0 = 0;
                      t48 = c.get$normal().get$x();
                    case 86:
                      state0 = 0;
                      t48 = $.$$mul(t42, t48);
                      t42 = t10.y;
                    case 87:
                      state0 = 0;
                      t51 = c.get$normal().get$y();
                    case 88:
                      state0 = 0;
                      vn2 = $.$$add(t48, $.$$mul(t42, t51));
                      t48 = cp1.get$velocityBias();
                    case 89:
                      state0 = 0;
                      t48 = $.$$sub(vn1, t48);
                      t54 = cp2.get$velocityBias();
                    case 90:
                      state0 = 0;
                      b = $.Vector$(t48, $.$$sub(vn2, t54));
                      t48 = c.get$K().get$col1().get$x();
                    case 91:
                      state0 = 0;
                      t57 = a.x;
                    case 92:
                      state0 = 0;
                      t57 = $.$$mul(t48, t57);
                      t48 = c.get$K().get$col2().get$x();
                    case 93:
                      state0 = 0;
                      t60 = a.y;
                    case 94:
                      state0 = 0;
                      t8.x = $.$$add(t57, $.$$mul(t48, t60));
                      t62 = c.get$K().get$col1().get$y();
                    case 95:
                      state0 = 0;
                      t64 = a.x;
                    case 96:
                      state0 = 0;
                      t64 = $.$$mul(t62, t64);
                      t62 = c.get$K().get$col2().get$y();
                    case 97:
                      state0 = 0;
                      t67 = a.y;
                    case 98:
                      state0 = 0;
                      t8.y = $.$$add(t64, $.$$mul(t62, t67));
                      t69 = b.x;
                    case 99:
                      state0 = 0;
                      t71 = t8.x;
                    case 100:
                      state0 = 0;
                      b.x = $.$$sub(t69, t71);
                      t73 = b.y;
                    case 101:
                      state0 = 0;
                      t75 = t8.y;
                    case 102:
                      state0 = 0;
                      b.y = $.$$sub(t73, t75);
                    default:
                      $loop$1: {
                        switch (state0) {
                          case 0:
                            $.Matrix22_mulMatrixAndVectorToOut(c.get$normalMass(), b, t4);
                            t4.mulLocal$1(-1);
                            t11 = t4.get$x();
                          case 103:
                            state0 = 0;
                          case 104:
                            if (state0 === 104 || state0 === 0 && $.$$ge(t11, 0) === true)
                              switch (state0) {
                                case 0:
                                  t11 = t4.get$y();
                                case 104:
                                  state0 = 0;
                                  t15 = $.$$ge(t11, 0) === true;
                                  t11 = t15;
                              }
                            else
                              t11 = false;
                          default:
                            if (state0 === 120 || state0 === 119 || state0 === 118 || state0 === 117 || state0 === 116 || state0 === 115 || state0 === 114 || state0 === 113 || state0 === 112 || state0 === 111 || state0 === 110 || state0 === 109 || state0 === 108 || state0 === 107 || state0 === 106 || state0 === 105 || state0 === 0 && t11)
                              switch (state0) {
                                case 0:
                                  t3.setFrom$1(t4).subLocal$1(a);
                                  t5.setFrom$1(c.get$normal()).mulLocal$1(t3.x);
                                  t6.setFrom$1(c.get$normal()).mulLocal$1(t3.y);
                                  t7.setFrom$1(t5).addLocal$1(t6);
                                  t8.setFrom$1(t7).mulLocal$1(invMassA);
                                  vA.subLocal$1(t8);
                                  t8.setFrom$1(t7).mulLocal$1(invMassB);
                                  vB.addLocal$1(t8);
                                  t11 = cp1.get$rA();
                                  t14 = t11.get$x();
                                case 105:
                                  state0 = 0;
                                  t18 = t5.y;
                                case 106:
                                  state0 = 0;
                                  t18 = $.$$mul(t14, t18);
                                  t11 = t11.get$y();
                                case 107:
                                  state0 = 0;
                                  t20 = t5.x;
                                case 108:
                                  state0 = 0;
                                  t18 = $.$$sub(t18, $.$$mul(t11, t20));
                                  t22 = cp2.get$rA();
                                  t23 = t22.get$x();
                                case 109:
                                  state0 = 0;
                                  t25 = t6.y;
                                case 110:
                                  state0 = 0;
                                  t25 = $.$$mul(t23, t25);
                                  t22 = t22.get$y();
                                case 111:
                                  state0 = 0;
                                  t27 = t6.x;
                                case 112:
                                  state0 = 0;
                                  wA = t16.$sub(wA, t12.$mul(invIA, $.$$add(t18, $.$$sub(t25, $.$$mul(t22, t27)))));
                                  t16 = cp1.get$rB();
                                  t29 = t16.get$x();
                                case 113:
                                  state0 = 0;
                                  t31 = t5.y;
                                case 114:
                                  state0 = 0;
                                  t31 = $.$$mul(t29, t31);
                                  t16 = t16.get$y();
                                case 115:
                                  state0 = 0;
                                  t33 = t5.x;
                                case 116:
                                  state0 = 0;
                                  t31 = $.$$sub(t31, $.$$mul(t16, t33));
                                  t35 = cp2.get$rB();
                                  t36 = t35.get$x();
                                case 117:
                                  state0 = 0;
                                  t38 = t6.y;
                                case 118:
                                  state0 = 0;
                                  t38 = $.$$mul(t36, t38);
                                  t35 = t35.get$y();
                                case 119:
                                  state0 = 0;
                                  t40 = t6.x;
                                case 120:
                                  state0 = 0;
                                  wB = t17.$add(wB, t13.$mul(invIB, $.$$add(t31, $.$$sub(t38, $.$$mul(t35, t40)))));
                                  cp1.set$normalImpulse(t4.get$x());
                                  cp2.set$normalImpulse(t4.get$y());
                                  break $loop$1;
                              }
                            t11 = cp1.get$normalMass();
                          case 121:
                            state0 = 0;
                            t11 = $.$$negate(t11);
                            t15 = b.x;
                          case 122:
                            state0 = 0;
                            t4.set$x($.$$mul(t11, t15));
                            t4.set$y(0);
                            t19 = c.get$K().get$col1().get$y();
                          case 123:
                            state0 = 0;
                            t21 = t4.get$x();
                          case 124:
                            state0 = 0;
                            t21 = $.$$mul(t19, t21);
                            t19 = b.y;
                          case 125:
                            state0 = 0;
                            vn2 = $.$$add(t21, t19);
                            t11 = t4.get$x();
                          case 126:
                            state0 = 0;
                          case 127:
                          case 128:
                          case 129:
                          case 130:
                          case 131:
                          case 132:
                          case 133:
                          case 134:
                          case 135:
                          case 136:
                          case 137:
                          case 138:
                          case 139:
                          case 140:
                          case 141:
                          case 142:
                            if (state0 === 142 || state0 === 141 || state0 === 140 || state0 === 139 || state0 === 138 || state0 === 137 || state0 === 136 || state0 === 135 || state0 === 134 || state0 === 133 || state0 === 132 || state0 === 131 || state0 === 130 || state0 === 129 || state0 === 128 || state0 === 127 || state0 === 0 && $.$$ge(t11, 0) === true && $.$$ge(vn2, 0) === true)
                              switch (state0) {
                                case 0:
                                  t3.setFrom$1(t4).subLocal$1(a);
                                  t5.setFrom$1(c.get$normal()).mulLocal$1(t3.x);
                                  t6.setFrom$1(c.get$normal()).mulLocal$1(t3.y);
                                  t7.setFrom$1(t5).addLocal$1(t6);
                                  t8.setFrom$1(t7).mulLocal$1(invMassA);
                                  vA.subLocal$1(t8);
                                  t8.setFrom$1(t7).mulLocal$1(invMassB);
                                  vB.addLocal$1(t8);
                                  t11 = cp1.get$rA();
                                  t14 = t11.get$x();
                                case 127:
                                  state0 = 0;
                                  t18 = t5.y;
                                case 128:
                                  state0 = 0;
                                  t18 = $.$$mul(t14, t18);
                                  t11 = t11.get$y();
                                case 129:
                                  state0 = 0;
                                  t20 = t5.x;
                                case 130:
                                  state0 = 0;
                                  t18 = $.$$sub(t18, $.$$mul(t11, t20));
                                  t22 = cp2.get$rA();
                                  t23 = t22.get$x();
                                case 131:
                                  state0 = 0;
                                  t25 = t6.y;
                                case 132:
                                  state0 = 0;
                                  t25 = $.$$mul(t23, t25);
                                  t22 = t22.get$y();
                                case 133:
                                  state0 = 0;
                                  t27 = t6.x;
                                case 134:
                                  state0 = 0;
                                  wA = t16.$sub(wA, t12.$mul(invIA, $.$$add(t18, $.$$sub(t25, $.$$mul(t22, t27)))));
                                  t16 = cp1.get$rB();
                                  t29 = t16.get$x();
                                case 135:
                                  state0 = 0;
                                  t31 = t5.y;
                                case 136:
                                  state0 = 0;
                                  t31 = $.$$mul(t29, t31);
                                  t16 = t16.get$y();
                                case 137:
                                  state0 = 0;
                                  t33 = t5.x;
                                case 138:
                                  state0 = 0;
                                  t31 = $.$$sub(t31, $.$$mul(t16, t33));
                                  t35 = cp2.get$rB();
                                  t36 = t35.get$x();
                                case 139:
                                  state0 = 0;
                                  t38 = t6.y;
                                case 140:
                                  state0 = 0;
                                  t38 = $.$$mul(t36, t38);
                                  t35 = t35.get$y();
                                case 141:
                                  state0 = 0;
                                  t40 = t6.x;
                                case 142:
                                  state0 = 0;
                                  wB = t17.$add(wB, t13.$mul(invIB, $.$$add(t31, $.$$sub(t38, $.$$mul(t35, t40)))));
                                  cp1.set$normalImpulse(t4.get$x());
                                  cp2.set$normalImpulse(t4.get$y());
                                  break $loop$1;
                              }
                            t4.set$x(0);
                            t11 = cp2.get$normalMass();
                          case 143:
                            state0 = 0;
                            t11 = $.$$negate(t11);
                            t15 = b.y;
                          case 144:
                            state0 = 0;
                            t4.set$y($.$$mul(t11, t15));
                            t19 = c.get$K().get$col2().get$x();
                          case 145:
                            state0 = 0;
                            t21 = t4.get$y();
                          case 146:
                            state0 = 0;
                            t21 = $.$$mul(t19, t21);
                            t19 = b.x;
                          case 147:
                            state0 = 0;
                            vn1 = $.$$add(t21, t19);
                            t11 = t4.get$y();
                          case 148:
                            state0 = 0;
                          case 149:
                          case 150:
                          case 151:
                          case 152:
                          case 153:
                          case 154:
                          case 155:
                          case 156:
                          case 157:
                          case 158:
                          case 159:
                          case 160:
                          case 161:
                          case 162:
                          case 163:
                          case 164:
                            if (state0 === 164 || state0 === 163 || state0 === 162 || state0 === 161 || state0 === 160 || state0 === 159 || state0 === 158 || state0 === 157 || state0 === 156 || state0 === 155 || state0 === 154 || state0 === 153 || state0 === 152 || state0 === 151 || state0 === 150 || state0 === 149 || state0 === 0 && $.$$ge(t11, 0) === true && $.$$ge(vn1, 0) === true)
                              switch (state0) {
                                case 0:
                                  t3.setFrom$1(t4).subLocal$1(a);
                                  t5.setFrom$1(c.get$normal()).mulLocal$1(t3.x);
                                  t6.setFrom$1(c.get$normal()).mulLocal$1(t3.y);
                                  t7.setFrom$1(t5).addLocal$1(t6);
                                  t8.setFrom$1(t7).mulLocal$1(invMassA);
                                  vA.subLocal$1(t8);
                                  t8.setFrom$1(t7).mulLocal$1(invMassB);
                                  vB.addLocal$1(t8);
                                  t11 = cp1.get$rA();
                                  t14 = t11.get$x();
                                case 149:
                                  state0 = 0;
                                  t18 = t5.y;
                                case 150:
                                  state0 = 0;
                                  t18 = $.$$mul(t14, t18);
                                  t11 = t11.get$y();
                                case 151:
                                  state0 = 0;
                                  t20 = t5.x;
                                case 152:
                                  state0 = 0;
                                  t18 = $.$$sub(t18, $.$$mul(t11, t20));
                                  t22 = cp2.get$rA();
                                  t23 = t22.get$x();
                                case 153:
                                  state0 = 0;
                                  t25 = t6.y;
                                case 154:
                                  state0 = 0;
                                  t25 = $.$$mul(t23, t25);
                                  t22 = t22.get$y();
                                case 155:
                                  state0 = 0;
                                  t27 = t6.x;
                                case 156:
                                  state0 = 0;
                                  wA = t16.$sub(wA, t12.$mul(invIA, $.$$add(t18, $.$$sub(t25, $.$$mul(t22, t27)))));
                                  t16 = cp1.get$rB();
                                  t29 = t16.get$x();
                                case 157:
                                  state0 = 0;
                                  t31 = t5.y;
                                case 158:
                                  state0 = 0;
                                  t31 = $.$$mul(t29, t31);
                                  t16 = t16.get$y();
                                case 159:
                                  state0 = 0;
                                  t33 = t5.x;
                                case 160:
                                  state0 = 0;
                                  t31 = $.$$sub(t31, $.$$mul(t16, t33));
                                  t35 = cp2.get$rB();
                                  t36 = t35.get$x();
                                case 161:
                                  state0 = 0;
                                  t38 = t6.y;
                                case 162:
                                  state0 = 0;
                                  t38 = $.$$mul(t36, t38);
                                  t35 = t35.get$y();
                                case 163:
                                  state0 = 0;
                                  t40 = t6.x;
                                case 164:
                                  state0 = 0;
                                  wB = t17.$add(wB, t13.$mul(invIB, $.$$add(t31, $.$$sub(t38, $.$$mul(t35, t40)))));
                                  cp1.set$normalImpulse(t4.get$x());
                                  cp2.set$normalImpulse(t4.get$y());
                                  break $loop$1;
                              }
                            t4.set$x(0);
                            t4.set$y(0);
                            vn1 = b.x;
                          case 165:
                            state0 = 0;
                            vn2 = b.y;
                          case 166:
                            state0 = 0;
                            if ($.$$ge(vn1, 0) === true)
                              t11 = $.$$ge(vn2, 0) === true;
                            else
                              t11 = false;
                          case 167:
                          case 168:
                          case 169:
                          case 170:
                          case 171:
                          case 172:
                          case 173:
                          case 174:
                          case 175:
                          case 176:
                          case 177:
                          case 178:
                          case 179:
                          case 180:
                          case 181:
                          case 182:
                            if (state0 === 182 || state0 === 181 || state0 === 180 || state0 === 179 || state0 === 178 || state0 === 177 || state0 === 176 || state0 === 175 || state0 === 174 || state0 === 173 || state0 === 172 || state0 === 171 || state0 === 170 || state0 === 169 || state0 === 168 || state0 === 167 || state0 === 0 && t11)
                              switch (state0) {
                                case 0:
                                  t3.setFrom$1(t4).subLocal$1(a);
                                  t5.setFrom$1(c.get$normal()).mulLocal$1(t3.x);
                                  t6.setFrom$1(c.get$normal()).mulLocal$1(t3.y);
                                  t7.setFrom$1(t5).addLocal$1(t6);
                                  t8.setFrom$1(t7).mulLocal$1(invMassA);
                                  vA.subLocal$1(t8);
                                  t8.setFrom$1(t7).mulLocal$1(invMassB);
                                  vB.addLocal$1(t8);
                                  t11 = cp1.get$rA();
                                  t14 = t11.get$x();
                                case 167:
                                  state0 = 0;
                                  t18 = t5.y;
                                case 168:
                                  state0 = 0;
                                  t18 = $.$$mul(t14, t18);
                                  t11 = t11.get$y();
                                case 169:
                                  state0 = 0;
                                  t20 = t5.x;
                                case 170:
                                  state0 = 0;
                                  t18 = $.$$sub(t18, $.$$mul(t11, t20));
                                  t22 = cp2.get$rA();
                                  t23 = t22.get$x();
                                case 171:
                                  state0 = 0;
                                  t25 = t6.y;
                                case 172:
                                  state0 = 0;
                                  t25 = $.$$mul(t23, t25);
                                  t22 = t22.get$y();
                                case 173:
                                  state0 = 0;
                                  t27 = t6.x;
                                case 174:
                                  state0 = 0;
                                  wA = t16.$sub(wA, t12.$mul(invIA, $.$$add(t18, $.$$sub(t25, $.$$mul(t22, t27)))));
                                  t16 = cp1.get$rB();
                                  t29 = t16.get$x();
                                case 175:
                                  state0 = 0;
                                  t31 = t5.y;
                                case 176:
                                  state0 = 0;
                                  t31 = $.$$mul(t29, t31);
                                  t16 = t16.get$y();
                                case 177:
                                  state0 = 0;
                                  t33 = t5.x;
                                case 178:
                                  state0 = 0;
                                  t31 = $.$$sub(t31, $.$$mul(t16, t33));
                                  t35 = cp2.get$rB();
                                  t36 = t35.get$x();
                                case 179:
                                  state0 = 0;
                                  t38 = t6.y;
                                case 180:
                                  state0 = 0;
                                  t38 = $.$$mul(t36, t38);
                                  t35 = t35.get$y();
                                case 181:
                                  state0 = 0;
                                  t40 = t6.x;
                                case 182:
                                  state0 = 0;
                                  wB = t17.$add(wB, t13.$mul(invIB, $.$$add(t31, $.$$sub(t38, $.$$mul(t35, t40)))));
                                  cp1.set$normalImpulse(t4.get$x());
                                  cp2.set$normalImpulse(t4.get$y());
                                  break $loop$1;
                              }
                            break $loop$1;
                        }
                      }
                  }
                bodyA.get$linearVelocity().setFrom$1(vA);
                bodyA.set$angularVelocity(wA);
                bodyB.get$linearVelocity().setFrom$1(vB);
                bodyB.set$angularVelocity(wB);
                ++i;
            }
    }
  },
  storeImpulses$0: function() {
    var i, t1, c, m, j;
    for (i = 0; $.CONSTANT2.$lt(i, this.constraintCount); ++i) {
      t1 = this.constraints;
      if (i >= t1.length)
        throw $.ioore(i);
      c = t1[i];
      m = c.get$manifold();
      for (j = 0; $.CONSTANT2.$lt(j, c.get$pointCount()); ++j) {
        t1 = $.$$index(c.get$points(), j).get$normalImpulse();
        $.$$index(m.get$points(), j).set$normalImpulse(t1);
        t1 = $.$$index(c.get$points(), j).get$tangentImpulse();
        $.$$index(m.get$points(), j).set$tangentImpulse(t1);
      }
    }
  },
  solvePositionConstraints$1: function(baumgarte) {
    var t1, t2, t3, t4, psm, normal, point, minSeparation, i, t5, c, bodyA, bodyB, t7, invMassA, invIA, t10, invMassB, invIB, j, t6, separation, C, t8, t12, t14, rnA, rnB, K, impulse, t9, t11, t16, t18, t20, t23;
    t1 = this.P;
    t2 = this.temp1;
    t3 = this.rA;
    t4 = this.rB;
    psm = this.psolver;
    normal = psm.normal;
    point = psm.point;
    minSeparation = 0;
    i = 0;
    while (true) {
      t5 = this.constraintCount;
      if (typeof t5 !== "number")
        return this.solvePositionConstraints$1$bailout(1, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, t5);
      if (!(i < t5))
        break;
      t5 = this.constraints;
      if (i >= t5.length)
        throw $.ioore(i);
      c = t5[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      t5 = bodyA.get$mass();
      t7 = bodyA.get$invMass();
      if (typeof t5 !== "number")
        return this.solvePositionConstraints$1$bailout(2, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, t5, c, bodyB, bodyA);
      if (typeof t7 !== "number")
        return this.solvePositionConstraints$1$bailout(3, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, t5, c, bodyB, bodyA, t7);
      invMassA = t5 * t7;
      t7 = bodyA.get$invInertia();
      if (typeof t7 !== "number")
        return this.solvePositionConstraints$1$bailout(5, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, 0, c, bodyB, bodyA, t5, invMassA, t7);
      invIA = t5 * t7;
      t7 = bodyB.get$mass();
      t10 = bodyB.get$invMass();
      if (typeof t7 !== "number")
        return this.solvePositionConstraints$1$bailout(6, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, 0, c, bodyB, bodyA, 0, invMassA, t7, invIA);
      if (typeof t10 !== "number")
        return this.solvePositionConstraints$1$bailout(7, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, 0, c, bodyB, bodyA, 0, invMassA, t7, invIA, t10);
      invMassB = t7 * t10;
      t10 = bodyB.get$invInertia();
      if (typeof t10 !== "number")
        return this.solvePositionConstraints$1$bailout(9, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, 0, c, bodyB, bodyA, 0, invMassA, 0, invIA, t7, invMassB, t10);
      invIB = t7 * t10;
      t5 = invMassA + invMassB;
      j = 0;
      while (true) {
        t6 = c.get$pointCount();
        if (typeof t6 !== "number")
          return this.solvePositionConstraints$1$bailout(10, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, 0, invIB, j, t6, $.CONSTANT4);
        if (!(j < t6))
          break;
        psm.initialize$2(c, j);
        separation = psm.separation;
        if (typeof separation !== "number")
          return this.solvePositionConstraints$1$bailout(11, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, 0, invIB, j, 0, $.CONSTANT4, separation);
        t3.setFrom$1(point).subLocal$1(bodyA.get$sweep().get$center());
        t4.setFrom$1(point).subLocal$1(bodyB.get$sweep().get$center());
        minSeparation = $.min(minSeparation, separation);
        if (minSeparation !== (minSeparation | 0))
          return this.solvePositionConstraints$1$bailout(12, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, 0, invIB, j, 0, $.CONSTANT4, separation);
        C = $.max(-0.2, $.min(baumgarte * (separation + 0.005), 0));
        t8 = t3.x;
        t10 = normal.y;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(13, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, t8, invMassB, 0, invIB, j, 0, $.CONSTANT4, 0, C);
        if (typeof t10 !== "number")
          return this.solvePositionConstraints$1$bailout(14, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, t8, invMassB, t10, invIB, j, 0, $.CONSTANT4, 0, C);
        t8 *= t10;
        t12 = t3.y;
        t14 = normal.x;
        if (typeof t12 !== "number")
          return this.solvePositionConstraints$1$bailout(15, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, t12, invMassB, t8, invIB, j, 0, $.CONSTANT4, 0, C);
        if (typeof t14 !== "number")
          return this.solvePositionConstraints$1$bailout(16, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, t12, invMassB, t8, invIB, j, 0, $.CONSTANT4, 0, C, t14);
        rnA = t8 - t12 * t14;
        t8 = t4.x;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(17, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, t8, invIB, j, 0, $.CONSTANT4, 0, C, 0, rnA);
        t10 = t8 * t10;
        t8 = t4.y;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(19, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, t8, invIB, j, 0, $.CONSTANT4, 0, C, 0, rnA, t10);
        rnB = t10 - t8 * t14;
        K = t5 + invIA * rnA * rnA + invIB * rnB * rnB;
        impulse = K > 0 ? -C / K : 0;
        t1.setFrom$1(normal).mulLocal$1(impulse);
        t2.setFrom$1(t1).mulLocal$1(invMassA);
        bodyA.get$sweep().get$center().subLocal$1(t2);
        t6 = bodyA.get$sweep();
        t7 = t6.get$angle();
        t9 = t3.x;
        t11 = t1.y;
        if (typeof t9 !== "number")
          return this.solvePositionConstraints$1$bailout(23, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, t7, invIA, t9, invMassB, 0, invIB, j, t6, $.CONSTANT4);
        if (typeof t11 !== "number")
          return this.solvePositionConstraints$1$bailout(24, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, t7, invIA, t9, invMassB, t11, invIB, j, t6, $.CONSTANT4);
        t11 = t9 * t11;
        t9 = t3.y;
        t14 = t1.x;
        if (typeof t9 !== "number")
          return this.solvePositionConstraints$1$bailout(25, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, t7, invIA, t9, invMassB, t11, invIB, j, t6, $.CONSTANT4);
        if (typeof t14 !== "number")
          return this.solvePositionConstraints$1$bailout(26, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, t7, invIA, t9, invMassB, t11, invIB, j, t6, $.CONSTANT4, 0, 0, t14);
        if (typeof t7 !== "number")
          return this.solvePositionConstraints$1$bailout(22, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, t7, invIA, 0, invMassB, 0, invIB, j, t6, $.CONSTANT4);
        t6.set$angle(t7 - invIA * (t11 - t9 * t14));
        bodyA.synchronizeTransform$0();
        t2.setFrom$1(t1).mulLocal$1(invMassB);
        bodyB.get$sweep().get$center().addLocal$1(t2);
        t6 = bodyB.get$sweep();
        t16 = t6.get$angle();
        t18 = t4.x;
        t20 = t1.y;
        if (typeof t18 !== "number")
          return this.solvePositionConstraints$1$bailout(28, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, 0, invIB, j, t6, $.CONSTANT4, 0, 0, 0, 0, 0, 0, t16, t18);
        if (typeof t20 !== "number")
          return this.solvePositionConstraints$1$bailout(29, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, 0, invIB, j, t6, $.CONSTANT4, 0, 0, 0, 0, 0, t20, t16, t18);
        t20 = t18 * t20;
        t18 = t4.y;
        t23 = t1.x;
        if (typeof t18 !== "number")
          return this.solvePositionConstraints$1$bailout(30, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, 0, invIB, j, t6, $.CONSTANT4, 0, 0, 0, 0, 0, t20, t16, t18);
        if (typeof t23 !== "number")
          return this.solvePositionConstraints$1$bailout(31, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, 0, invIB, j, t6, $.CONSTANT4, 0, 0, 0, 0, 0, t20, t16, t18, t23);
        if (typeof t16 !== "number")
          return this.solvePositionConstraints$1$bailout(27, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, 0, invIB, j, t6, $.CONSTANT4, 0, 0, 0, 0, 0, 0, t16);
        t6.set$angle(t16 + invIB * (t20 - t18 * t23));
        bodyB.synchronizeTransform$0();
        ++j;
      }
      ++i;
    }
    return minSeparation >= -0.0075;
  },
  solvePositionConstraints$1$bailout: function(state0, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, t5, c, bodyB, bodyA, t7, invMassA, t9, invIA, t11, invMassB, t13, invIB, j, t8, t6, separation, C, t16, rnA, t19, t22, t18, t20, t25) {
    switch (state0) {
      case 0:
        t1 = this.P;
        t2 = this.temp1;
        t3 = this.rA;
        t4 = this.rB;
        psm = this.psolver;
        normal = psm.normal;
        point = psm.point;
        minSeparation = 0;
        i = 0;
      default:
        var t10, rnB, K, impulse;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t5 = this.constraintCount;
              case 1:
                state0 = 0;
                if (!$.CONSTANT2.$lt(i, t5))
                  break L0;
                t5 = this.constraints;
                if (i >= t5.length)
                  throw $.ioore(i);
                c = t5[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                t5 = bodyA.get$mass();
              case 2:
                state0 = 0;
                t7 = bodyA.get$invMass();
              case 3:
                state0 = 0;
                invMassA = $.$$mul(t5, t7);
                t7 = bodyA.get$mass();
              case 4:
                state0 = 0;
                t9 = bodyA.get$invInertia();
              case 5:
                state0 = 0;
                invIA = $.$$mul(t7, t9);
                t9 = bodyB.get$mass();
              case 6:
                state0 = 0;
                t11 = bodyB.get$invMass();
              case 7:
                state0 = 0;
                invMassB = $.$$mul(t9, t11);
                t11 = bodyB.get$mass();
              case 8:
                state0 = 0;
                t13 = bodyB.get$invInertia();
              case 9:
                state0 = 0;
                invIB = $.$$mul(t11, t13);
                t5 = $.getInterceptor$JSNumber(invIA);
                t6 = $.getInterceptor$JSNumber(invIB);
                t7 = $.getInterceptor$JSNumber(invMassA);
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t8 = c.get$pointCount();
                      case 10:
                        state0 = 0;
                        if (!$.CONSTANT2.$lt(j, t8))
                          break L1;
                        psm.initialize$2(c, j);
                        separation = psm.separation;
                      case 11:
                        state0 = 0;
                        t3.setFrom$1(point).subLocal$1(bodyA.get$sweep().get$center());
                        t4.setFrom$1(point).subLocal$1(bodyB.get$sweep().get$center());
                        minSeparation = $.min(minSeparation, separation);
                      case 12:
                        state0 = 0;
                        t10 = $.$$add(separation, 0.005);
                        if (typeof t10 !== "number")
                          throw $.iae(t10);
                        C = $.max(-0.2, $.min(baumgarte * t10, 0));
                        t11 = t3.x;
                      case 13:
                        state0 = 0;
                        t13 = normal.y;
                      case 14:
                        state0 = 0;
                        t13 = $.$$mul(t11, t13);
                        t11 = t3.y;
                      case 15:
                        state0 = 0;
                        t16 = normal.x;
                      case 16:
                        state0 = 0;
                        rnA = $.$$sub(t13, $.$$mul(t11, t16));
                        t13 = t4.x;
                      case 17:
                        state0 = 0;
                        t19 = normal.y;
                      case 18:
                        state0 = 0;
                        t19 = $.$$mul(t13, t19);
                        t13 = t4.y;
                      case 19:
                        state0 = 0;
                        t22 = normal.x;
                      case 20:
                        state0 = 0;
                        rnB = $.$$sub(t19, $.$$mul(t13, t22));
                        K = $.$$add($.$$add(t7.$add(invMassA, invMassB), $.$$mul(t5.$mul(invIA, rnA), rnA)), $.$$mul(t6.$mul(invIB, rnB), rnB));
                      case 21:
                        if (state0 === 21 || state0 === 0 && $.$$gt(K, 0) === true)
                          switch (state0) {
                            case 0:
                              if (typeof K !== "number")
                                throw $.iae(K);
                              t8 = -C / K;
                            case 21:
                              state0 = 0;
                              impulse = t8;
                          }
                        else
                          impulse = 0;
                        t1.setFrom$1(normal).mulLocal$1(impulse);
                        t2.setFrom$1(t1).mulLocal$1(invMassA);
                        bodyA.get$sweep().get$center().subLocal$1(t2);
                        t8 = bodyA.get$sweep();
                        t9 = t8.get$angle();
                      case 22:
                        state0 = 0;
                        t11 = t3.x;
                      case 23:
                        state0 = 0;
                        t13 = t1.y;
                      case 24:
                        state0 = 0;
                        t13 = $.$$mul(t11, t13);
                        t11 = t3.y;
                      case 25:
                        state0 = 0;
                        t16 = t1.x;
                      case 26:
                        state0 = 0;
                        t8.set$angle($.$$sub(t9, t5.$mul(invIA, $.$$sub(t13, $.$$mul(t11, t16)))));
                        bodyA.synchronizeTransform$0();
                        t2.setFrom$1(t1).mulLocal$1(invMassB);
                        bodyB.get$sweep().get$center().addLocal$1(t2);
                        t8 = bodyB.get$sweep();
                        t18 = t8.get$angle();
                      case 27:
                        state0 = 0;
                        t20 = t4.x;
                      case 28:
                        state0 = 0;
                        t22 = t1.y;
                      case 29:
                        state0 = 0;
                        t22 = $.$$mul(t20, t22);
                        t20 = t4.y;
                      case 30:
                        state0 = 0;
                        t25 = t1.x;
                      case 31:
                        state0 = 0;
                        t8.set$angle($.$$add(t18, t6.$mul(invIB, $.$$sub(t22, $.$$mul(t20, t25)))));
                        bodyB.synchronizeTransform$0();
                        ++j;
                    }
                ++i;
            }
        return minSeparation >= -0.0075;
    }
  },
  ContactSolver$0: function() {
    var i, t1, t2;
    for (i = 0; t1 = this.constraints, i < t1.length; ++i) {
      t2 = $.ContactConstraint$();
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.PositionSolverManifold = {"": "Object;normal>,point,separation,pointA>,pointB>,temp,planePoint,clipPoint",
  initialize$2: function(cc, index) {
    var t1, t2, t3, t4, t5;
    switch (cc.get$type()) {
      case 0:
        t1 = cc.get$bodyA();
        t2 = cc.get$localPoint();
        t3 = this.pointA;
        t1.getWorldPointToOut$2(t2, t3);
        t2 = cc.get$bodyB();
        t1 = $.$$index(cc.get$points(), 0).get$localPoint();
        t4 = this.pointB;
        t2.getWorldPointToOut$2(t1, t4);
        t1 = $.$$gt($.MathBox_distanceSquared(t3, t4), 1.4208639999999999e-14);
        t2 = this.normal;
        if (t1 === true) {
          t2.setFrom$1(t4).subLocal$1(t3);
          t2.normalize$0();
        } else
          t2.setCoords$2(1, 0);
        this.point.setFrom$1(t3).addLocal$1(t4).mulLocal$1(0.5);
        t1 = this.temp;
        t1.setFrom$1(t4).subLocal$1(t3);
        t3 = this.normal;
        this.separation = $.$$sub($.$$add($.$$mul(t1.x, t3.x), $.$$mul(t1.y, t3.y)), cc.get$radius());
        break;
      case 1:
        t1 = cc.get$bodyA();
        t2 = cc.get$localNormal();
        t3 = this.normal;
        t1.getWorldVectorToOut$2(t2, t3);
        t2 = cc.get$bodyA();
        t1 = cc.get$localPoint();
        t4 = this.planePoint;
        t2.getWorldPointToOut$2(t1, t4);
        t1 = cc.get$bodyB();
        t2 = $.$$index(cc.get$points(), index).get$localPoint();
        t5 = this.clipPoint;
        t1.getWorldPointToOut$2(t2, t5);
        t2 = this.temp;
        t2.setFrom$1(t5).subLocal$1(t4);
        this.separation = $.$$sub($.$$add($.$$mul(t2.x, t3.x), $.$$mul(t2.y, t3.y)), cc.get$radius());
        this.point.setFrom$1(t5);
        break;
      case 2:
        t1 = cc.get$bodyB();
        t2 = cc.get$localNormal();
        t3 = this.normal;
        t1.getWorldVectorToOut$2(t2, t3);
        t2 = cc.get$bodyB();
        t1 = cc.get$localPoint();
        t4 = this.planePoint;
        t2.getWorldPointToOut$2(t1, t4);
        t1 = cc.get$bodyA();
        t2 = $.$$index(cc.get$points(), index).get$localPoint();
        t5 = this.clipPoint;
        t1.getWorldPointToOut$2(t2, t5);
        t2 = this.temp;
        t2.setFrom$1(t5).subLocal$1(t4);
        this.separation = $.$$sub($.$$add($.$$mul(t2.x, t3.x), $.$$mul(t2.y, t3.y)), cc.get$radius());
        this.point.setFrom$1(t5);
        t3.negateLocal$0();
        break;
    }
  }
};

$$.PolygonAndCircleContact = {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Expect_equals(1, fA.get$type(), null);
    $.Expect_equals(0, fB.get$type(), null);
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collidePolygonAndCircle$5(argManifold, this.fixtureA.get$shape(), xfA, this.fixtureB.get$shape(), xfB);
  }
};

$$.PolygonContact = {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Expect_equals(1, fA.get$type(), null);
    $.Expect_equals(1, fB.get$type(), null);
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collidePolygons$5(argManifold, this.fixtureA.get$shape(), xfA, this.fixtureB.get$shape(), xfB);
  }
};

$$.TimeOfImpactSolver = {"": "Object;constraints,count=,toiBody,psm,rA>,rB>,P,temp",
  initialize$3: function(contacts, argCount, argToiBody) {
    var old, i, t1, t2, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, constraint, j, cp;
    this.count = argCount;
    this.toiBody = argToiBody;
    if ($.$$ge(this.count, this.constraints.length) === true) {
      old = this.constraints;
      this.constraints = $.List_List($.max(this.count, old.length * 2));
      $.CONSTANT1.setRange$3(this.constraints, 0, old.length, old);
      for (i = old.length; t1 = this.constraints, i < t1.length; ++i) {
        t2 = $.TimeOfImpactConstraint$();
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = t2;
      }
    }
    for (i = 0; $.CONSTANT2.$lt(i, this.count); ++i) {
      if (i >= contacts.length)
        throw $.ioore(i);
      contact = contacts[i];
      fixtureA = contact.get$fixtureA();
      fixtureB = contact.get$fixtureB();
      shapeA = fixtureA.get$shape();
      shapeB = fixtureB.get$shape();
      radiusA = shapeA.get$radius();
      radiusB = shapeB.get$radius();
      bodyA = fixtureA.get$body();
      bodyB = fixtureB.get$body();
      manifold = contact.get$manifold();
      t1 = this.constraints;
      if (i >= t1.length)
        throw $.ioore(i);
      constraint = t1[i];
      constraint.set$bodyA(bodyA);
      constraint.set$bodyB(bodyB);
      constraint.get$localNormal().setFrom$1(manifold.get$localNormal());
      constraint.get$localPoint().setFrom$1(manifold.get$localPoint());
      constraint.set$type(manifold.get$type());
      constraint.set$pointCount(manifold.get$pointCount());
      constraint.set$radius($.$$add(radiusA, radiusB));
      for (j = 0; $.CONSTANT2.$lt(j, constraint.get$pointCount()); ++j) {
        cp = $.$$index(manifold.get$points(), j);
        $.$$indexSet(constraint.get$localPoints(), j, cp.get$localPoint());
      }
    }
  },
  solve$1: function(baumgarte) {
    var t1, t2, t3, t4, t5, normal, point, minSeparation, i, t6, c, bodyA, bodyB, massA, massB, invMassA, invIA, invMassB, invIB, j, t7, separation, C, t9, t11, t13, t15, rnA, rnB, K, impulse, t8, t10, t12, t17, t19, t21, t24;
    t1 = this.P;
    t2 = this.temp;
    t3 = this.rA;
    t4 = this.rB;
    t5 = this.psm;
    normal = t5.normal;
    point = t5.point;
    minSeparation = 0;
    i = 0;
    while (true) {
      t6 = this.count;
      if (typeof t6 !== "number")
        return this.solve$1$bailout(1, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, t6);
      if (!(i < t6))
        break;
      t6 = this.constraints;
      if (i >= t6.length)
        throw $.ioore(i);
      c = t6[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      massA = bodyA.get$mass();
      if (typeof massA !== "number")
        return this.solve$1$bailout(2, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, 0, bodyA, bodyB, massA, c);
      massB = bodyB.get$mass();
      if (typeof massB !== "number")
        return this.solve$1$bailout(3, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, 0, bodyA, bodyB, massA, c, massB);
      if ($.$$eq(bodyA, this.toiBody) === true)
        massB = 0;
      else
        massA = 0;
      t6 = bodyA.get$invMass();
      if (typeof t6 !== "number")
        return this.solve$1$bailout(4, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, t6, bodyA, bodyB, massA, c, massB);
      invMassA = massA * t6;
      t6 = bodyA.get$invInertia();
      if (typeof t6 !== "number")
        return this.solve$1$bailout(5, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, t6, bodyA, bodyB, massA, c, massB, invMassA, $.CONSTANT4);
      invIA = massA * t6;
      t6 = bodyB.get$invMass();
      if (typeof t6 !== "number")
        return this.solve$1$bailout(6, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, t6, bodyA, bodyB, 0, c, massB, invMassA, 0, invIA);
      invMassB = massB * t6;
      t6 = bodyB.get$invInertia();
      if (typeof t6 !== "number")
        return this.solve$1$bailout(7, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, t6, bodyA, bodyB, 0, c, massB, invMassA, 0, invIA, invMassB, $.CONSTANT4);
      invIB = massB * t6;
      t6 = invMassA + invMassB;
      j = 0;
      while (true) {
        t7 = c.get$pointCount();
        if (typeof t7 !== "number")
          return this.solve$1$bailout(8, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, t7);
        if (!(j < t7))
          break;
        t5.initialize$2(c, j);
        separation = t5.separation;
        if (typeof separation !== "number")
          return this.solve$1$bailout(9, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, 0, separation);
        t3.setFrom$1(point).subLocal$1(bodyA.get$sweep().get$center());
        t4.setFrom$1(point).subLocal$1(bodyB.get$sweep().get$center());
        minSeparation = $.min(minSeparation, separation);
        if (minSeparation !== (minSeparation | 0))
          return this.solve$1$bailout(10, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, 0, separation);
        C = $.max(-0.2, $.min(baumgarte * (separation + 0.005), 0));
        t9 = t3.x;
        t11 = normal.y;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(11, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, 0, 0, C, t9);
        if (typeof t11 !== "number")
          return this.solve$1$bailout(12, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, 0, 0, C, t9, t11);
        t9 *= t11;
        t13 = t3.y;
        t15 = normal.x;
        if (typeof t13 !== "number")
          return this.solve$1$bailout(13, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, 0, 0, C, t13, t9);
        if (typeof t15 !== "number")
          return this.solve$1$bailout(14, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, 0, 0, C, t13, t9, t15);
        rnA = t9 - t13 * t15;
        t9 = t4.x;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(15, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, 0, 0, C, 0, t9, 0, rnA);
        t11 = t9 * t11;
        t9 = t4.y;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(17, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, 0, 0, C, 0, t9, 0, rnA, t11);
        rnB = t11 - t9 * t15;
        K = t6 + invIA * rnA * rnA + invIB * rnB * rnB;
        impulse = K > 0 ? -C / K : 0;
        t1.setFrom$1(normal).mulLocal$1(impulse);
        t2.setFrom$1(t1).mulLocal$1(invMassA);
        bodyA.get$sweep().get$center().subLocal$1(t2);
        t7 = bodyA.get$sweep();
        t8 = t7.get$angle();
        t10 = t3.x;
        t12 = t1.y;
        if (typeof t10 !== "number")
          return this.solve$1$bailout(21, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, t8, $.CONSTANT4, invIB, j, t7, 0, 0, t10);
        if (typeof t12 !== "number")
          return this.solve$1$bailout(22, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, t8, $.CONSTANT4, invIB, j, t7, 0, 0, t10, t12);
        t12 = t10 * t12;
        t10 = t3.y;
        t15 = t1.x;
        if (typeof t10 !== "number")
          return this.solve$1$bailout(23, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, t8, $.CONSTANT4, invIB, j, t7, 0, 0, t10, t12);
        if (typeof t15 !== "number")
          return this.solve$1$bailout(24, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, t8, $.CONSTANT4, invIB, j, t7, 0, 0, t10, t12, t15);
        if (typeof t8 !== "number")
          return this.solve$1$bailout(20, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, t8, $.CONSTANT4, invIB, j, t7);
        t7.set$angle(t8 - invIA * (t12 - t10 * t15));
        bodyA.synchronizeTransform$0();
        t2.setFrom$1(t1).mulLocal$1(invMassB);
        bodyB.get$sweep().get$center().addLocal$1(t2);
        t7 = bodyB.get$sweep();
        t17 = t7.get$angle();
        t19 = t4.x;
        t21 = t1.y;
        if (typeof t19 !== "number")
          return this.solve$1$bailout(26, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, t7, 0, 0, 0, 0, 0, 0, 0, 0, t17, t19);
        if (typeof t21 !== "number")
          return this.solve$1$bailout(27, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, t7, 0, 0, 0, 0, 0, 0, 0, t21, t17, t19);
        t21 = t19 * t21;
        t19 = t4.y;
        t24 = t1.x;
        if (typeof t19 !== "number")
          return this.solve$1$bailout(28, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, t7, 0, 0, 0, 0, 0, 0, 0, t21, t17, t19);
        if (typeof t24 !== "number")
          return this.solve$1$bailout(29, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, t7, 0, 0, 0, 0, 0, 0, 0, t21, t17, t19, t24);
        if (typeof t17 !== "number")
          return this.solve$1$bailout(25, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, t7, 0, 0, 0, 0, 0, 0, 0, 0, t17);
        t7.set$angle(t17 + invIB * (t21 - t19 * t24));
        bodyB.synchronizeTransform$0();
        ++j;
      }
      ++i;
    }
    return minSeparation >= -0.0075;
  },
  solve$1$bailout: function(state0, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, t6, bodyA, bodyB, massA, c, massB, invMassA, t8, invIA, invMassB, t10, t7, invIB, j, t9, separation, C, t12, t14, t17, rnA, t20, t23, t19, t21, t26) {
    switch (state0) {
      case 0:
        t1 = this.P;
        t2 = this.temp;
        t3 = this.rA;
        t4 = this.rB;
        t5 = this.psm;
        normal = t5.normal;
        point = t5.point;
        minSeparation = 0;
        i = 0;
      default:
        var t11, rnB, K, impulse;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t6 = this.count;
              case 1:
                state0 = 0;
                if (!$.CONSTANT2.$lt(i, t6))
                  break L0;
                t6 = this.constraints;
                if (i >= t6.length)
                  throw $.ioore(i);
                c = t6[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                massA = bodyA.get$mass();
              case 2:
                state0 = 0;
                massB = bodyB.get$mass();
              case 3:
                state0 = 0;
                if ($.$$eq(bodyA, this.toiBody) === true)
                  massB = 0;
                else
                  massA = 0;
                t6 = bodyA.get$invMass();
              case 4:
                state0 = 0;
                t8 = $.getInterceptor$JSNumber(massA);
                invMassA = t8.$mul(massA, t6);
                t6 = bodyA.get$invInertia();
              case 5:
                state0 = 0;
                invIA = t8.$mul(massA, t6);
                t6 = bodyB.get$invMass();
              case 6:
                state0 = 0;
                t10 = $.getInterceptor$JSNumber(massB);
                invMassB = t10.$mul(massB, t6);
                t6 = bodyB.get$invInertia();
              case 7:
                state0 = 0;
                invIB = t10.$mul(massB, t6);
                t6 = $.getInterceptor$JSNumber(invIA);
                t7 = $.getInterceptor$JSNumber(invIB);
                t8 = $.getInterceptor$JSNumber(invMassA);
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t9 = c.get$pointCount();
                      case 8:
                        state0 = 0;
                        if (!$.CONSTANT2.$lt(j, t9))
                          break L1;
                        t5.initialize$2(c, j);
                        separation = t5.separation;
                      case 9:
                        state0 = 0;
                        t3.setFrom$1(point).subLocal$1(bodyA.get$sweep().get$center());
                        t4.setFrom$1(point).subLocal$1(bodyB.get$sweep().get$center());
                        minSeparation = $.min(minSeparation, separation);
                      case 10:
                        state0 = 0;
                        t11 = $.$$add(separation, 0.005);
                        if (typeof t11 !== "number")
                          throw $.iae(t11);
                        C = $.max(-0.2, $.min(baumgarte * t11, 0));
                        t12 = t3.x;
                      case 11:
                        state0 = 0;
                        t14 = normal.y;
                      case 12:
                        state0 = 0;
                        t14 = $.$$mul(t12, t14);
                        t12 = t3.y;
                      case 13:
                        state0 = 0;
                        t17 = normal.x;
                      case 14:
                        state0 = 0;
                        rnA = $.$$sub(t14, $.$$mul(t12, t17));
                        t14 = t4.x;
                      case 15:
                        state0 = 0;
                        t20 = normal.y;
                      case 16:
                        state0 = 0;
                        t20 = $.$$mul(t14, t20);
                        t14 = t4.y;
                      case 17:
                        state0 = 0;
                        t23 = normal.x;
                      case 18:
                        state0 = 0;
                        rnB = $.$$sub(t20, $.$$mul(t14, t23));
                        K = $.$$add($.$$add(t8.$add(invMassA, invMassB), $.$$mul(t6.$mul(invIA, rnA), rnA)), $.$$mul(t7.$mul(invIB, rnB), rnB));
                      case 19:
                        if (state0 === 19 || state0 === 0 && $.$$gt(K, 0) === true)
                          switch (state0) {
                            case 0:
                              if (typeof K !== "number")
                                throw $.iae(K);
                              t9 = -C / K;
                            case 19:
                              state0 = 0;
                              impulse = t9;
                          }
                        else
                          impulse = 0;
                        t1.setFrom$1(normal).mulLocal$1(impulse);
                        t2.setFrom$1(t1).mulLocal$1(invMassA);
                        bodyA.get$sweep().get$center().subLocal$1(t2);
                        t9 = bodyA.get$sweep();
                        t10 = t9.get$angle();
                      case 20:
                        state0 = 0;
                        t12 = t3.x;
                      case 21:
                        state0 = 0;
                        t14 = t1.y;
                      case 22:
                        state0 = 0;
                        t14 = $.$$mul(t12, t14);
                        t12 = t3.y;
                      case 23:
                        state0 = 0;
                        t17 = t1.x;
                      case 24:
                        state0 = 0;
                        t9.set$angle($.$$sub(t10, t6.$mul(invIA, $.$$sub(t14, $.$$mul(t12, t17)))));
                        bodyA.synchronizeTransform$0();
                        t2.setFrom$1(t1).mulLocal$1(invMassB);
                        bodyB.get$sweep().get$center().addLocal$1(t2);
                        t9 = bodyB.get$sweep();
                        t19 = t9.get$angle();
                      case 25:
                        state0 = 0;
                        t21 = t4.x;
                      case 26:
                        state0 = 0;
                        t23 = t1.y;
                      case 27:
                        state0 = 0;
                        t23 = $.$$mul(t21, t23);
                        t21 = t4.y;
                      case 28:
                        state0 = 0;
                        t26 = t1.x;
                      case 29:
                        state0 = 0;
                        t9.set$angle($.$$add(t19, t7.$mul(invIB, $.$$sub(t23, $.$$mul(t21, t26)))));
                        bodyB.synchronizeTransform$0();
                        ++j;
                    }
                ++i;
            }
        return minSeparation >= -0.0075;
    }
  },
  TimeOfImpactSolver$0: function() {
    var i, t1, t2;
    for (i = 0; t1 = this.constraints, i < t1.length; ++i) {
      t2 = $.TimeOfImpactConstraint$();
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.TimeOfImpactSolverManifold = {"": "Object;normal>,point,separation,pointA>,pointB>,temp,planePoint,clipPoint",
  initialize$2: function(cc, index) {
    var t1, t2, t3, t4;
    switch (cc.get$type()) {
      case 0:
        t1 = this.pointA;
        t1.setFrom$1(cc.get$bodyA().getWorldPoint$1(cc.get$localPoint()));
        t2 = this.pointB;
        t2.setFrom$1(cc.get$bodyB().getWorldPoint$1($.$$index(cc.get$localPoints(), 0)));
        t3 = $.$$gt($.MathBox_distanceSquared(t1, t2), 1.4208639999999999e-14);
        t4 = this.normal;
        if (t3 === true) {
          t4.setFrom$1(t2).subLocal$1(t1);
          t4.normalize$0();
        } else
          t4.setCoords$2(1, 0);
        this.point.setFrom$1(t1).addLocal$1(t2).mulLocal$1(0.5);
        t3 = this.temp;
        t3.setFrom$1(t2).subLocal$1(t1);
        t1 = this.normal;
        this.separation = $.$$sub($.$$add($.$$mul(t3.x, t1.x), $.$$mul(t3.y, t1.y)), cc.get$radius());
        break;
      case 1:
        t1 = this.normal;
        t1.setFrom$1(cc.get$bodyA().getWorldVector$1(cc.get$localNormal()));
        t2 = this.planePoint;
        t2.setFrom$1(cc.get$bodyA().getWorldPoint$1(cc.get$localPoint()));
        t3 = this.clipPoint;
        t3.setFrom$1(cc.get$bodyB().getWorldPoint$1($.$$index(cc.get$localPoints(), index)));
        t4 = this.temp;
        t4.setFrom$1(t3).subLocal$1(t2);
        this.separation = $.$$sub($.$$add($.$$mul(t4.x, t1.x), $.$$mul(t4.y, t1.y)), cc.get$radius());
        this.point.setFrom$1(t3);
        break;
      case 2:
        t1 = this.normal;
        t1.setFrom$1(cc.get$bodyB().getWorldVector$1(cc.get$localNormal()));
        t2 = this.planePoint;
        t2.setFrom$1(cc.get$bodyB().getWorldPoint$1(cc.get$localPoint()));
        t3 = this.clipPoint;
        t3.setFrom$1(cc.get$bodyA().getWorldPoint$1($.$$index(cc.get$localPoints(), index)));
        t4 = this.temp;
        t4.setFrom$1(t3).subLocal$1(t2);
        this.separation = $.$$sub($.$$add($.$$mul(t4.x, t1.x), $.$$mul(t4.y, t1.y)), cc.get$radius());
        this.point.setFrom$1(t3);
        t1.negateLocal$0();
        break;
    }
  }
};

$$.TimeOfImpactConstraint = {"": "Object;localPoints>,localNormal>,localPoint>,type=,radius=,pointCount=,bodyA=,bodyB=",
  setFrom$1: function(argOther) {
    var t1, i, t2, t3;
    for (t1 = this.localPoints, i = 0; i < t1.length; ++i) {
      t2 = t1[i];
      t3 = argOther.get$localPoints();
      if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
        return this.setFrom$1$bailout(1, argOther, t2, t3, t1, i);
      if (i >= t3.length)
        throw $.ioore(i);
      t2.setFrom$1(t3[i]);
    }
    this.localNormal.setFrom$1(argOther.get$localNormal());
    this.localPoint.setFrom$1(argOther.get$localPoint());
    this.type = argOther.get$type();
    this.radius = argOther.get$radius();
    this.pointCount = argOther.get$pointCount();
    this.bodyA = argOther.get$bodyA();
    this.bodyB = argOther.get$bodyB();
  },
  setFrom$1$bailout: function(state0, argOther, t2, t3, t1, i) {
    switch (state0) {
      case 0:
        t1 = this.localPoints;
        i = 0;
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < t1.length))
                  break L0;
                t2 = t1[i];
                t3 = argOther.get$localPoints();
              case 1:
                state0 = 0;
                t2.setFrom$1($.$$index(t3, i));
                ++i;
            }
        this.localNormal.setFrom$1(argOther.get$localNormal());
        this.localPoint.setFrom$1(argOther.get$localPoint());
        this.type = argOther.get$type();
        this.radius = argOther.get$radius();
        this.pointCount = argOther.get$pointCount();
        this.bodyA = argOther.get$bodyA();
        this.bodyB = argOther.get$bodyB();
    }
  },
  TimeOfImpactConstraint$0: function() {
    var t1, i, t2;
    for (t1 = this.localPoints, i = 0; i < t1.length; ++i) {
      t2 = $.Vector$(0, 0);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.DefaultWorldPool = {"": "Object;collision,timeOfImpact,distance=",
  timeOfImpact$2: function(arg0, arg1) {
    return this.timeOfImpact.call$2(arg0, arg1);
  },
  distance$3: function(arg0, arg1, arg2) {
    return this.distance.call$3(arg0, arg1, arg2);
  },
  getCircleContactStack$0: function() {
    var queue, i;
    queue = $.DoubleLinkedQueue$();
    for (i = 0; i < 10; ++i)
      queue.addFirst$1($.CircleContact$(this));
    return queue;
  },
  getPolyCircleContactStack$0: function() {
    var queue, i;
    queue = $.DoubleLinkedQueue$();
    for (i = 0; i < 10; ++i)
      queue.addFirst$1($.PolygonAndCircleContact$(this));
    return queue;
  },
  getPolyContactStack$0: function() {
    var queue, i;
    queue = $.DoubleLinkedQueue$();
    for (i = 0; i < 10; ++i)
      queue.addFirst$1($.PolygonContact$(this));
    return queue;
  },
  DefaultWorldPool$0: function() {
    this.distance = $.Distance$_construct();
    this.collision = $.Collision$_construct(this);
    this.timeOfImpact = $.TimeOfImpact$_construct(this);
  }
};

$$.Game_run_anon = {"": "Closure;this_0",
  call$1: function(time) {
    this.this_0._step$1(time);
  }
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
};

$$.Game__step_anon = {"": "Closure;this_0",
  call$1: function(time) {
    var t1 = this.this_0;
    t1._step$1(time);
    t1._draw$0();
    t1.get$endSolver().check$0();
  }
};

$$.ToString__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (t1.first_0 !== true)
      $.add(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    $.add(t1, ": ");
    $.ToString__emitObject(v, t1, t2);
  }
};

$$._LinkedHashMapImpl_forEach_anon = {"": "Closure;f_0",
  call$1: function(entry) {
    this.f_0.call$2(entry.get$key(), entry.get$value());
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$$gt(t1.i_1, 0) === true)
      $.add(t1.sb_0, ", ");
    $.add(t1.sb_0, key);
    $.add(t1.sb_0, ": ");
    $.add(t1.sb_0, $.Error_safeToString(value));
    t1.i_1 = $.$$add(t1.i_1, 1);
  }
};

$$.Game_init_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    t1.set$canvasFpsCounter(t1.get$frameCount());
    t1.set$frameCount(0);
  }
};

$$.Game_init_anon0 = {"": "Closure;this_1",
  call$0: function() {
    var t1 = this.this_1;
    t1.set$canvasWorldStepTime($.$$div(t1.get$elapsedUs(), 1000));
  }
};

$$.Game__initListeners_anon = {"": "Closure;this_0",
  call$1: function(e) {
    this.this_0.get$eventHandler().onMouseDown$1(e);
  }
};

$$.Game__initListeners_anon0 = {"": "Closure;this_1",
  call$1: function(e) {
    this.this_1.get$eventHandler().onMouseUp$1(e);
  }
};

$$.Game__initListeners_anon1 = {"": "Closure;this_2",
  call$1: function(e) {
    var t1 = this.this_2;
    if (t1.get$running() !== true)
      t1.get$eventHandler().onMouseMove$1(e);
  }
};

$$.Game__initListeners_anon2 = {"": "Closure;this_3",
  call$1: function(e) {
    var t1 = this.this_3;
    if (t1.get$eventHandler().get$dragHandler().isActive$0() === true)
      if ($.$$eq(e.get$keyCode(), 37) === true)
        t1.get$eventHandler().get$dragHandler().set$rotateLeft(true);
      else if ($.$$eq(e.get$keyCode(), 39) === true)
        t1.get$eventHandler().get$dragHandler().set$rotateRight(true);
      else if ($.$$eq(e.get$keyCode(), 32) === true)
        ;
  }
};

$$.Game__initListeners_anon3 = {"": "Closure;this_4",
  call$1: function(e) {
    var t1 = this.this_4;
    if (t1.get$eventHandler().get$dragHandler().isActive$0() === true) {
      if ($.$$eq(e.get$keyCode(), 37) === true)
        t1.get$eventHandler().get$dragHandler().set$rotateLeft(false);
      else if ($.$$eq(e.get$keyCode(), 39) === true)
        t1.get$eventHandler().get$dragHandler().set$rotateRight(false);
      else if ($.$$eq(e.get$keyCode(), 32) === true)
        ;
      t1.get$eventHandler().get$dragHandler().getActiveObject$0().get$body().set$angularVelocity(0);
    }
  }
};

$$.Game__initListeners_anon4 = {"": "Closure;this_5",
  call$1: function(e) {
    this.this_5.resizeCanvas$0();
  }
};

$$.Game__initListeners_anon5 = {"": "Closure;this_6",
  call$1: function(e) {
    var t1 = this.this_6;
    if (t1.get$running() === true) {
      t1.stopCritters$0();
      t1.resetUI$0();
    } else {
      t1.startCritters$0();
      t1.get$mainButtonElm().set$text("stop");
      t1.get$progressElm().get$style().set$display("block");
      t1.updateProgressElm$0();
    }
  }
};

$$.Game__initListeners_anon6 = {"": "Closure;this_7",
  call$1: function(e) {
    var t1 = this.this_7;
    t1.loadLevel$1($.$$index(t1.get$level(), "id"));
  }
};

$$.Game__initListeners_anon7 = {"": "Closure;this_8",
  call$1: function(e) {
    var elm = e.get$target();
    this.this_8.loadLevel$1($.$$sub($.int_parse(elm.get$text(), null, null), 1));
  }
};

$$.Stream_length_anon = {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$$add(t1.count_0, 1);
  }
};

$$.Stream_length_anon0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  }
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$1: function(_) {
    var t1, error;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError() === true) {
      t1._clearUnhandledError$0();
      error = t1.get$_resultOrListeners();
      $.Primitives_printString("Uncaught Error: " + $.S(error.get$error()));
      t1 = error.get$stackTrace();
      if (!(t1 == null))
        $.Primitives_printString("Stack Trace:\n" + $.S(t1) + "\n");
      throw $.$$throw(error.get$error());
    }
  }
};

$$.anon = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$1(this.this_0);
  }
};

$$.internalCallback = {"": "Closure;this_2,callback_3",
  call$0: function() {
    var t1, t2;
    t1 = this.callback_3;
    t2 = this.this_2;
    t1.call$1(t2);
    t2.set$_handle(null);
    t2 = $globalState.topEventLoop;
    t2.set$activeTimerCount($.$$sub(t2.get$activeTimerCount(), 1));
  }
};

$$.Collection_clear_anon = {"": "Closure;",
  call$1: function(e) {
    return true;
  }
};

$$.Stream_contains_anon = {"": "Closure;box_0,match_1,future_2",
  call$1: function(element) {
    var t1, t2, t3;
    t1 = new $.Stream_contains__anon(this.match_1, element);
    t2 = this.box_0;
    t3 = this.future_2;
    $._runUserCode(t1, new $.Stream_contains__anon0(t2, t3), $._cancelAndError(t2.subscription_0, t3), null);
  }
};

$$.Stream_contains__anon = {"": "Closure;match_3,element_4",
  call$0: function() {
    return $.$$eq(this.element_4, this.match_3);
  }
};

$$.Stream_contains__anon0 = {"": "Closure;box_0,future_5",
  call$1: function(isMatch) {
    if (isMatch === true) {
      this.box_0.subscription_0.cancel$0();
      this.future_5._setValue$1(true);
    }
  }
};

$$.Stream_contains_anon0 = {"": "Closure;future_6",
  call$0: function() {
    this.future_6._setValue$1(false);
  }
};

$$._cancelAndError_anon = {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    this.subscription_0.cancel$0();
    this.future_1._setError$1(error);
  }
};

$$.HashSet_forEach_anon = {"": "Closure;f_0",
  call$2: function(key, value) {
    this.f_0.call$1(key);
  }
};

$$.Stream_toSet_anon = {"": "Closure;result_0",
  call$1: function(data) {
    $.add(this.result_0, data);
  }
};

$$.Stream_toSet_anon0 = {"": "Closure;result_1,future_2",
  call$0: function() {
    this.future_2._setValue$1(this.result_1);
  }
};

$$.BroadPhase_updatePairs_anon = {"": "Closure;",
  call$2: function(a, b) {
    return $.compareTo(a, b);
  }
};

$$.Stream_isEmpty_anon = {"": "Closure;box_0,future_1",
  call$1: function(_) {
    this.box_0.subscription_0.cancel$0();
    this.future_1._setValue$1(false);
  }
};

$$.Stream_isEmpty_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setValue$1(true);
  }
};

$$.convertDartToNative_Dictionary_anon = {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (this.this_0.runIteration$0() !== true)
      return;
    $.TimerImpl$(0, new $._EventLoop__runHelper_next_anon(this));
  }
};

$$._EventLoop__runHelper_next_anon = {"": "Closure;next_1",
  call$1: function(_) {
    return this.next_1.call$0();
  }
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1;
    this.port_1.close$0();
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!value.$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(value);
  }
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true)
      $globalState.mainManager.postMessage$1(workerMessage);
    else {
      manager = $.$$index($globalState.managers, t1.get$_workerId());
      if (!(manager == null))
        manager.postMessage$1(workerMessage);
    }
  }
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$1: function(_) {
    this.thenFuture_0._sendValue$1(this.value_1);
  }
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$1: function(_) {
    this.errorFuture_1._sendError$1(this.error_0);
  }
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,completer_1,values_2,pos_3",
  call$1: function(value) {
    var t1, t2, remaining;
    t1 = this.values_2;
    $.$$indexSet(t1, this.pos_3, value);
    t2 = this.box_0;
    remaining = $.$$sub(t2.remaining_0, 1);
    t2.remaining_0 = remaining;
    if ($.$$eq(remaining, 0) === true)
      this.completer_1.complete$1(t1);
  }
};

$$._FutureImpl__FutureImpl$wait_anon0 = {"": "Closure;box_0,completer_4",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.completed_1 !== true)
      this.completer_4.completeError$2(error.get$error(), error.get$stackTrace());
    t1.completed_1 = true;
  }
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    isolate = $.$$index($globalState.isolates, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = !($globalState.currentContext == null) && $.$$eq($globalState.currentContext.get$id(), t2.get$_isolateId()) !== true;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  }
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (!(t1.get$_receivePort().get$_callback() == null)) {
      if (this.shouldSerialize_5 === true) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_receivePort();
      t2 = this.box_0;
      t1._callback$2(t2.msg_0, t2.reply_1);
    }
  }
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$.Storage_values_anon = {"": "Closure;values_0",
  call$2: function(k, v) {
    return $.add(this.values_0, v);
  }
};

$$._LinkedHashMapImpl_values_anon = {"": "Closure;",
  call$1: function(entry) {
    return entry.get$value();
  }
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$.Stream_toList_anon = {"": "Closure;result_0",
  call$1: function(data) {
    $.add(this.result_0, data);
  }
};

$$.Stream_toList_anon0 = {"": "Closure;result_1,future_2",
  call$0: function() {
    this.future_2._setValue$1(this.result_1);
  }
};

$$.Storage_keys_anon = {"": "Closure;keys_0",
  call$2: function(k, v) {
    return $.add(this.keys_0, k);
  }
};

$$._LinkedHashMapImpl_keys_anon = {"": "Closure;",
  call$1: function(entry) {
    return entry.get$key();
  }
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    $.$$indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
  }
};

$$.IsolateNatives__processWorkerMessage_function = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  }
};

$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};
$$.BoundClosure$i1 = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  }
};
$$.Bound_contains_JSString = {"": "Closure;self,target,receiver",
  call$2: function(p0, p1) {
    return this.self[this.target](this.receiver, p0, p1);
  },
  call$1: function($receiver, other) {
    return this.call$2($receiver, other, 0);
  }
};
$$.BoundClosure$3 = {"": "Closure;self,target",
  call$3: function(p0, p1, p2) {
    return this.self[this.target](p0, p1, p2);
  }
};
$._callInIsolate = function(isolate, $function) {
  isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
};

$._currentIsolate = function() {
  return $globalState.currentContext;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue(), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var scripts, len, i, script, src, t1;
  scripts = document.getElementsByTagName('script');
  for (len = scripts.length, i = 0; i < len; ++i) {
    script = scripts[i];
    src = script && script.src;
    t1 = $.getInterceptor(src);
    if (!(src == null) && t1.endsWith$1(src, "test_controller.js") !== true && t1.endsWith$1(src, "dart.js") !== true)
      return src;
  }
  return;
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, t2, entryPoint, replyTo, context;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$JSStringJSArray(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      t2 = t1.$index(msg, "id");
      $globalState.currentManagerId = t2;
      entryPoint = $[t1.$index(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_function(entryPoint, replyTo), "worker-start");
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (!(t1.$index(msg, "port") == null))
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      $.remove($globalState.managers, sender.get$id());
      sender.terminate$0();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true)
        $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      else
        $.Primitives_printString($.toString(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.$$throw(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, exception;
  if ($globalState.isWorker === true)
    $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $.lazyPort = $.ReceivePortImpl$();
  replyTo.send$2("spawned", $._Isolate_port().toSendPort$0());
  topLevel.call$0();
};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.set$onmessage(function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  worker.set$id(workerId);
  $.$$indexSet($globalState.managers, workerId, worker);
  worker.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$$add(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return !($.get$globalThis().setTimeout == null);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number" && !(value === 0) || typeof value === "boolean")
    return String(value);
  if (value == null)
    return "null";
  res = $.toString(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$$add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives__throwFormatException = function(string) {
  throw $.$$throw($.FormatException$(string));
};

$.Primitives_parseInt = function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i;
  if (handleError == null)
    handleError = $.Primitives__throwFormatException;
  $.checkString(source);
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    t1 = $.getInterceptor(match);
    if (!(match == null)) {
      if (!(t1.$index(match, 2) == null))
        return parseInt(source, 16);
      if (!(t1.$index(match, 3) == null))
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    radix = 10;
  } else {
    if (!(typeof radix === "number" && Math.floor(radix) === radix))
      throw $.$$throw($.ArgumentError$("Radix is not an integer"));
    if (radix < 2 || radix > 36)
      throw $.$$throw($.RangeError$("Radix " + $.S(radix) + " not in range 2..36"));
    t1 = $.getInterceptor(match);
    if (!(match == null)) {
      if (radix === 10 && !(t1.$index(match, 3) == null))
        return parseInt(source, 10);
      if (radix < 10 || t1.$index(match, 3) == null) {
        maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
        digitsPart = $.toLowerCase(t1.$index(match, 1));
        for (t1 = $.getInterceptor$JSStringJSArray(digitsPart), i = 0; $.CONSTANT2.$lt(i, t1.get$length(digitsPart)); ++i)
          if ($.$$gt(t1.charCodeAt$1(digitsPart, i), maxCharCode) === true)
            return handleError.call$1(source);
      }
    }
    radix = radix;
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$$eq($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$JSString($name);
  return t1.charCodeAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_newFixedList = function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.Primitives_numMicroseconds = function() {
  if (typeof window != "undefined" && window !== null) {
    var performance = window.performance;
    if (!(performance == null) && typeof performance.webkitNow == "function")
      return $.CONSTANT4.floor$0(1000 * performance.webkitNow());
  }
  return 1000 * Date.now();
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$$eq(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if ($.CONSTANT0.endsWith$1(message, "is null") === true || $.CONSTANT0.endsWith$1(message, "is undefined") === true || $.CONSTANT0.endsWith$1(message, "is null or undefined") === true || $.CONSTANT0.endsWith$1(message, "of undefined") === true || $.CONSTANT0.endsWith$1(message, "of null") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.CONSTANT1.get$iterator(keyValuePairs);
  result = $._LinkedHashMapImpl$();
  for (; iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (t1.$eq(numberOfArguments, 1) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $._currentIsolate();
  $function = function($0, $1) { return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, $0, $1); };
  closure.$identity = $function;
  return $function;
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "WebKitMutationObserver")
    return "MutationObserver";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return $name;
};

$.typeNameInOpera = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  return $name;
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "MouseScrollEvent")
    return "WheelEvent";
  if ($name === "OfflineResourceList")
    return "DOMApplicationCache";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "MouseWheelEvent")
    return "WheelEvent";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = !($name === "") && !($name === "Object") && !($name === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function($function, object, property) {
  return $function.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, $name, methods, $arguments) {
  var tag, hasOwnPropertyFunction, method, secondTag, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
  if (method == null) {
    secondTag = $.alternateTag(obj, tag);
    if (!(secondTag == null))
      method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
  }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT15));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError($name + " is not a function");} else {return Object.prototype[$name].apply(this, arguments);}};
  if ($.callHasOwnProperty(hasOwnPropertyFunction, proto, $name) !== true)
    $.defineProperty(proto, $name, method);
  return method.apply(obj, $arguments);
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function($name) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[$name];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT15)[$name];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, $name, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, $name, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined")
    $._dynamicMetadata([]);
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result == null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global) {
  var pattern, sb, e, isMultiLine, isCaseSensitive, t1, exception;
  pattern = regExp.get$pattern();
  isMultiLine = regExp.get$isMultiLine();
  isCaseSensitive = regExp.get$isCaseSensitive();
  $.checkString(pattern);
  sb = $.JsStringBuffer$("");
  if (isMultiLine === true)
    $.add(sb, "m");
  if (isCaseSensitive !== true)
    $.add(sb, "i");
  if (global === true)
    $.add(sb, "g");
  try {
    t1 = new RegExp(pattern, $.toString(sb));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$isMultiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$isCaseSensitive(), t2);
  re._re = $.regExpMakeNative(re, true);
  return re;
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, t1, $length, patternLength, startIndex, position, t2, endIndex;
  result = $.List_List(0);
  t1 = $.getInterceptor$JSStringJSArray(haystack);
  $length = t1.get$length(haystack);
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = t1.indexOf$2(haystack, needle, startIndex);
    t2 = $.getInterceptor(position);
    if (t2.$eq(position, -1) === true)
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = t2.$add(position, patternLength);
    if ($.$$eq(endIndex, $length) === true)
      break;
    else
      startIndex = t2.$eq(position, endIndex) === true ? $.$$add(startIndex, 1) : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === "string")
    return $.$$eq($.CONSTANT0.indexOf$2(receiver, other, startIndex), -1) !== true;
  else if (typeof other === "object" && other !== null && !!other.$isJSSyntaxRegExp)
    return other.hasMatch$1($.CONSTANT0.substring$1(receiver, startIndex));
  else
    return $.iterator($.allMatches(other, $.CONSTANT0.substring$1(receiver, startIndex))).moveNext$0();
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.JsStringBuffer$("");
      $length = receiver.length;
      result.add$1(to);
      for (i = 0; i < $length; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        result.add$1(receiver[i]);
        result.add$1(to);
      }
      return result.toString$0();
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), true, false), true), to);
};

$.JsStringBuffer$ = function($content) {
  var t1 = $content;
  return new $.JsStringBuffer(t1);
};

$.AsyncError$ = function(error, stackTrace) {
  return new $.AsyncError(error, stackTrace, null);
};

$.AsyncError$withCause = function(error, stackTrace, cause) {
  return new $.AsyncError(error, stackTrace, cause);
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$(), false);
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(0, null);
};

$._FutureImpl$immediate = function(value) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediate$1(value);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures) {
  var t1, t2, completer, values, i, i0;
  t1 = {};
  t2 = $.getInterceptor$JSStringJSArray(futures);
  if (t2.get$isEmpty(futures) === true)
    return $._FutureImpl$immediate($.CONSTANT16);
  completer = $._CompleterImpl$();
  t1.remaining_0 = t2.get$length(futures);
  values = $.List_List$fixedLength(t2.get$length(futures), null);
  t1.completed_1 = false;
  for (t2 = t2.get$iterator(futures), i = 0; t2.moveNext$0() === true; i = i0) {
    i0 = i + 1;
    t2.get$current().then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, completer, values, i)).catchError$1(new $._FutureImpl__FutureImpl$wait_anon0(t1, completer));
  }
  return completer.future;
};

$._ThenFuture$ = function(_onValue) {
  return new $._ThenFuture(_onValue, null, 0, null);
};

$._CatchErrorFuture$ = function(_onError, _test) {
  return new $._CatchErrorFuture(_test, _onError, null, 0, null);
};

$._SubscribeFuture$ = function(onValue, _onError) {
  return new $._SubscribeFuture(_onError, onValue, null, 0, null);
};

$._FutureWrapper$ = function(_future) {
  return new $._FutureWrapper(_future);
};

$._runUserCode = function(userCode, onSuccess, onError, cause) {
  var result, e, e0, s, exception, t1;
  result = null;
  try {
    result = userCode.call$0();
  } catch (exception) {
    t1 = $.unwrapException(exception);
    if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
      e = t1;
      return onError.call$1(e);
    } else {
      e0 = t1;
      s = $.getTraceFromException(exception);
      if (cause == null)
        onError.call$1($.AsyncError$(e0, s));
      else
        onError.call$1($.AsyncError$withCause(e0, s, cause));
    }
  }

  onSuccess.call$1(result);
};

$._cancelAndError = function(subscription, future) {
  return new $._cancelAndError_anon(subscription, future);
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !src.$isJavaScriptIndexingBehavior()))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.$isJavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = $.getInterceptor$JSStringJSArray(src); i >= srcStart; --i, --j)
      $.CONSTANT1.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t1 = $.getInterceptor$JSStringJSArray(src), j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j)
      $.CONSTANT1.$indexSet(dst, j, t1.$index(src, i));
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.IterableMixinWorkaround_contains = function(iterable, element) {
  var t1, t2;
  for (t1 = $.iterator(iterable), t2 = $.getInterceptor(element); t1.moveNext$0() === true;)
    if (t2.$eq(element, t1.get$current()) === true)
      return true;
  return false;
};

$.IterableMixinWorkaround_removeAll = function(collection, elementsToRemove) {
  var t1;
  for (t1 = $.CONSTANT1.get$iterator(elementsToRemove); t1.moveNext$0() === true;)
    collection.remove$1(t1.get$current());
};

$.IterableMixinWorkaround_removeAllList = function(collection, elementsToRemove) {
  $.removeMatching(collection, $.contains0(typeof elementsToRemove === "object" && elementsToRemove !== null && !!elementsToRemove.$isSet ? elementsToRemove : $.toSet(elementsToRemove)));
};

$.IterableMixinWorkaround_removeMatching = function(collection, test) {
  var elementsToRemove, t1, t2;
  elementsToRemove = [];
  for (t1 = $.iterator(collection); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (test.call$1(t2) === true)
      elementsToRemove.push(t2);
  }
  collection.removeAll$1(elementsToRemove);
};

$.IterableMixinWorkaround_removeMatchingList = function(list, test) {
  var retained, $length, i, element, t1, t2, t3;
  if (typeof list !== "object" || list === null || (list.constructor !== Array || !!list.immutable$list) && !list.$isJavaScriptIndexingBehavior())
    return $.IterableMixinWorkaround_removeMatchingList$bailout(1, list, test);
  retained = [];
  $length = list.length;
  for (i = 0; i < $length; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (test.call$1(element) !== true)
      retained.push(element);
    if ($length !== list.length)
      throw $.$$throw($.ConcurrentModificationError$(list));
  }
  t1 = retained.length;
  if (t1 === $length)
    return;
  for (t2 = list.length, i = 0; i < t1; ++i) {
    t3 = retained[i];
    if (i >= t2)
      throw $.ioore(i);
    list[i] = t3;
  }
  $.CONSTANT1.set$length(list, t1);
};

$.IterableMixinWorkaround_removeMatchingList$bailout = function(state0, list, test) {
  var retained, $length, i, element, t1;
  retained = [];
  $length = list.length;
  for (i = 0; i < $length; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (test.call$1(element) !== true)
      retained.push(element);
    if ($length !== list.length)
      throw $.$$throw($.ConcurrentModificationError$(list));
  }
  if (retained.length === $length)
    return;
  for (i = 0; t1 = retained.length, i < t1; ++i)
    $.CONSTANT1.$indexSet(list, i, retained[i]);
  $.CONSTANT1.set$length(list, t1);
};

$.IterableMixinWorkaround_sortList = function(l, compare) {
  if (compare == null)
    compare = $.Comparable_compare;
  $.Sort__doSort(l, 0, l.length - 1, compare);
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.CONSTANT2.$tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, $length) {
  return $.$$and($.$$add(currentProbe, numberOfProbes), $.$$sub($length, 1));
};

$._HashMapImplKeyIterable$ = function(_map) {
  return new $._HashMapImplKeyIterable(_map);
};

$._HashMapImplValueIterable$ = function(_map) {
  return new $._HashMapImplValueIterable(_map);
};

$._HashMapImplKeyIterator$ = function(map) {
  return new $._HashMapImplKeyIterator(map, -1, null);
};

$._HashMapImplValueIterator$ = function(map) {
  return new $._HashMapImplValueIterator(map, -1, null);
};

$._HashMapImplIndexIterator$ = function(map) {
  return new $._HashMapImplIndexIterator(map, -1, null);
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.Queue_Queue = function() {
  return $.DoubleLinkedQueue$();
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._DoubleLinkedQueueIterator$ = function(sentinel) {
  return new $._DoubleLinkedQueueIterator(sentinel, sentinel, null);
};

$.HashSet$ = function() {
  return new $.HashSet($._HashMapImpl$());
};

$.HashSet_HashSet$from = function(other) {
  var set, t1;
  set = $.HashSet$();
  for (t1 = $.iterator(other); t1.moveNext$0() === true;)
    set.add$1(t1.get$current());
  return set;
};

$._HashSetIterator$ = function(set) {
  return new $._HashSetIterator($.CONSTANT1.get$iterator(set._backingMap._keys));
};

$.MappedIterable$ = function(_iterable, _f) {
  return new $.MappedIterable(_iterable, _f);
};

$.MappedIterator$ = function(_iterator, _f) {
  return new $.MappedIterator(null, _iterator, _f);
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(list, list.length, -1, null);
};

$.Sort__doSort = function(a, left, right, compare) {
  if (right - left <= 32)
    $.Sort_insertionSort_(a, left, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, right, compare);
};

$.Sort_insertionSort_ = function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.$isJavaScriptIndexingBehavior())
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t2 = $.$$gt(compare.call$2(a[t1], el), 0) === true;
        t1 = t2;
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
};

$.Sort_insertionSort_$bailout = function(state0, a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t2 = $.$$gt(compare.call$2(a[t1], el), 0) === true;
        t1 = t2;
      } else
        t1 = false;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= a.length)
        throw $.ioore(j0);
      $.CONSTANT1.$indexSet(a, j, a[j0]);
      j = j0;
    }
    $.CONSTANT1.$indexSet(a, j, el);
  }
};

$.Sort__dualPivotQuicksort = function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, t2, less, great, k, ak, comp, t3, great0, less0, t4;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.$isJavaScriptIndexingBehavior())
    return $.Sort__dualPivotQuicksort$bailout(1, a, left, right, compare);
  sixth = $.CONSTANT2.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.CONSTANT2.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$$gt(compare.call$2(el1, el2), 0) === true) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$$gt(compare.call$2(el1, el3), 0) === true) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el1, el4), 0) === true) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el3, el4), 0) === true) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el5), 0) === true) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left < 0 || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right < 0 || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  t1 = $.$$eq(compare.call$2(el2, el4), 0) === true;
  if (t1)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t2 = $.getInterceptor(comp);
      if (t2.$eq(comp, 0) === true)
        continue;
      if (t2.$lt(comp, 0) === true) {
        if (k !== less) {
          t2 = a.length;
          if (less >= t2)
            throw $.ioore(less);
          t3 = a[less];
          if (k >= t2)
            throw $.ioore(k);
          a[k] = t3;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t2 = $.getInterceptor$JSNumber(comp);
          if (t2.$gt(comp, 0) === true) {
            --great;
            continue;
          } else {
            t2 = t2.$lt(comp, 0);
            t3 = a.length;
            great0 = great - 1;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              t2 = a[less];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              less0 = less + 1;
              if (great >= t3)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              t2 = a[great];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$$lt(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t2 = a.length;
          if (less >= t2)
            throw $.ioore(less);
          t3 = a[less];
          if (k >= t2)
            throw $.ioore(k);
          a[k] = t3;
          a[less] = ak;
        }
        ++less;
      } else if ($.$$gt(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$$gt(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t2 = $.$$lt(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t3 = a.length;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              t2 = a[less];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              less0 = less + 1;
              if (great >= t3)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              t2 = a[great];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
  t2 = less - 1;
  t3 = a.length;
  if (t2 >= t3)
    throw $.ioore(t2);
  t4 = a[t2];
  if (left >= t3)
    throw $.ioore(left);
  a[left] = t4;
  a[t2] = el2;
  t2 = great + 1;
  if (t2 < 0 || t2 >= t3)
    throw $.ioore(t2);
  t4 = a[t2];
  if (right >= t3)
    throw $.ioore(right);
  a[right] = t4;
  a[t2] = el4;
  $.Sort__doSort(a, left, less - 2, compare);
  $.Sort__doSort(a, great + 2, right, compare);
  if (t1)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!($.$$eq(compare.call$2(a[less], el2), 0) === true))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!($.$$eq(compare.call$2(a[great], el4), 0) === true))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$$eq(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$$eq(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$$eq(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$$lt(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1 === true) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
    $.Sort__doSort(a, less, great, compare);
  } else
    $.Sort__doSort(a, less, great, compare);
};

$.Sort__dualPivotQuicksort$bailout = function(state0, a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, t3, great0, less0;
  sixth = $.CONSTANT2.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.CONSTANT2.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$$gt(compare.call$2(el1, el2), 0) === true) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$$gt(compare.call$2(el1, el3), 0) === true) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el1, el4), 0) === true) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el3, el4), 0) === true) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el5), 0) === true) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  $.CONSTANT1.$indexSet(a, index1, el1);
  $.CONSTANT1.$indexSet(a, index3, el3);
  $.CONSTANT1.$indexSet(a, index5, el5);
  if (left < 0 || left >= a.length)
    throw $.ioore(left);
  $.CONSTANT1.$indexSet(a, index2, a[left]);
  if (right < 0 || right >= a.length)
    throw $.ioore(right);
  $.CONSTANT1.$indexSet(a, index4, a[right]);
  less = left + 1;
  great = right - 1;
  t1 = $.$$eq(compare.call$2(el2, el4), 0) === true;
  if (t1)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t2 = $.getInterceptor(comp);
      if (t2.$eq(comp, 0) === true)
        continue;
      if (t2.$lt(comp, 0) === true) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.CONSTANT1.$indexSet(a, k, a[less]);
          $.CONSTANT1.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t2 = $.getInterceptor$JSNumber(comp);
          if (t2.$gt(comp, 0) === true) {
            --great;
            continue;
          } else {
            t2 = t2.$lt(comp, 0);
            t3 = a.length;
            great0 = great - 1;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              $.CONSTANT1.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.CONSTANT1.$indexSet(a, less, a[great]);
              $.CONSTANT1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              $.CONSTANT1.$indexSet(a, k, a[great]);
              $.CONSTANT1.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$$lt(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.CONSTANT1.$indexSet(a, k, a[less]);
          $.CONSTANT1.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$$gt(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$$gt(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t2 = $.$$lt(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t3 = a.length;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              $.CONSTANT1.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.CONSTANT1.$indexSet(a, less, a[great]);
              $.CONSTANT1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              $.CONSTANT1.$indexSet(a, k, a[great]);
              $.CONSTANT1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
  t2 = less - 1;
  if (t2 >= a.length)
    throw $.ioore(t2);
  $.CONSTANT1.$indexSet(a, left, a[t2]);
  $.CONSTANT1.$indexSet(a, t2, el2);
  t2 = great + 1;
  if (t2 < 0 || t2 >= a.length)
    throw $.ioore(t2);
  $.CONSTANT1.$indexSet(a, right, a[t2]);
  $.CONSTANT1.$indexSet(a, t2, el4);
  $.Sort__doSort(a, left, less - 2, compare);
  $.Sort__doSort(a, great + 2, right, compare);
  if (t1)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!($.$$eq(compare.call$2(a[less], el2), 0) === true))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!($.$$eq(compare.call$2(a[great], el4), 0) === true))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$$eq(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.CONSTANT1.$indexSet(a, k, a[less]);
          $.CONSTANT1.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$$eq(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$$eq(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$$lt(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1 === true) {
              if (less >= t2)
                throw $.ioore(less);
              $.CONSTANT1.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.CONSTANT1.$indexSet(a, less, a[great]);
              $.CONSTANT1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              $.CONSTANT1.$indexSet(a, k, a[great]);
              $.CONSTANT1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
    $.Sort__doSort(a, less, great, compare);
  } else
    $.Sort__doSort(a, less, great, compare);
};

$.ToString_collectionToString = function(c) {
  var result = $.JsStringBuffer$("");
  $.ToString__emitCollection(c, result, $.List_List(0));
  return result.toString$0();
};

$.ToString__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.$isList());
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, t2);
  for (t2 = $.iterator(c), first = true; t2.moveNext$0() === true; first = false) {
    t4 = t2.get$current();
    if (!first)
      t3.add$1(result, ", ");
    $.ToString__emitObject(t4, result, visiting);
  }
  t3.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.$isCollection()))
    if ($.ToString__containsRef(visiting, o) === true)
      $.add(result, typeof o === "object" && o !== null && (o.constructor === Array || o.$isList()) ? "[...]" : "{...}");
    else
      $.ToString__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && o.$isMap())
    if ($.ToString__containsRef(visiting, o) === true)
      $.add(result, "{...}");
    else
      $.ToString__emitMap(o, result, visiting);
  else
    $.add(result, o);
};

$.ToString__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.iterator(c); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.ToString_mapToString = function(m) {
  var result = $.JsStringBuffer$("");
  $.ToString__emitMap(m, result, $.List_List(0));
  return result.toString$0();
};

$.ToString__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  $.forEach(m, new $.ToString__emitMap_anon(t1, result, visiting));
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$.Comparable_compare = function(a, b) {
  return $.compareTo(a, b);
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString(object);
  if (typeof object === "string")
    return "\"" + $.S($.replaceAll($.replaceAll($.replaceAll($.CONSTANT0.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"")) + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.Expect_equals = function(expected, actual, reason) {
  var msg;
  if ($.$$eq(expected, actual) === true)
    return;
  msg = reason == null ? "" : ", '" + $.S(reason) + "'";
  $.Expect__fail("Expect.equals(expected: <" + $.S(expected) + ">, actual: <" + $.S(actual) + ">" + msg + ") fails.");
};

$.Expect__fail = function(message) {
  throw $.$$throw($.ExpectException$(message));
};

$.ExpectException$ = function(message) {
  return new $.ExpectException(message);
};

$.int_parse = function(source, onError, radix) {
  return $.Primitives_parseInt(source, radix, onError);
};

$.List_List = function($length) {
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  return new Array($length);
};

$.List_List$fixedLength = function($length, fill) {
  var result, t1, i;
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  result = $.Primitives_newFixedList($length);
  if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !result.$isJavaScriptIndexingBehavior())
    return $.List_List$fixedLength$bailout(1, $length, fill, result);
  if ($.$$eq($length, 0) !== true && !(fill == null))
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
};

$.List_List$fixedLength$bailout = function(state0, $length, fill, result) {
  var t1, i;
  if ($.$$eq($length, 0) !== true && !(fill == null))
    for (t1 = $.getInterceptor$JSStringJSArray(result), i = 0; $.CONSTANT2.$lt(i, t1.get$length(result)); ++i)
      t1.$indexSet(result, i, fill);
  return result;
};

$.List_List$from = function(other) {
  var list, t1;
  list = $.List_List(0);
  for (t1 = $.iterator(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  return list;
};

$.Map_Map = function() {
  return $._HashMapImpl$();
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$._StopwatchImpl$ = function() {
  return new $._StopwatchImpl(null, null);
};

$._StopwatchImpl__frequency = function() {
  return 1000000;
};

$._StopwatchImpl__now = function() {
  return $.Primitives_numMicroseconds();
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = "-moz-";
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = "-ms-";
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = "-o-";
    else
      $._cachedBrowserPrefix = "-webkit-";
  return $._cachedBrowserPrefix;
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, -1, null);
};

$.Element_Element$tag = function(tag) {
  return $._ElementFactoryProvider_createElement_tag(tag);
};

$._ElementFactoryProvider_createElement_tag = function(tag) {
  return document.createElement(tag);
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$._Device_isOpera = function() {
  return $.contains($._Device_userAgent(), "Opera", 0);
};

$._Device_isIE = function() {
  return $._Device_isOpera() !== true && $.contains($._Device_userAgent(), "MSIE", 0) === true;
};

$._Device_isFirefox = function() {
  return $.contains($._Device_userAgent(), "Firefox", 0);
};

$._EventStream$ = function(_target, _eventType, _useCapture) {
  return new $._EventStream(_target, _eventType, _useCapture);
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture);
  return t1;
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._convertNativeToDart_EventTarget = function(e) {
  if ("setInterval" in e)
    return $._DOMWindowCrossFrame__createSafe(e);
  else
    return e;
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  if (w === window)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.length(array), -1, null);
};

$.convertDartToNative_Dictionary = function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  $.forEach(dict, new $.convertDartToNative_Dictionary_anon(object));
  return object;
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior()))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, t2, i;
  t1 = $.getInterceptor$JSStringJSArray(a);
  t2 = $.getInterceptor$JSNumber(startIndex);
  if (t2.$ge(startIndex, t1.get$length(a)) === true)
    return -1;
  if (t2.$lt(startIndex, 0) === true)
    startIndex = 0;
  for (i = startIndex; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, endIndex) === true; i = t2.$add(i, 1))
    if ($.$$eq(t1.$index(a, i), element) === true)
      return i;
  return -1;
};

$.Lists_getRange = function(a, start, $length, accumulator) {
  var end, i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior()))
    return $.Lists_getRange$bailout(1, a, start, $length, accumulator);
  if ($length < 0)
    throw $.$$throw($.ArgumentError$("length"));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  end = start + $length;
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    if (i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, $length, accumulator) {
  var end, t1, i;
  if ($length < 0)
    throw $.$$throw($.ArgumentError$("length"));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  end = start + $length;
  t1 = $.getInterceptor$JSStringJSArray(a);
  if ($.CONSTANT2.$gt(end, t1.get$length(a)))
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i)
    accumulator.push(t1.$index(a, i));
  return accumulator;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$.min = function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.CONSTANT14.get$isNegative(b) === true || $.CONSTANT14.get$isNaN(b) === true)
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.max = function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return a + b;
        if ($.CONSTANT14.get$isNaN(b) === true)
          return b;
        return a;
      }
      if (b === 0 && $.CONSTANT4.get$isNegative(a) === true)
        return b;
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.sqrt = function(x) {
  return Math.sqrt($.checkNum(x));
};

$.ClickedFixture$ = function() {
  return new $.ClickedFixture(null);
};

$.Common_shuffle = function(items) {
  var i, n, t1, temp;
  if (typeof items !== "object" || items === null || (items.constructor !== Array || !!items.immutable$list) && !items.$isJavaScriptIndexingBehavior())
    return $.Common_shuffle$bailout(1, items);
  for (i = items.length - 1; i > 0; --i) {
    n = $.CONSTANT5.nextInt$1(items.length);
    t1 = items.length;
    if (i >= t1)
      throw $.ioore(i);
    temp = items[i];
    if (n !== (n | 0))
      throw $.iae(n);
    if (n < 0 || n >= t1)
      throw $.ioore(n);
    items[i] = items[n];
    items[n] = temp;
  }
  return items;
};

$.Common_shuffle$bailout = function(state0, items, t1, i) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = $.getInterceptor$JSStringJSArray(items);
      i = $.$$sub(t1.get$length(items), 1);
    case 2:
      var t2, n, temp;
      state0 = 0;
      for (; t2 = $.getInterceptor$JSNumber(i), t2.$gt(i, 0) === true; i = t2.$sub(i, 1)) {
        n = $.CONSTANT5.nextInt$1(t1.get$length(items));
        temp = t1.$index(items, i);
        t1.$indexSet(items, i, t1.$index(items, n));
        t1.$indexSet(items, n, temp);
      }
      return items;
  }
};

$.Critter$ = function(radius, position) {
  var t1 = new $.Critter(1, false, null, null, null, null, null, null, null, null, null, 0, false);
  t1.GameObject$0();
  t1.Critter$2(radius, position);
  return t1;
};

$.DragHandler$ = function() {
  return new $.DragHandler(null, null, null, null, false, false, false, false);
};

$.DynamicBox$ = function(size, position, restitution, density, angle, friction) {
  var t1 = new $.DynamicBox(null, null, false, null, null, null, null, null, null, null, 0, false);
  t1.GameObject$0();
  t1.DynamicBox$6(size, position, restitution, density, angle, friction);
  return t1;
};

$.EndSolver$ = function(endPoints, spawnPoint, critters, game) {
  return new $.EndSolver(endPoints, critters, spawnPoint, game);
};

$.Game$ = function() {
  return new $.Game(null, null, null, 0, 0, null, null, null, null, null, null, null, null, null, null, null, 0, null, null, null, null, null, null, 1, null, false, ["nice job!", "congratulations!", "done!", "great job!"]);
};

$.Game_convertCanvasToWorld = function(canvasVectorOrPoint) {
  return $.Vector$($.$$div($.$$sub(canvasVectorOrPoint.x, $.Game_canvasCenter.get$x()), 10), $.$$div($.$$sub($.Game_canvasCenter.get$y(), canvasVectorOrPoint.y), 10));
};

$.Game_convertWorldToCanvas = function(worldVectorOrPoint) {
  worldVectorOrPoint.set$x($.$$add($.$$mul(worldVectorOrPoint.get$x(), 10), $.Game_canvasCenter.get$x()));
  worldVectorOrPoint.set$y($.$$add($.$$mul($.$$negate(worldVectorOrPoint.get$y()), 10), $.Game_canvasCenter.get$y()));
};

$.main = function() {
  var game = $.Game$();
  game.init$0();
  game.run$0();
};

$.GameEventHandlers$ = function(game) {
  return new $.GameEventHandlers($.DragHandler$(), game);
};

$.Levels__getLevels = function() {
  return [$.makeLiteralMap(["id", 0, "boxes", [[-40, 10, 3, 3, 0, 0.1, 1, "crate2.jpg"], [-20, 10, 3, 3, 60, 0.1, 1, "crate2.jpg"], [0, 10, 3, 3, 0.5, 0.1, 1, "crate2.jpg"], [3, 5, 3, 3, 0.5, 0.1, 1, "crate2.jpg"], [-3, 5, 3, 3, 0.5, 0.1, 1, "crate2.jpg"], [10, -10, 3, 3, 30, 0.1, 1, "crate.png"], [40, -10, 5, 5, 0, 0.1, 1, "crate.png"], [5, -15, 8, 4, 0, 0.1, 0.6, "box2.jpg"], [25, 0, 8, 4, 90, 0.1, 0.6, "box2.jpg"], [-5, -15, 8, 4, 0, 0.1, 0.6, "box2.jpg"], [-25, -15, 8, 4, 90, 0.1, 0.6, "box2.jpg"], [20, 0, 6, 3, 0, 0.1, 1, "stone2.jpg"], [30, 10, 6, 3, 90, 0.1, 1, "stone2.jpg"], [-30, 15, 10, 1, 0, 0.1, 1, "log2.jpg"]], "grounds", [[0, -25, 3, 15, 0], [0, -10, 10, 3, 0]], "background", "level1.jpg", "end", [[-16, -34], [-3.1, -34], [-3.1, -24]], "critters", $.makeLiteralMap(["spawn_point", [27, 15], "count", 3, "seed", 123]), "sun_x", -25]), $.makeLiteralMap(["id", 1, "boxes", [[-40, 10, 3, 3, 0, 0.1, 1, "crate2.jpg"], [-35, 12, 3, 3, 0, 0.1, 1, "crate2.jpg"], [-30, 6, 3, 3, 0, 0.1, 1, "crate2.jpg"], [-10, 10, 3, 3, 0.5, 0.1, 1, "crate2.jpg"], [0, 10, 5, 5, 0, 0.1, 1, "crate.png"], [30, 10, 8, 4, 90, 0.1, 1, "box2.jpg"], [30, -25, 8, 4, 90, 0.1, 1, "box2.jpg"], [3, 15, 10, 1, 0, 0.1, 1, "log2.jpg"], [-20, -15, 10, 1, 0, 0.1, 1, "log2.jpg"], [-40, -20, 10, 1, 0, 0.1, 1, "log2.jpg"]], "grounds", [[-2, -13, 20, 2, -10], [30, 0, 20, 2, -10], [-45, 15, 10, 2, -10]], "background", "level2.jpg", "end", [[-48.5, -34], [-48.5, -25], [-35, -34]], "critters", $.makeLiteralMap(["spawn_point", [27, 19], "count", 5, "seed", 321]), "sun_x", -20]), $.makeLiteralMap(["id", 2, "boxes", [[-35, 12, 3, 3, 0, 0.1, 1, "crate2.jpg"], [0, 10, 3, 3, 0, 0.1, 1, "crate2.jpg"], [0, 10, 3, 3, 0, 0.1, 1, "crate2.jpg"], [-10, 10, 3, 3, 0.5, 0.1, 1, "crate2.jpg"], [-20, -20, 8, 4, 90, 0.1, 1, "box2.jpg"], [-17, 4, 8, 4, 90, 0.1, 1, "box2.jpg"], [-23, 10, 8, 4, 90, 0.1, 1, "box2.jpg"], [-40, -20, 10, 1, 0, 0.1, 1, "log2.jpg"], [35, 6, 6, 3, 0, 0.1, 1, "stone2.jpg"], [30, 10, 6, 3, 40, 0.1, 1, "stone2.jpg"], [35, 0, 6, 3, 0, 0.1, 1, "stone2.jpg"], [27, -5, 6, 3, 100, 0.1, 1, "stone2.jpg"]], "grounds", [[0, -27, 3, 15, 0], [15, -27, 3, 15, 0], [-25, -27, 3, 15, 0], [-25, 28, 3, 7, 0], [45, 15, 10, 2, 10]], "background", "level3.jpg", "end", [[-21.8, -34], [-3, -34], [-12, -28]], "critters", $.makeLiteralMap(["spawn_point", [35, 22], "count", 3, "seed", 321]), "sun_x", 10])];
};

$.LightEngine$ = function(elm, groundLevel) {
  var t1 = new $.LightEngine(null, null, null, null, null, null, null, null);
  t1.LightEngine$2(elm, groundLevel);
  return t1;
};

$.StaticBox$ = function(size, position, angle) {
  var t1, t2;
  t1 = $ === angle;
  if (t1)
    angle = null;
  t2 = new $.StaticBox(null, null, null, null, null, null, null, null, 0, false);
  t2.GameObject$0();
  t2.StaticBox$3(size, position, angle, !t1);
  return t2;
};

$.CanvasDraw$ = function(viewport, ctx) {
  var t1 = new $.CanvasDraw(ctx, 1, viewport);
  t1.CanvasDraw$2(viewport, ctx);
  return t1;
};

$.ContactFilter$ = function() {
  return new $.ContactFilter();
};

$.ContactImpulse$ = function() {
  return new $.ContactImpulse($.List_List(2), $.List_List(2));
};

$.AxisAlignedBox$ = function(lowerBound, upperBound) {
  var t1 = new $.AxisAlignedBox(lowerBound, upperBound);
  t1.AxisAlignedBox$2(lowerBound, upperBound);
  return t1;
};

$.AxisAlignedBox_testOverlap = function(a, b) {
  return !($.$$gt(b.get$lowerBound().get$x(), a.get$upperBound().get$x()) === true || $.$$gt(b.get$lowerBound().get$y(), a.get$upperBound().get$y()) === true || $.$$gt(a.get$lowerBound().get$x(), b.get$upperBound().get$x()) === true || $.$$gt(a.get$lowerBound().get$y(), b.get$upperBound().get$y()) === true);
};

$.Collision$_construct = function(pool) {
  var t1 = $.DistanceInput$();
  t1 = new $.Collision(pool, $.SimplexCache$(), t1, $.DistanceOutput$(), $.EdgeResults$(), $.EdgeResults$(), $.List_List(2), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.List_List(2), $.List_List(2));
  t1.Collision$_construct$1(pool);
  return t1;
};

$.Collision_clipSegmentToLine = function(vOut, vIn, norm, offset) {
  var t1, t2, distance0, t3, distance1, numOut, numOut0, interp, vin;
  t1 = $.getInterceptor$JSStringJSArray(vIn);
  t2 = t1.$index(vIn, 0).get$v();
  distance0 = $.$$sub($.$$add($.$$mul(norm.x, t2.get$x()), $.$$mul(norm.y, t2.get$y())), offset);
  t3 = t1.$index(vIn, 1).get$v();
  distance1 = $.$$sub($.$$add($.$$mul(norm.x, t3.get$x()), $.$$mul(norm.y, t3.get$y())), offset);
  t2 = $.getInterceptor$JSNumber(distance0);
  if (t2.$le(distance0, 0) === true) {
    if (0 >= vOut.length)
      throw $.ioore(0);
    vOut[0].setFrom$1(t1.$index(vIn, 0));
    numOut = 1;
  } else
    numOut = 0;
  if ($.$$le(distance1, 0) === true) {
    numOut0 = numOut + 1;
    if (numOut >= vOut.length)
      throw $.ioore(numOut);
    vOut[numOut].setFrom$1(t1.$index(vIn, 1));
    numOut = numOut0;
  }
  if ($.$$lt(t2.$mul(distance0, distance1), 0) === true) {
    interp = t2.$div(distance0, t2.$sub(distance0, distance1));
    if (numOut >= vOut.length)
      throw $.ioore(numOut);
    vOut[numOut].get$v().setFrom$1(t1.$index(vIn, 1).get$v()).subLocal$1(t1.$index(vIn, 0).get$v()).mulLocal$1(interp).addLocal$1(t1.$index(vIn, 0).get$v());
    vin = t2.$gt(distance0, 0) === true ? t1.$index(vIn, 0) : t1.$index(vIn, 1);
    if (numOut >= vOut.length)
      throw $.ioore(numOut);
    vOut[numOut].get$id().setFrom$1(vin.get$id());
    ++numOut;
  }
  return numOut;
};

$.ClipVertex$ = function() {
  return new $.ClipVertex($.Vector$(0, 0), $.ContactID$());
};

$.EdgeResults$ = function() {
  return new $.EdgeResults(0, 0);
};

$.ContactID$ = function() {
  return new $.ContactID($.Features$());
};

$.Distance$_construct = function() {
  return new $.Distance(0, 0, 20, $.Simplex$(), $.List_List(3), $.List_List(3), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0));
};

$.DistanceInput$ = function() {
  return new $.DistanceInput($.DistanceProxy$(), $.DistanceProxy$(), $.Transform$(), $.Transform$(), false);
};

$.DistanceOutput$ = function() {
  return new $.DistanceOutput($.Vector$(0, 0), $.Vector$(0, 0), null, null);
};

$.DistanceProxy$ = function() {
  var t1 = new $.DistanceProxy($.List_List(8), 0, 0);
  t1.DistanceProxy$0();
  return t1;
};

$.Features$ = function() {
  return new $.Features(0, 0, 0, 0);
};

$.Manifold$ = function() {
  var t1 = new $.Manifold($.List_List(2), $.Vector$(0, 0), $.Vector$(0, 0), null, 0);
  t1.Manifold$0();
  return t1;
};

$.ManifoldPoint$ = function() {
  return new $.ManifoldPoint($.Vector$(0, 0), 0, 0, $.ContactID$());
};

$.Simplex$ = function() {
  var t1, t2, t3, t4, t5, t6;
  t1 = $.SimplexVertex$();
  t2 = $.SimplexVertex$();
  t3 = $.SimplexVertex$();
  t4 = $.List_List(3);
  t5 = $.Vector$(0, 0);
  t6 = $.Vector$(0, 0);
  t6 = new $.Simplex(t1, t2, t3, t4, 0, t5, $.Vector$(0, 0), t6, $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0));
  t6.Simplex$0();
  return t6;
};

$.SimplexCache$ = function() {
  var t1 = new $.SimplexCache(0, 0, $.List_List(3), $.List_List(3));
  t1.SimplexCache$0();
  return t1;
};

$.SimplexVertex$ = function() {
  return new $.SimplexVertex($.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), 0, 0, 0);
};

$.TimeOfImpact$_construct = function(argPool) {
  var t1 = new $.TimeOfImpact($.SimplexCache$(), $.DistanceInput$(), $.Transform$(), $.Transform$(), $.DistanceOutput$(), $.SeparationFunction$(), $.List_List(2), $.Sweep$(), $.Sweep$(), argPool);
  t1.TimeOfImpact$_construct$1(argPool);
  return t1;
};

$.SeparationFunction$ = function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18;
  t1 = $.DistanceProxy$();
  t2 = $.DistanceProxy$();
  t3 = $.Vector$(0, 0);
  t4 = $.Vector$(0, 0);
  t5 = $.Sweep$();
  t6 = $.Sweep$();
  t7 = $.Vector$(0, 0);
  t8 = $.Vector$(0, 0);
  t9 = $.Vector$(0, 0);
  t10 = $.Vector$(0, 0);
  t11 = $.Vector$(0, 0);
  t12 = $.Vector$(0, 0);
  t13 = $.Vector$(0, 0);
  t14 = $.Vector$(0, 0);
  t15 = $.Vector$(0, 0);
  t16 = $.Vector$(0, 0);
  t17 = $.Transform$();
  t18 = $.Transform$();
  return new $.SeparationFunction(t1, t2, 0, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, $.Vector$(0, 0), $.Vector$(0, 0), t16, t17, t18);
};

$.TimeOfImpactInput$ = function() {
  return new $.TimeOfImpactInput($.DistanceProxy$(), $.DistanceProxy$(), $.Sweep$(), $.Sweep$(), 0);
};

$.TimeOfImpactOutput$ = function() {
  return new $.TimeOfImpactOutput(0, 0);
};

$.WorldManifold$ = function() {
  var t1, t2, t3;
  t1 = $.Vector$(0, 0);
  t2 = $.Vector$(0, 0);
  t3 = $.Vector$(0, 0);
  t3 = new $.WorldManifold(t1, $.List_List(2), t2, t3);
  t3.WorldManifold$0();
  return t3;
};

$.BroadPhase$ = function() {
  var t1 = new $.BroadPhase($.DynamicTree$(), 0, null, null, 16, 0, null);
  t1.BroadPhase$0();
  return t1;
};

$.DynamicTree$ = function() {
  var t1, t2, t3;
  t1 = $.List_List(4);
  t2 = $.Vector$(0, 0);
  t3 = $.AxisAlignedBox$(null, null);
  t3 = new $.DynamicTree(null, 0, null, 0, 0, $.Queue_Queue(), t1, 0, t2, t3, $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0));
  t3.DynamicTree$0();
  return t3;
};

$.DynamicTreeNode$_construct = function() {
  return new $.DynamicTreeNode($.AxisAlignedBox$(null, null), null, null, null, null, null, null);
};

$.Pair$ = function() {
  return new $.Pair(null, null);
};

$.CircleShape$ = function() {
  return new $.CircleShape($.Vector$(0, 0), 0, 0);
};

$.CircleShape$copy = function(other) {
  var t1, t2;
  t1 = other.type;
  t2 = other.radius;
  return new $.CircleShape($.Vector$copy(other.position), t1, t2);
};

$.MassData$ = function() {
  return new $.MassData(0, $.Vector$(0, 0), 0);
};

$.PolygonShape$ = function() {
  var t1, t2;
  t1 = $.List_List(8);
  t2 = $.List_List(8);
  t2 = new $.PolygonShape($.Vector$(0, 0), t1, t2, 0, 1, 0.01);
  t2.PolygonShape$0();
  return t2;
};

$.PolygonShape$copy = function(other) {
  var t1, t2, t3, t4;
  t1 = other.radius;
  t2 = other.vertexCount;
  t3 = $.List_List(8);
  t4 = $.List_List(8);
  t1 = new $.PolygonShape($.Vector$copy(other.centroid), t3, t4, t2, 1, t1);
  t1.PolygonShape$copy$1(other);
  return t1;
};

$.CanvasViewportTransform$ = function(_extents, _center) {
  var t1 = new $.CanvasViewportTransform(null, $.Vector$copy(_extents), 20, $.Vector$copy(_center));
  t1.CanvasViewportTransform$2(_extents, _center);
  return t1;
};

$.MathBox_distanceSquared = function(v1, v2) {
  var dx, dy;
  dx = $.$$sub(v1.get$x(), v2.get$x());
  dy = $.$$sub(v1.get$y(), v2.get$y());
  return $.$$add($.$$mul(dx, dx), $.$$mul(dy, dy));
};

$.Matrix22$ = function(c1, c2) {
  var t1 = new $.Matrix22(null, null);
  t1.Matrix22$2(c1, c2);
  return t1;
};

$.Matrix22$fromAngle = function(angle) {
  var t1 = new $.Matrix22($.Vector$(0, 0), $.Vector$(0, 0));
  t1.Matrix22$fromAngle$1(angle);
  return t1;
};

$.Matrix22_mulTransMatrixAndVectorToOut = function(matrix, vector, out) {
  var outx = $.$$add($.$$mul(vector.get$x(), matrix.get$col1().get$x()), $.$$mul(vector.get$y(), matrix.get$col1().get$y()));
  out.y = $.$$add($.$$mul(vector.get$x(), matrix.get$col2().get$x()), $.$$mul(vector.get$y(), matrix.get$col2().get$y()));
  out.x = outx;
};

$.Matrix22_mulMatrixAndVectorToOut = function(matrix, vector, out) {
  var tempy = $.$$add($.$$mul(matrix.get$col1().get$y(), vector.get$x()), $.$$mul(matrix.get$col2().get$y(), vector.get$y()));
  out.set$x($.$$add($.$$mul(matrix.get$col1().get$x(), vector.get$x()), $.$$mul(matrix.get$col2().get$x(), vector.get$y())));
  out.set$y(tempy);
};

$.Settings_mixRestitution = function(restitution1, restitution2) {
  return $.$$gt(restitution1, restitution2) === true ? restitution1 : restitution2;
};

$.Sweep$ = function() {
  return new $.Sweep($.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), 0, 0);
};

$.Transform$ = function() {
  return new $.Transform($.Vector$(0, 0), $.Matrix22$(null, null));
};

$.Transform_mulToOut = function(transform, vector, out) {
  var tempY = $.$$add($.$$add(transform.get$position().get$y(), $.$$mul(transform.get$rotation().get$col1().get$y(), vector.get$x())), $.$$mul(transform.get$rotation().get$col2().get$y(), vector.get$y()));
  out.set$x($.$$add($.$$add(transform.get$position().get$x(), $.$$mul(transform.get$rotation().get$col1().get$x(), vector.get$x())), $.$$mul(transform.get$rotation().get$col2().get$x(), vector.get$y())));
  out.set$y(tempY);
};

$.Transform_mulTransToOut = function(T, v, out) {
  var v1x, v1y, t1, b, b1, t2, tempy;
  v1x = $.$$sub(v.get$x(), T.get$position().get$x());
  v1y = $.$$sub(v.get$y(), T.get$position().get$y());
  t1 = T.get$rotation();
  b = t1.get$col1();
  b1 = t1.get$col2();
  t1 = $.getInterceptor$JSNumber(v1x);
  t2 = $.getInterceptor$JSNumber(v1y);
  tempy = $.$$add(t1.$mul(v1x, b1.get$x()), t2.$mul(v1y, b1.get$y()));
  out.set$x($.$$add(t1.$mul(v1x, b.get$x()), t2.$mul(v1y, b.get$y())));
  out.set$y(tempy);
};

$.Vector$ = function(x, y) {
  return new $.Vector(x, y);
};

$.Vector$copy = function(other) {
  return new $.Vector(other.get$x(), other.get$y());
};

$.Vector_dot = function(one, two) {
  return $.$$add($.$$mul(one.get$x(), two.get$x()), $.$$mul(one.get$y(), two.get$y()));
};

$.Vector_crossNumAndVectorToOut = function(s, a, out) {
  var t1, tempY;
  t1 = $.getInterceptor$JSNumber(s);
  tempY = t1.$mul(s, a.x);
  out.x = $.$$mul(t1.$negate(s), a.y);
  out.y = tempY;
};

$.Vector_crossVectorAndNumToOut = function(a, s, out) {
  var t1, t2;
  t1 = a.get$x();
  if (typeof t1 !== "number")
    throw $.iae(t1);
  t2 = a.get$y();
  if (typeof t2 !== "number")
    throw $.iae(t2);
  out.x = s * t2;
  out.y = -s * t1;
};

$.Body$ = function(bd, world) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
  t1 = $.Transform$();
  t2 = $.Sweep$();
  t3 = $.Vector$copy(bd.get$linearVelocity());
  t4 = bd.get$linearDamping();
  t5 = bd.get$angularDamping();
  t6 = $.Vector$(0, 0);
  t7 = bd.get$userData();
  t8 = $.FixtureDef$();
  t9 = $.MassData$();
  t10 = $.Transform$();
  t11 = $.Vector$(0, 0);
  t12 = $.Vector$(0, 0);
  t12 = new $.Body(world, 0, null, 0, t7, t3, 0, null, null, null, null, null, 0, null, t6, 0, 0, 0, t4, t5, bd.get$type(), null, t1, t2, t8, t9, t10, t11, t12);
  t12.Body$2(bd, world);
  return t12;
};

$.BodyDef$ = function() {
  return new $.BodyDef(0, 0, null, $.Vector$(0, 0), $.Vector$(0, 0), 0, false, null, false, true, 0, 0, true, true);
};

$.ContactManager$ = function(argPool) {
  var t1 = $.ContactFilter$();
  return new $.ContactManager($.BroadPhase$(), null, 0, t1, null, argPool);
};

$.Filter$ = function() {
  return new $.Filter(0, 0, 0);
};

$.Fixture$ = function() {
  return new $.Fixture($.AxisAlignedBox$(null, null), null, null, null, null, null, null, null, $.Filter$(), null, null, $.AxisAlignedBox$(null, null), $.AxisAlignedBox$(null, null));
};

$.FixtureDef$ = function() {
  var t1 = new $.FixtureDef(null, null, 0.2, 0, 0, false, $.Filter$());
  t1.FixtureDef$0();
  return t1;
};

$.Island$ = function() {
  return new $.Island(null, null, null, null, null, null, null, null, null, null, null, null, null, $.ContactSolver$(), $.Vector$(0, 0), $.ContactImpulse$());
};

$.Position$ = function() {
  var t1 = new $.Position(null, null);
  t1.Position$0();
  return t1;
};

$.Velocity$ = function() {
  var t1 = new $.Velocity(null, null);
  t1.Velocity$0();
  return t1;
};

$.TimeStep$ = function() {
  return new $.TimeStep(0, 0, 0, 0, 0, true);
};

$.World$ = function(gravity, doSleep, argPool) {
  var t1 = new $.World(4, null, null, null, 0, 0, gravity, doSleep, null, null, null, argPool, 0, true, true, $.List_List(2), $.Vector$(0, 0), $.Vector$(0, 0), $.TimeStep$(), $.Vector$(0, 0), $.Vector$(0, 0), $.WorldQueryWrapper$(), $.TimeOfImpactInput$(), $.TimeOfImpactOutput$(), $.Sweep$(), $.TimeOfImpactSolver$(), $.List_List(32), $.Island$(), $.List_List(10));
  t1.World$3(gravity, doSleep, argPool);
  return t1;
};

$.WorldQueryWrapper$ = function() {
  return new $.WorldQueryWrapper(null, null);
};

$.CircleContact$ = function(argPool) {
  var t1 = $.Manifold$();
  return new $.CircleContact(null, null, null, $.ContactEdge$(), $.ContactEdge$(), null, null, t1, null, argPool, $.Manifold$());
};

$.ContactConstraint$ = function() {
  var t1 = new $.ContactConstraint($.List_List(2), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Matrix22$(null, null), $.Matrix22$(null, null), null, null, null, null, null, null, 0, null);
  t1.ContactConstraint$0();
  return t1;
};

$.ContactConstraintPoint$ = function() {
  return new $.ContactConstraintPoint($.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), 0, 0, 0, 0, 0);
};

$.ContactEdge$ = function() {
  return new $.ContactEdge(null, null, null, null);
};

$.ContactRegister$ = function() {
  return new $.ContactRegister(null, false);
};

$.ContactSolver$ = function() {
  var t1 = new $.ContactSolver($.List_List(256), null, $.WorldManifold$(), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.PositionSolverManifold$(), $.Vector$(0, 0), $.Vector$(0, 0));
  t1.ContactSolver$0();
  return t1;
};

$.PositionSolverManifold$ = function() {
  return new $.PositionSolverManifold($.Vector$(0, 0), $.Vector$(0, 0), 0, $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0));
};

$.PolygonAndCircleContact$ = function(argPool) {
  var t1 = $.Manifold$();
  return new $.PolygonAndCircleContact(null, null, null, $.ContactEdge$(), $.ContactEdge$(), null, null, t1, null, argPool, $.Manifold$());
};

$.PolygonContact$ = function(argPool) {
  var t1 = $.Manifold$();
  return new $.PolygonContact(null, null, null, $.ContactEdge$(), $.ContactEdge$(), null, null, t1, null, argPool, $.Manifold$());
};

$.TimeOfImpactConstraint$ = function() {
  var t1 = new $.TimeOfImpactConstraint($.List_List(2), $.Vector$(0, 0), $.Vector$(0, 0), 0, 0, 0, null, null);
  t1.TimeOfImpactConstraint$0();
  return t1;
};

$.TimeOfImpactSolver$ = function() {
  var t1 = new $.TimeOfImpactSolver($.List_List(4), 0, null, $.TimeOfImpactSolverManifold$(), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0));
  t1.TimeOfImpactSolver$0();
  return t1;
};

$.TimeOfImpactSolverManifold$ = function() {
  return new $.TimeOfImpactSolverManifold($.Vector$(0, 0), $.Vector$(0, 0), 0, $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0));
};

$.DefaultWorldPool$ = function() {
  var t1 = new $.DefaultWorldPool(null, null, null);
  t1.DefaultWorldPool$0();
  return t1;
};

$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.Primitives__throwFormatException.call$1 = $.Primitives__throwFormatException;
$.Primitives__throwFormatException.$name = "Primitives__throwFormatException";
$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.Comparable_compare.call$2 = $.Comparable_compare;
$.Comparable_compare.$name = "Comparable_compare";
Isolate.$finishClasses($$);
$$ = {};
$.List = {builtin$cls: 'List'};
$.num = {builtin$cls: 'num'};
$.Joint = {builtin$cls: 'Joint'};
$.Match = {builtin$cls: 'Match'};
$.Set = {builtin$cls: 'Set'};
$.bool = {builtin$cls: 'bool'};
$._ManagerStub = {builtin$cls: '_ManagerStub'};
$.Element = {builtin$cls: 'Element'};
$.ReceivePort = {builtin$cls: 'ReceivePort'};
$.Node = {builtin$cls: 'Node'};
$.$int = {builtin$cls: '$int'};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT16 = Isolate.makeConstantList([]);
$.CONSTANT13 = new Isolate.$isolateProperties.JSBool();
$.CONSTANT11 = new Isolate.$isolateProperties.EventStreamProvider("mouseup");
$.CONSTANT1 = new Isolate.$isolateProperties.JSArray();
$.CONSTANT = new Isolate.$isolateProperties.NullThrownError();
$.CONSTANT2 = new Isolate.$isolateProperties.JSInt();
$.CONSTANT8 = new Isolate.$isolateProperties.EventStreamProvider("keyup");
$.CONSTANT0 = new Isolate.$isolateProperties.JSString();
$.CONSTANT6 = new Isolate.$isolateProperties.EventStreamProvider("click");
$.CONSTANT4 = new Isolate.$isolateProperties.JSNumber();
$.CONSTANT12 = new Isolate.$isolateProperties.EventStreamProvider("mousedown");
$.CONSTANT7 = new Isolate.$isolateProperties.EventStreamProvider("resize");
$.CONSTANT10 = new Isolate.$isolateProperties.EventStreamProvider("mousemove");
$.CONSTANT14 = new Isolate.$isolateProperties.JSDouble();
$.CONSTANT15 = new Isolate.$isolateProperties.Object();
$.CONSTANT9 = new Isolate.$isolateProperties.EventStreamProvider("keydown");
$.CONSTANT3 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CONSTANT5 = new Isolate.$isolateProperties._Random();
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$._cachedBrowserPrefix = null;
$.Game_canvasCenter = null;
$.GameObject_static_counter = 0;
$.TimeOfImpact_toiCalls = null;
$.TimeOfImpact_toiIters = null;
$.TimeOfImpact_toiMaxIters = null;
$.TimeOfImpact_toiRootIters = null;
$.TimeOfImpact_toiMaxRootIters = null;
$.$$and = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$and(receiver, a0);
};
$.$$mul = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$mul(receiver, a0);
};
$.$$add = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$add(receiver, a0);
};
$.$$sub = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$sub(receiver, a0);
};
$.$$div = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$div(receiver, a0);
};
$.$$lt = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$lt(receiver, a0);
};
$.$$shl = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$shl(receiver, a0);
};
$.$$le = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$le(receiver, a0);
};
$.$$eq = function(receiver, a0) {
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$$gt = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$gt(receiver, a0);
};
$.$$ge = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$ge(receiver, a0);
};
$.abs = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).abs$0(receiver);
};
$.add = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).add$1(receiver, a0);
};
$.addLast = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).addLast$1(receiver, a0);
};
$.allMatches = function(receiver, a0) {
  return $.getInterceptor$JSString(receiver).allMatches$1(receiver, a0);
};
$.clear = function(receiver) {
  return $.getInterceptor$JSArray(receiver).clear$0(receiver);
};
$.compareTo = function(receiver, a0) {
  return $.getInterceptor$JSStringJSNumber(receiver).compareTo$1(receiver, a0);
};
$.contains0 = function(receiver) {
  return $.getInterceptor$JSStringJSArray(receiver).get$contains(receiver);
};
$.contains1 = function(receiver, a0) {
  return $.getInterceptor$JSStringJSArray(receiver).contains$1(receiver, a0);
};
$.contains = function(receiver, a0, a1) {
  return $.getInterceptor$JSString(receiver).contains$2(receiver, a0, a1);
};
$.floor = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).floor$0(receiver);
};
$.forEach = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).forEach$1(receiver, a0);
};
$.getRange = function(receiver, a0, a1) {
  return $.getInterceptor$JSArray(receiver).getRange$2(receiver, a0, a1);
};
$.hashCode = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.indexOf = function(receiver, a0, a1) {
  return $.getInterceptor$JSStringJSArray(receiver).indexOf$2(receiver, a0, a1);
};
$.isEmpty = function(receiver) {
  return $.getInterceptor$JSStringJSArray(receiver).get$isEmpty(receiver);
};
$.iterator = function(receiver) {
  return $.getInterceptor$JSArray(receiver).get$iterator(receiver);
};
$.length = function(receiver) {
  return $.getInterceptor$JSStringJSArray(receiver).get$length(receiver);
};
$.length0 = function(receiver, value) {
  return $.getInterceptor$JSArray(receiver).set$length(receiver, value);
};
$.remove = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).remove$1(receiver, a0);
};
$.removeMatching = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).removeMatching$1(receiver, a0);
};
$.replaceAll = function(receiver, a0, a1) {
  return $.getInterceptor$JSString(receiver).replaceAll$2(receiver, a0, a1);
};
$.setRange = function(receiver, a0, a1, a2) {
  return $.getInterceptor$JSArray(receiver).setRange$3(receiver, a0, a1, a2);
};
$.toDouble = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).toDouble$0(receiver);
};
$.toList = function(receiver) {
  return $.getInterceptor$JSArray(receiver).toList$0(receiver);
};
$.toLowerCase = function(receiver) {
  return $.getInterceptor$JSString(receiver).toLowerCase$0(receiver);
};
$.toSet = function(receiver) {
  return $.getInterceptor$JSArray(receiver).toSet$0(receiver);
};
$.toString = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.$$index = function(receiver, a0) {
  return $.getInterceptor$JSStringJSArray(receiver).$index(receiver, a0);
};
$.$$indexSet = function(receiver, a0, a1) {
  return $.getInterceptor$JSArray(receiver).$indexSet(receiver, a0, a1);
};
$.$$xor = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$xor(receiver, a0);
};
$.$$negate = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).$negate(receiver);
};
$.$$or = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$or(receiver, a0);
};
$.$$tdiv = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$tdiv(receiver, a0);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumber = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSStringJSArray = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSStringJSNumber = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== (void 0);
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "quoteRegExp", "quoteRegExp", "get$quoteRegExp", function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", true, false);
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  $isJavaScriptIndexingBehavior: function() {
    return false;
  },
  $isCollection: function() {
    return false;
  },
  $isList: function() {
    return false;
  },
  $isMap: function() {
    return false;
  },
  toString$0: function() {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function() {
    return $.hashCodeForNativeObject(this);
  },
  $eq: function(a) {
    return this === a;
  }
});

$.$defineNativeClass("Worker", {
  get$id: function() {
    return this.id;
  },
  set$id: function(i) {
    this.id = i;
  },
  set$onmessage: function(f) {
    this.onmessage = f;
  },
  postMessage$1: function(msg) {
    this.postMessage(msg);
  },
  terminate$0: function() {
    this.terminate();
  }
});

$.$defineNativeClass("HTMLAnchorElement", {"": "target>,type=",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLAreaElement", {"": "shape=,target>"});

$.$defineNativeClass("HTMLBaseElement", {"": "target>"});

$.$defineNativeClass("Blob", {"": "type>"});

$.$defineNativeClass("HTMLButtonElement", {"": "type=,value="});

$.$defineNativeClass("HTMLCanvasElement", {"": "height=,width=",
  getContext$2: function(contextId, attrs) {
    var t1 = $ === attrs;
    if (t1)
      attrs = null;
    if (!t1)
      return this._getContext_1$2(contextId, $.convertDartToNative_Dictionary(attrs));
    return this._getContext_2$1(contextId);
  },
  getContext$1: function(contextId) {
    return this.getContext$2(contextId, $);
  },
  _getContext_1$2: function(contextId, attrs) {
    return this.getContext(contextId,attrs);
  },
  _getContext_2$1: function(contextId) {
    return this.getContext(contextId);
  }
});

$.$defineNativeClass("CanvasRenderingContext2D", {"": "fillStyle<,globalAlpha<,globalCompositeOperation<,lineWidth<,strokeStyle<",
  arc$6: function(x, y, radius, startAngle, endAngle, anticlockwise) {
    return this.arc(x,y,radius,startAngle,endAngle,anticlockwise);
  },
  beginPath$0: function() {
    return this.beginPath();
  },
  clearRect$4: function(x, y, width, height) {
    return this.clearRect(x,y,width,height);
  },
  closePath$0: function() {
    return this.closePath();
  },
  drawImage$9: function(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y, sw_OR_width, height_OR_sh, dx, dy, dw, dh) {
    return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y,sw_OR_width,height_OR_sh,dx,dy,dw,dh);
  },
  drawImage$5: function(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y, sw_OR_width, height_OR_sh) {
    return this.drawImage(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y, sw_OR_width, height_OR_sh);
  },
  fill$1: function(winding) {
    return this.fill(winding);
  },
  fill$0: function() {
    return this.fill();
  },
  lineTo$2: function(x, y) {
    return this.lineTo(x,y);
  },
  moveTo$2: function(x, y) {
    return this.moveTo(x,y);
  },
  restore$0: function() {
    return this.restore();
  },
  rotate$1: function(angle) {
    return this.rotate(angle);
  },
  save$0: function() {
    return this.save();
  },
  stroke$0: function() {
    return this.stroke();
  },
  translate$2: function(tx, ty) {
    return this.translate(tx,ty);
  }
});

$.$defineNativeClass("CharacterData", {"": "length>",
  remove$0: function() {
    return this.remove();
  }
});

$.$defineNativeClass("CSSStyleDeclaration", {"": "length>",
  _getPropertyValue$1: function(propertyName) {
    return this.getPropertyValue(propertyName);
  },
  getPropertyValue$1: function(propertyName) {
    var propValue = this._getPropertyValue$1(propertyName);
    return !(propValue == null) ? propValue : "";
  },
  setProperty$3: function(propertyName, value, priority) {
    this.setProperty(propertyName, value, priority);
    if (!!this.setAttribute)
      this.setAttribute(propertyName, value);
  },
  set$backgroundImage: function(value) {
    this.setProperty$3("background-image", value, "");
  },
  set$backgroundSize: function(value) {
    this.setProperty$3("background-size", value, "");
  },
  get$clear: function() {
    return this.getPropertyValue$1("clear");
  },
  clear$0: function() {
    return this.get$clear().call$0();
  },
  set$display: function(value) {
    this.setProperty$3("display", value, "");
  },
  get$filter: function() {
    return this.getPropertyValue$1($.S($._browserPrefix()) + "filter");
  },
  get$height: function() {
    return this.getPropertyValue$1("height");
  },
  set$height: function(value) {
    this.setProperty$3("height", value, "");
  },
  set$highlight: function(value) {
    this.setProperty$3($.S($._browserPrefix()) + "highlight", value, "");
  },
  get$position: function() {
    return this.getPropertyValue$1("position");
  },
  set$position: function(value) {
    this.setProperty$3("position", value, "");
  },
  set$src: function(value) {
    this.setProperty$3("src", value, "");
  },
  get$width: function() {
    return this.getPropertyValue$1("width");
  },
  set$width: function(value) {
    this.setProperty$3("width", value, "");
  }
});

$.$defineNativeClass("Document", {"": "$$dom_body:body~",
  $$dom_getElementById$1: function(elementId) {
    return this.getElementById(elementId);
  },
  $$dom_getElementsByName$1: function(elementName) {
    return this.getElementsByName(elementName);
  },
  $$dom_getElementsByTagName$1: function(tagname) {
    return this.getElementsByTagName(tagname);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  $$dom_querySelectorAll$1: function(selectors) {
    return this.querySelectorAll(selectors);
  },
  get$onClick: function() {
    return $.CONSTANT6.forTarget$1(this);
  },
  get$onMouseDown: function() {
    return $.CONSTANT12.forTarget$1(this);
  },
  onMouseDown$1: function(arg0) {
    return this.get$onMouseDown().call$1(arg0);
  },
  get$onMouseMove: function() {
    return $.CONSTANT10.forTarget$1(this);
  },
  onMouseMove$1: function(arg0) {
    return this.get$onMouseMove().call$1(arg0);
  },
  get$onMouseUp: function() {
    return $.CONSTANT11.forTarget$1(this);
  },
  onMouseUp$1: function(arg0) {
    return this.get$onMouseUp().call$1(arg0);
  },
  query$1: function(selectors) {
    if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", true, false).hasMatch$1(selectors) === true)
      return this.$$dom_getElementById$1($.CONSTANT0.substring$1(selectors, 1));
    return this.$$dom_querySelector$1(selectors);
  },
  queryAll$1: function(selectors) {
    var mutableMatches, len, copyOfMatches, t1, i;
    if ($.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", true, false).hasMatch$1(selectors) === true) {
      mutableMatches = this.$$dom_getElementsByName$1($.CONSTANT0.substring$2(selectors, 7, selectors.length - 2));
      if (typeof mutableMatches !== "string" && (typeof mutableMatches !== "object" || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.$isJavaScriptIndexingBehavior()))
        return this.queryAll$1$bailout(1, mutableMatches);
      len = mutableMatches.length;
      copyOfMatches = $.List_List$fixedLength(len, null);
      for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
        if (i >= t1)
          throw $.ioore(i);
        copyOfMatches[i] = mutableMatches[i];
      }
      return $._FrozenElementList$_wrap(copyOfMatches);
    } else if ($.RegExp_RegExp("^[*a-zA-Z0-9]+$", true, false).hasMatch$1(selectors) === true) {
      mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
      if (typeof mutableMatches !== "string" && (typeof mutableMatches !== "object" || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.$isJavaScriptIndexingBehavior()))
        return this.queryAll$1$bailout(3, mutableMatches);
      len = mutableMatches.length;
      copyOfMatches = $.List_List$fixedLength(len, null);
      for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
        if (i >= t1)
          throw $.ioore(i);
        copyOfMatches[i] = mutableMatches[i];
      }
      return $._FrozenElementList$_wrap(copyOfMatches);
    } else
      return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
  },
  queryAll$1$bailout: function(state0, mutableMatches, t2, len) {
    switch (state0) {
      case 0:
      default:
        var copyOfMatches, i, t1;
        if (state0 === 2 || state0 === 1 || state0 === 0 && $.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", true, false).hasMatch$1(selectors) === true)
          switch (state0) {
            case 0:
              mutableMatches = this.$$dom_getElementsByName$1($.CONSTANT0.substring$2(selectors, 7, selectors.length - 2));
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$JSStringJSArray(mutableMatches);
              len = t2.get$length(mutableMatches);
            case 2:
              state0 = 0;
              copyOfMatches = $.List_List$fixedLength(len, null);
              for (i = 0; $.CONSTANT2.$lt(i, len); ++i) {
                t1 = t2.$index(mutableMatches, i);
                if (i >= copyOfMatches.length)
                  throw $.ioore(i);
                copyOfMatches[i] = t1;
              }
              return $._FrozenElementList$_wrap(copyOfMatches);
          }
        else
          switch (state0) {
            case 0:
            default:
              if (state0 === 4 || state0 === 3 || state0 === 0 && $.RegExp_RegExp("^[*a-zA-Z0-9]+$", true, false).hasMatch$1(selectors) === true)
                switch (state0) {
                  case 0:
                    mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
                  case 3:
                    state0 = 0;
                    t2 = $.getInterceptor$JSStringJSArray(mutableMatches);
                    len = t2.get$length(mutableMatches);
                  case 4:
                    state0 = 0;
                    copyOfMatches = $.List_List$fixedLength(len, null);
                    for (i = 0; $.CONSTANT2.$lt(i, len); ++i) {
                      t1 = t2.$index(mutableMatches, i);
                      if (i >= copyOfMatches.length)
                        throw $.ioore(i);
                      copyOfMatches[i] = t1;
                    }
                    return $._FrozenElementList$_wrap(copyOfMatches);
                }
              else
                return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
          }
    }
  }
});

$.$defineNativeClass("DOMException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("Element", {"": "hidden<,id>,style>",
  translate$2: function(arg0, arg1) {
    return this.translate.call$2(arg0, arg1);
  },
  get$onClick: function() {
    return $.CONSTANT6.forTarget$1(this);
  },
  get$onMouseDown: function() {
    return $.CONSTANT12.forTarget$1(this);
  },
  onMouseDown$1: function(arg0) {
    return this.get$onMouseDown().call$1(arg0);
  },
  get$onMouseMove: function() {
    return $.CONSTANT10.forTarget$1(this);
  },
  onMouseMove$1: function(arg0) {
    return this.get$onMouseMove().call$1(arg0);
  },
  get$onMouseUp: function() {
    return $.CONSTANT11.forTarget$1(this);
  },
  onMouseUp$1: function(arg0) {
    return this.get$onMouseUp().call$1(arg0);
  }
});

$.$defineNativeClass("HTMLEmbedElement", {"": "height=,src<,type=,width="});

$.$defineNativeClass("Event", {"": "type>",
  get$target: function() {
    return $._convertNativeToDart_EventTarget(this.target);
  }
});

$.$defineNativeClass("EventException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("EventTarget", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_addEventListener$3")) {
      return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_removeEventListener$3")) {
      return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }
});

$.$defineNativeClass("HTMLFieldSetElement", {"": "type>"});

$.$defineNativeClass("FileException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("Float32Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function(start, rangeLength, from) {
    return this.setRange$4(start, rangeLength, from, null);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Float64Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function(start, rangeLength, from) {
    return this.setRange$4(start, rangeLength, from, null);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length>,target>",
  reset$0: function() {
    return this.reset();
  }
});

$.$defineNativeClass("HTMLCollection", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function(start, rangeLength, from) {
    return this.setRange$4(start, rangeLength, from, null);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLDocument", {
  get$body: function() {
    return $.document().get$$$dom_body();
  }
});

$.$defineNativeClass("XMLHttpRequestException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("XMLHttpRequestProgressEvent", {"": "position>"});

$.$defineNativeClass("HTMLIFrameElement", {"": "height=,src<,width="});

$.$defineNativeClass("HTMLImageElement", {"": "height=,src<,width=,x>,y>",
  complete$1: function(arg0) {
    return this.complete.call$1(arg0);
  }
});

$.$defineNativeClass("HTMLInputElement", {"": "height=,pattern>,src<,type=,value=,width=",
  step$3: function(arg0, arg1, arg2) {
    return this.step.call$3(arg0, arg1, arg2);
  }
});

$.$defineNativeClass("Int16Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function(start, rangeLength, from) {
    return this.setRange$4(start, rangeLength, from, null);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Int32Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function(start, rangeLength, from) {
    return this.setRange$4(start, rangeLength, from, null);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Int8Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function(start, rangeLength, from) {
    return this.setRange$4(start, rangeLength, from, null);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("KeyboardEvent", {
  get$keyCode: function() {
    return this.keyCode;
  }
});

$.$defineNativeClass("HTMLKeygenElement", {"": "type>"});

$.$defineNativeClass("HTMLLIElement", {"": "type=,value="});

$.$defineNativeClass("HTMLLinkElement", {"": "type="});

$.$defineNativeClass("HTMLMediaElement", {"": "error>,src<"});

$.$defineNativeClass("MessageEvent", {"": "ports>"});

$.$defineNativeClass("HTMLMeterElement", {"": "value="});

$.$defineNativeClass("MouseEvent", {"": "clientX>,clientY>,x>,y>"});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function(start, rangeLength, from) {
    return this.setRange$4(start, rangeLength, from, null);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Navigator", {"": "userAgent>"});

$.$defineNativeClass("Node", {"": "parent:parentElement~,text:textContent}",
  remove$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$0")) {
      var t1 = this.parentNode;
      if (!(t1 == null))
        t1.$$dom_removeChild$1(this);
    } else
      return Object.prototype.remove$0.call(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  contains$1: function(other) {
    return this.contains(other);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  $$dom_removeChild$1: function(oldChild) {
    return this.removeChild(oldChild);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("NodeList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function(start, rangeLength, from) {
    return this.setRange$4(start, rangeLength, from, null);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLOListElement", {"": "type=",
  start$0: function() {
    return this.start.call$0();
  }
});

$.$defineNativeClass("HTMLObjectElement", {"": "height=,type=,width="});

$.$defineNativeClass("HTMLOptionElement", {"": "value="});

$.$defineNativeClass("HTMLOutputElement", {"": "type>,value="});

$.$defineNativeClass("HTMLParamElement", {"": "value="});

$.$defineNativeClass("ProcessingInstruction", {"": "target>"});

$.$defineNativeClass("HTMLProgressElement", {"": "position>,value="});

$.$defineNativeClass("RadioNodeList", {"": "value="});

$.$defineNativeClass("RangeException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLScriptElement", {"": "src<,type="});

$.$defineNativeClass("HTMLSelectElement", {"": "length=,type>,value="});

$.$defineNativeClass("HTMLSourceElement", {"": "src<,type="});

$.$defineNativeClass("SpeechRecognitionError", {"": "error>"});

$.$defineNativeClass("Storage", {
  containsKey$1: function(key) {
    return !(this.$$dom_getItem$1(key) == null);
  },
  $index: function(key) {
    return this.$$dom_getItem$1(key);
  },
  $indexSet: function(key, value) {
    this.$$dom_setItem$2(key, value);
  },
  remove$1: function(key) {
    var value = this.$index(key);
    this.$$dom_removeItem$1(key);
    return value;
  },
  clear$0: function() {
    return this.$$dom_clear$0();
  },
  forEach$1: function(f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = this.$$dom_key$1(i);
      if (key == null)
        return;
      f.call$2(key, this.$index(key));
    }
  },
  get$keys: function() {
    var keys = [];
    this.forEach$1(new $.Storage_keys_anon(keys));
    return keys;
  },
  get$values: function() {
    var values = [];
    this.forEach$1(new $.Storage_values_anon(values));
    return values;
  },
  get$length: function() {
    return this.length;
  },
  get$isEmpty: function() {
    return this.$$dom_key$1(0) == null;
  },
  $$dom_clear$0: function() {
    return this.clear();
  },
  $$dom_getItem$1: function(key) {
    return this.getItem(key);
  },
  $$dom_key$1: function(index) {
    return this.key(index);
  },
  $$dom_removeItem$1: function(key) {
    return this.removeItem(key);
  },
  $$dom_setItem$2: function(key, data) {
    return this.setItem(key,data);
  },
  $isMap: function() {
    return true;
  }
});

$.$defineNativeClass("StorageEvent", {"": "key>"});

$.$defineNativeClass("HTMLStyleElement", {"": "type="});

$.$defineNativeClass("HTMLTextAreaElement", {"": "type>,value="});

$.$defineNativeClass("HTMLTrackElement", {"": "src<"});

$.$defineNativeClass("Uint16Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function(start, rangeLength, from) {
    return this.setRange$4(start, rangeLength, from, null);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint32Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function(start, rangeLength, from) {
    return this.setRange$4(start, rangeLength, from, null);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint8Array", {
  get$length: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$length")) {
      return this.length;
    } else
      return Object.prototype.get$length.call(this);
  },
  $index: function(index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$index")) {
      return this[index];
    } else
      return Object.prototype.$index.call(this, index);
  },
  $indexSet: function(index, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$indexSet")) {
      this[index] = value;
    } else
      return Object.prototype.$indexSet.call(this, index, value);
  },
  get$iterator: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$iterator")) {
      return $.FixedSizeListIterator$(this);
    } else
      return Object.prototype.get$iterator.call(this);
  },
  contains$1: function(element) {
    if (Object.getPrototypeOf(this).hasOwnProperty("contains$1")) {
      return $.IterableMixinWorkaround_contains(this, element);
    } else
      return Object.prototype.contains$1.call(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("forEach$1")) {
      var t1;
      for (t1 = $.iterator(this); t1.moveNext$0() === true;)
        f.call$1(t1.get$current());
      return;
    } else
      return Object.prototype.forEach$1.call(this, f);
  },
  toList$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("toList$0")) {
      return $.List_List$from(this);
    } else
      return Object.prototype.toList$0.call(this);
  },
  toSet$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("toSet$0")) {
      return $.HashSet_HashSet$from(this);
    } else
      return Object.prototype.toSet$0.call(this);
  },
  get$isEmpty: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$isEmpty")) {
      return $.$$eq($.length(this), 0);
    } else
      return Object.prototype.get$isEmpty.call(this);
  },
  add$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("add$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.add$1.call(this, value);
  },
  addLast$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addLast$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addLast$1.call(this, value);
  },
  set$length: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$length")) {
      throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
    } else
      return Object.prototype.set$length.call(this, value);
  },
  clear$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("clear$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
    } else
      return Object.prototype.clear$0.call(this);
  },
  sort$1: function(compare) {
    if (Object.getPrototypeOf(this).hasOwnProperty("sort$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
    } else
      return Object.prototype.sort$1.call(this, compare);
  },
  indexOf$2: function(element, start) {
    if (Object.getPrototypeOf(this).hasOwnProperty("indexOf$2")) {
      return $.Lists_indexOf(this, element, start, $.length(this));
    } else
      return Object.prototype.indexOf$2.call(this, element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeLast$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeLast$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeLast$0.call(this);
  },
  remove$1: function(object) {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.remove$1.call(this, object);
  },
  removeAll$1: function(elements) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeAll$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeAll$1.call(this, elements);
  },
  removeMatching$1: function(test) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeMatching$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeMatching$1.call(this, test);
  },
  setRange$4: function(start, rangeLength, from, startFrom) {
    if (Object.getPrototypeOf(this).hasOwnProperty("setRange$4")) {
      throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
    } else
      return Object.prototype.setRange$4.call(this, start, rangeLength, from, startFrom);
  },
  setRange$3: function(start, rangeLength, from) {
    return this.setRange$4(start, rangeLength, from, null);
  },
  removeRange$2: function(start, rangeLength) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeRange$2")) {
      throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
    } else
      return Object.prototype.removeRange$2.call(this, start, rangeLength);
  },
  getRange$2: function(start, rangeLength) {
    if (Object.getPrototypeOf(this).hasOwnProperty("getRange$2")) {
      return $.Lists_getRange(this, start, rangeLength, []);
    } else
      return Object.prototype.getRange$2.call(this, start, rangeLength);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint8ClampedArray", {
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq($.length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(start, rangeLength, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function(start, rangeLength, from) {
    return this.setRange$4(start, rangeLength, from, null);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLVideoElement", {"": "height=,width="});

$.$defineNativeClass("DOMWindow", {"": "navigator>",
  requestAnimationFrame$1: function(callback) {
    this._ensureRequestAnimationFrame$0();
    return this._requestAnimationFrame$1(callback);
  },
  _requestAnimationFrame$1: function(callback) {
    return this.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function() {
    if (!!(this.requestAnimationFrame && this.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(this);
  },
  get$parent: function() {
    return $._convertNativeToDart_Window(this.parent);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  moveTo$2: function(x, y) {
    return this.moveTo(x,y);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  setInterval$2: function(handler, timeout) {
    return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
  },
  get$onClick: function() {
    return $.CONSTANT6.forTarget$1(this);
  },
  get$onKeyDown: function() {
    return $.CONSTANT9.forTarget$1(this);
  },
  get$onKeyUp: function() {
    return $.CONSTANT8.forTarget$1(this);
  },
  get$onMouseDown: function() {
    return $.CONSTANT12.forTarget$1(this);
  },
  onMouseDown$1: function(arg0) {
    return this.get$onMouseDown().call$1(arg0);
  },
  get$onMouseMove: function() {
    return $.CONSTANT10.forTarget$1(this);
  },
  onMouseMove$1: function(arg0) {
    return this.get$onMouseMove().call$1(arg0);
  },
  get$onMouseUp: function() {
    return $.CONSTANT11.forTarget$1(this);
  },
  onMouseUp$1: function(arg0) {
    return this.get$onMouseUp().call$1(arg0);
  },
  get$onResize: function() {
    return $.CONSTANT7.forTarget$1(this);
  }
});

$.$defineNativeClass("XPathException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("SVGAElement", {"": "target>"});

$.$defineNativeClass("SVGFEBlendElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEColorMatrixElement", {"": "type>,height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEComponentTransferElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFECompositeElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEConvolveMatrixElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEDiffuseLightingElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEDisplacementMapElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEFloodElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEGaussianBlurElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEImageElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEMergeElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEMorphologyElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEOffsetElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEPointLightElement", {"": "x>,y>"});

$.$defineNativeClass("SVGFESpecularLightingElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFESpotLightElement", {"": "x>,y>"});

$.$defineNativeClass("SVGFETileElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFETurbulenceElement", {"": "type>,height>,width>,x>,y>"});

$.$defineNativeClass("SVGFilterElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGForeignObjectElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGImageElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGMaskElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGPatternElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGPointList", {
  clear$0: function() {
    return this.clear();
  }
});

$.$defineNativeClass("SVGPolygonElement", {"": "points>"});

$.$defineNativeClass("SVGPolylineElement", {"": "points>"});

$.$defineNativeClass("SVGRectElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGScriptElement", {"": "type="});

$.$defineNativeClass("SVGStyleElement", {"": "type="});

$.$defineNativeClass("SVGElement", {
  get$id: function() {
    return this.id;
  }
});

$.$defineNativeClass("SVGException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("SVGSVGElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGTextPositioningElement", {"": "x>,y>",
  rotate$1: function(arg0) {
    return this.rotate.call$1(arg0);
  }
});

$.$defineNativeClass("SVGUseElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGComponentTransferFunctionElement", {"": "type>"});

$.$defineNativeClass("SVGCursorElement", {"": "x>,y>"});

$.$defineNativeClass("SVGFEDropShadowElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGGlyphRefElement", {"": "x=,y="});

// 108 dynamic classes.
// 245 classes
// 23 !leaf
(function() {
  var v0_TextPositioningElement = "SVGTextPositioningElement|SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTRefElement", v1__SVGComponentTransferFunctionElement = "SVGComponentTransferFunctionElement|SVGFEFuncBElement|SVGFEFuncRElement|SVGFEFuncAElement|SVGFEFuncGElement", v2_MediaElement = "HTMLMediaElement|HTMLVideoElement|HTMLAudioElement", v3_SvgElement = [v0_TextPositioningElement, v1__SVGComponentTransferFunctionElement, "SVGElement|SVGStyledElement|SVGAElement|SVGTextContentElement|SVGTextPathElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDisplacementMapElement|SVGFEFloodElement|SVGFEDiffuseLightingElement|SVGFEComponentTransferElement|SVGFEGaussianBlurElement|SVGFEMorphologyElement|SVGFETileElement|SVGFEOffsetElement|SVGFEMergeElement|SVGFETurbulenceElement|SVGFESpecularLightingElement|SVGGElement|SVGImageElement|SVGLineElement|SVGFilterElement|SVGFEImageElement|SVGMarkerElement|SVGMaskElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGForeignObjectElement|SVGPathElement|SVGPatternElement|SVGPolylineElement|SVGPolygonElement|SVGRectElement|SVGStopElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGFEDropShadowElement|SVGGlyphRefElement|SVGMissingGlyphElement|SVGAnimationElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGAnimateColorElement|SVGFEDistantLightElement|SVGFEMergeNodeElement|SVGFESpotLightElement|SVGFEPointLightElement|SVGMetadataElement|SVGScriptElement|SVGStyleElement|SVGViewElement|SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGCursorElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGGlyphElement|SVGHKernElement|SVGFontFaceUriElement|SVGMPathElement|SVGVKernElement"].join("|"), v4_MouseEvent = "MouseEvent|WheelEvent", v5_Element = [v2_MediaElement, v3_SvgElement, "Element|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLAppletElement|HTMLBaseFontElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLMarqueeElement|HTMLElement|HTMLAnchorElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFormElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement"].join("|"), v6_CharacterData = "CharacterData|Text|CDATASection|Comment", v7_Document = "Document|SVGDocument|HTMLDocument", v8_Node = [v5_Element, v6_CharacterData, v7_Document, "Node|ProcessingInstruction|DocumentFragment|ShadowRoot|Attr|DocumentType|EntityReference|Notation"].join("|");
  $.dynamicSetMetadata([["Blob", "Blob|File"], ["CharacterData", v6_CharacterData], ["Document", v7_Document], ["Uint8Array", "Uint8Array|Uint8ClampedArray"], ["SVGTextPositioningElement", v0_TextPositioningElement], ["SVGComponentTransferFunctionElement", v1__SVGComponentTransferFunctionElement], ["SVGElement", v3_SvgElement], ["HTMLMediaElement", v2_MediaElement], ["Element", v5_Element], ["MouseEvent", v4_MouseEvent], ["Event", [v4_MouseEvent, "Event|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|XMLHttpRequestProgressEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|UIEvent|TextEvent|TouchEvent|CompositionEvent|SVGZoomEvent|KeyboardEvent|TrackEvent|WebKitTransitionEvent|WebGLContextEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|WebKitAnimationEvent|CloseEvent|BeforeLoadEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|HashChangeEvent|AudioProcessingEvent|OfflineAudioCompletionEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent"].join("|")], ["Node", v8_Node], ["EventTarget", [v8_Node, "EventTarget|DOMWindow"].join("|")], ["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["NodeList", "NodeList|RadioNodeList"]]);
})();

$.main.call$0 = $.main;

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState !== 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
function generateAccessor(field, prototype) {
  var len = field.length;
  var lastCharCode = field.charCodeAt(len - 1);
  var needsAccessor = (lastCharCode & 63) >= 60;
  if (needsAccessor) {
    var needsGetter = (lastCharCode & 3) > 0;
    var needsSetter = (lastCharCode & 2) == 0;
    var renaming = (lastCharCode & 64) != 0;
    var accessorName = field = field.substring(0, len - 1);
    if (renaming) {
      var divider = field.indexOf(":");
      accessorName = field.substring(0, divider);
      field = field.substring(divider + 1);
    }
    if (needsGetter) {
      var getterString = "return this." + field + ";";
      prototype["get$" + accessorName] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + accessorName] = new Function("v", setterString);
    }
  }
  return field;
};
Isolate.$isolateProperties.$generateAccessor = generateAccessor;
Isolate.$defineClass = function(cls, fields, prototype) {
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateAccessor(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      var fields = desc[''], supr;
      if (typeof fields == 'string') {
        var s = fields.split(';'); supr = s[0];
        fields = s[1] == '' ? [] : s[1].split(',');
      } else {
        supr = desc['super'];
      }
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, fields, desc);
      if (supr) Isolate.$pendingClasses[cls] = supr;
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (!member) continue;          if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } finally {
          if (result === sentinelUndefined) {
            if ($[fieldName] === sentinelInProgress) {
              $[fieldName] = null;
            }
          }
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}
//@ sourceMappingURL=Game.dart.js.map
